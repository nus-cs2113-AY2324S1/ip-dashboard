[{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"AlWo223"},"content":"T | 0 | read book","lastModifiedDate":"2023-10-03"},{"lineNumber":2,"author":{"gitId":"AlWo223"},"content":"T | 0 | buy Book","lastModifiedDate":"2023-10-03"}],"authorContributionMap":{"AlWo223":2}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"AlWo223"},"content":"# Lexi Task Manager - User Guide","lastModifiedDate":"2023-10-03"},{"lineNumber":2,"author":{"gitId":"AlWo223"},"content":"Lexi is a desktop app for managing different tasks, including todos, events and deadlines. Lexi is taking advantage of the Command Line Interface and is optimized for that to bring your task management and productivity to a next level. ","lastModifiedDate":"2023-10-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"## Features ","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"AlWo223"},"content":"**Notes about the command format:**","lastModifiedDate":"2023-10-03"},{"lineNumber":6,"author":{"gitId":"AlWo223"},"content":"+ Words in _UPPER_CASE_ are the parameters supplied by the user.","lastModifiedDate":"2023-10-03"},{"lineNumber":7,"author":{"gitId":"AlWo223"},"content":"  E.g., in _todo DESCRIPTION_, _DESCRIPTION_ is a parameter to be replaced with actual data, like _todo read book_.","lastModifiedDate":"2023-10-03"},{"lineNumber":8,"author":{"gitId":"AlWo223"},"content":"+ Items in square brackets are optional.","lastModifiedDate":"2023-10-03"},{"lineNumber":9,"author":{"gitId":"AlWo223"},"content":"  E.g., _find [KEYWORD]_ can be used as _find_ or as _find book_","lastModifiedDate":"2023-10-03"},{"lineNumber":10,"author":{"gitId":"AlWo223"},"content":"+ Parameters must be provided in the correct order.","lastModifiedDate":"2023-10-03"},{"lineNumber":11,"author":{"gitId":"AlWo223"},"content":"  E.g., if the command specifies _deadline DESCRIPTION DUE_DATE_, _deadline DUE_DATE DESCRIPTION_ is not acceptable.","lastModifiedDate":"2023-10-03"},{"lineNumber":12,"author":{"gitId":"AlWo223"},"content":"+ The commands are not case-sensitive.","lastModifiedDate":"2023-10-03"},{"lineNumber":13,"author":{"gitId":"AlWo223"},"content":"  E.g., _find_ as well as _FiNd_ is acceptable input.","lastModifiedDate":"2023-10-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  ","lastModifiedDate":"2019-07-29"},{"lineNumber":15,"author":{"gitId":"AlWo223"},"content":"### Listing all tasks: _list_","lastModifiedDate":"2023-10-03"},{"lineNumber":16,"author":{"gitId":"AlWo223"},"content":"Shows a list of all tasks in the task manager.","lastModifiedDate":"2023-10-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":18,"author":{"gitId":"AlWo223"},"content":"Format: _list_","lastModifiedDate":"2023-10-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":20,"author":{"gitId":"AlWo223"},"content":"### Adding a todo: _todo_","lastModifiedDate":"2023-10-03"},{"lineNumber":21,"author":{"gitId":"AlWo223"},"content":"Adds a todo to the task list.","lastModifiedDate":"2023-10-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":23,"author":{"gitId":"AlWo223"},"content":"Format: _todo DESCRIPTION_","lastModifiedDate":"2023-10-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":25,"author":{"gitId":"AlWo223"},"content":"Examples:","lastModifiedDate":"2023-10-03"},{"lineNumber":26,"author":{"gitId":"AlWo223"},"content":"+ _todo read book_","lastModifiedDate":"2023-10-03"},{"lineNumber":27,"author":{"gitId":"AlWo223"},"content":"+ _todo join sports club_","lastModifiedDate":"2023-10-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":29,"author":{"gitId":"AlWo223"},"content":"### Adding a deadline: _deadline_","lastModifiedDate":"2023-10-03"},{"lineNumber":30,"author":{"gitId":"AlWo223"},"content":"Adds a task with a specific deadline to the task list. The provided date and time should be in the format \u0027yyyy-mm-dd hh:mm\u0027","lastModifiedDate":"2023-10-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":32,"author":{"gitId":"AlWo223"},"content":"Format: _deadline DESCRIPTION /by DATETIME","lastModifiedDate":"2023-10-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":34,"author":{"gitId":"AlWo223"},"content":"Examples:","lastModifiedDate":"2023-10-03"},{"lineNumber":35,"author":{"gitId":"AlWo223"},"content":"+ _deadline apply to Harvard /by 2023-12-06 23:59_","lastModifiedDate":"2023-10-03"},{"lineNumber":36,"author":{"gitId":"AlWo223"},"content":"+ _deadline organize present for birthday party /by 2023-08-08 14:00_","lastModifiedDate":"2023-10-03"},{"lineNumber":37,"author":{"gitId":"AlWo223"},"content":"+ _deadline Submit assignment /by 2023-10-06 23:59_","lastModifiedDate":"2023-10-03"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":39,"author":{"gitId":"AlWo223"},"content":"### Adding an event: _event_","lastModifiedDate":"2023-10-03"},{"lineNumber":40,"author":{"gitId":"AlWo223"},"content":"Adds an event that starts and ends at specific times.","lastModifiedDate":"2023-10-03"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":42,"author":{"gitId":"AlWo223"},"content":"The provided dates and times should be in the format \u0027yyyy-mm-dd hh:mm\u0027","lastModifiedDate":"2023-10-03"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":44,"author":{"gitId":"AlWo223"},"content":"Format: _event DESCRIPTION /from START_DATETIME /to END_DATETIME","lastModifiedDate":"2023-10-03"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":46,"author":{"gitId":"AlWo223"},"content":"Examples:","lastModifiedDate":"2023-10-03"},{"lineNumber":47,"author":{"gitId":"AlWo223"},"content":"+ _event project meeting /from 2022-08-06 13:00 /to 2022-08-06 14:00_","lastModifiedDate":"2023-10-03"},{"lineNumber":48,"author":{"gitId":"AlWo223"},"content":"+ _event Welcome Party at NUS /from 2023-08-14 17:00 /to 2023-08-14 21:00_","lastModifiedDate":"2023-10-03"},{"lineNumber":49,"author":{"gitId":"AlWo223"},"content":"+ _event Coding Workshop /from 2023-10-06 19:00 /to 2023-10-06 21:00_","lastModifiedDate":"2023-10-03"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":51,"author":{"gitId":"AlWo223"},"content":"### Marking a task as done: _mark_","lastModifiedDate":"2023-10-03"},{"lineNumber":52,"author":{"gitId":"AlWo223"},"content":"Indicates that a task is completed with a checked box: [x].","lastModifiedDate":"2023-10-03"},{"lineNumber":53,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":54,"author":{"gitId":"AlWo223"},"content":"Format: _mark INDEX_","lastModifiedDate":"2023-10-03"},{"lineNumber":55,"author":{"gitId":"AlWo223"},"content":"+ Marks the task at the specified _INDEX_. The index refers to the index number shown in the displayed task list. The index must be a positive integer 1, 2, 3, …​","lastModifiedDate":"2023-10-03"},{"lineNumber":56,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":57,"author":{"gitId":"AlWo223"},"content":"Examples:","lastModifiedDate":"2023-10-03"},{"lineNumber":58,"author":{"gitId":"AlWo223"},"content":"+ _mark 1_ (Marks the 1st task as done.)","lastModifiedDate":"2023-10-03"},{"lineNumber":59,"author":{"gitId":"AlWo223"},"content":"+ _mark 3_ (Marks the 3rd task as done.)","lastModifiedDate":"2023-10-03"},{"lineNumber":60,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":61,"author":{"gitId":"AlWo223"},"content":"### Unmarking a task: _unmark_","lastModifiedDate":"2023-10-03"},{"lineNumber":62,"author":{"gitId":"AlWo223"},"content":"Reverts the checked label of a task to unmark it: [ ].","lastModifiedDate":"2023-10-03"},{"lineNumber":63,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":64,"author":{"gitId":"AlWo223"},"content":"Format: _unmark INDEX_","lastModifiedDate":"2023-10-03"},{"lineNumber":65,"author":{"gitId":"AlWo223"},"content":"+ Marks the task at the specified _INDEX_.","lastModifiedDate":"2023-10-03"},{"lineNumber":66,"author":{"gitId":"AlWo223"},"content":"+ The index refers to the index number shown in the displayed task list.","lastModifiedDate":"2023-10-03"},{"lineNumber":67,"author":{"gitId":"AlWo223"},"content":"+ The index must be a positive integer 1, 2, 3, …​","lastModifiedDate":"2023-10-03"},{"lineNumber":68,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":69,"author":{"gitId":"AlWo223"},"content":"Examples:","lastModifiedDate":"2023-10-03"},{"lineNumber":70,"author":{"gitId":"AlWo223"},"content":"+ _unmark 1_ (Unmarks the 1st task.)","lastModifiedDate":"2023-10-03"},{"lineNumber":71,"author":{"gitId":"AlWo223"},"content":"+ _unmark 3_ (Unmarks the 3rd task.)","lastModifiedDate":"2023-10-03"},{"lineNumber":72,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":73,"author":{"gitId":"AlWo223"},"content":"### Deleting a task: _delete_","lastModifiedDate":"2023-10-03"},{"lineNumber":74,"author":{"gitId":"AlWo223"},"content":"Removes the specified task from the list.","lastModifiedDate":"2023-10-03"},{"lineNumber":75,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":76,"author":{"gitId":"AlWo223"},"content":"Format: _delete TASK_INDEX_","lastModifiedDate":"2023-10-03"},{"lineNumber":77,"author":{"gitId":"AlWo223"},"content":"+ The task at the specified _INDEX_ will be removed.","lastModifiedDate":"2023-10-03"},{"lineNumber":78,"author":{"gitId":"AlWo223"},"content":"+ The index refers to the index number shown in the displayed task list.","lastModifiedDate":"2023-10-03"},{"lineNumber":79,"author":{"gitId":"AlWo223"},"content":"+ The index must be a positive integer 1, 2, 3, …​","lastModifiedDate":"2023-10-03"},{"lineNumber":80,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":81,"author":{"gitId":"AlWo223"},"content":"Examples:","lastModifiedDate":"2023-10-03"},{"lineNumber":82,"author":{"gitId":"AlWo223"},"content":"+ _delete 1_ (Deletes the 1st task.)","lastModifiedDate":"2023-10-03"},{"lineNumber":83,"author":{"gitId":"AlWo223"},"content":"+ _delete 3_ (Deletes the 3rd task.)","lastModifiedDate":"2023-10-03"},{"lineNumber":84,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":85,"author":{"gitId":"AlWo223"},"content":"### Searching by keyword: _find_","lastModifiedDate":"2023-10-03"},{"lineNumber":86,"author":{"gitId":"AlWo223"},"content":"Finds and displays all tasks that contain the given keyword in their description.","lastModifiedDate":"2023-10-03"},{"lineNumber":87,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":88,"author":{"gitId":"AlWo223"},"content":"Format: _find [KEYWORD]_","lastModifiedDate":"2023-10-03"},{"lineNumber":89,"author":{"gitId":"AlWo223"},"content":"+ The search is case-insensitive. E.g., _book_ will match _Book_.","lastModifiedDate":"2023-10-03"},{"lineNumber":90,"author":{"gitId":"AlWo223"},"content":"+ You can list all tasks by leaving the keyword blank.","lastModifiedDate":"2023-10-03"},{"lineNumber":91,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":92,"author":{"gitId":"AlWo223"},"content":"Examples:","lastModifiedDate":"2023-10-03"},{"lineNumber":93,"author":{"gitId":"AlWo223"},"content":"+ _find book_ returns _read book_ and _read Book_","lastModifiedDate":"2023-10-03"},{"lineNumber":94,"author":{"gitId":"AlWo223"},"content":"+ _find oo_ returns _read book_ and _read Book_","lastModifiedDate":"2023-10-03"},{"lineNumber":95,"author":{"gitId":"AlWo223"},"content":"+ _find_ returns all tasks","lastModifiedDate":"2023-10-03"},{"lineNumber":96,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":97,"author":{"gitId":"AlWo223"},"content":"### Terminate and save task manager: _bye_","lastModifiedDate":"2023-10-03"},{"lineNumber":98,"author":{"gitId":"AlWo223"},"content":"Saves data and exits Lexi.","lastModifiedDate":"2023-10-03"},{"lineNumber":99,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":100,"author":{"gitId":"AlWo223"},"content":"Format: _bye_","lastModifiedDate":"2023-10-03"},{"lineNumber":101,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":102,"author":{"gitId":"AlWo223"},"content":"### Saving the data","lastModifiedDate":"2023-10-03"},{"lineNumber":103,"author":{"gitId":"AlWo223"},"content":"Lexi automatically saves your tasks in the hard-disk after each user input. ","lastModifiedDate":"2023-10-03"},{"lineNumber":104,"author":{"gitId":"AlWo223"},"content":"There is no need to save the data manually.","lastModifiedDate":"2023-10-03"},{"lineNumber":105,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":106,"author":{"gitId":"AlWo223"},"content":"### Editing the data file","lastModifiedDate":"2023-10-03"},{"lineNumber":107,"author":{"gitId":"AlWo223"},"content":"Lexi stores the data as a txt file _data/duke.txt_. ","lastModifiedDate":"2023-10-03"},{"lineNumber":108,"author":{"gitId":"AlWo223"},"content":"Advanced user can update data directly by editing that file.","lastModifiedDate":"2023-10-03"},{"lineNumber":109,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":110,"author":{"gitId":"AlWo223"},"content":"**Warning:** Make sure to use the correct data formatting, which is different to the one you will encounter in the tool interaction. Lexi will remove of all corrupted data lines on execution of the program.","lastModifiedDate":"2023-10-03"}],"authorContributionMap":{"AlWo223":95,"-":15}},{"path":"src/main/java/duke/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AlWo223"},"content":"package duke;","lastModifiedDate":"2023-10-01"},{"lineNumber":2,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":3,"author":{"gitId":"AlWo223"},"content":"import duke.exceptions.InvalidCommandException;","lastModifiedDate":"2023-10-01"},{"lineNumber":4,"author":{"gitId":"AlWo223"},"content":"import duke.exceptions.InvalidTimeSpanException;","lastModifiedDate":"2023-10-01"},{"lineNumber":5,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":6,"author":{"gitId":"AlWo223"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-10-01"},{"lineNumber":7,"author":{"gitId":"AlWo223"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-10-01"},{"lineNumber":8,"author":{"gitId":"AlWo223"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-03"},{"lineNumber":9,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":10,"author":{"gitId":"AlWo223"},"content":"/**","lastModifiedDate":"2023-10-01"},{"lineNumber":11,"author":{"gitId":"AlWo223"},"content":" * Executes the commands provided by the user.","lastModifiedDate":"2023-10-01"},{"lineNumber":12,"author":{"gitId":"AlWo223"},"content":" */","lastModifiedDate":"2023-10-01"},{"lineNumber":13,"author":{"gitId":"AlWo223"},"content":"public class Command {","lastModifiedDate":"2023-10-01"},{"lineNumber":14,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":15,"author":{"gitId":"AlWo223"},"content":"    private final String command;","lastModifiedDate":"2023-10-03"},{"lineNumber":16,"author":{"gitId":"AlWo223"},"content":"    private final String argument;","lastModifiedDate":"2023-10-03"},{"lineNumber":17,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":18,"author":{"gitId":"AlWo223"},"content":"    public enum CommandType {","lastModifiedDate":"2023-10-03"},{"lineNumber":19,"author":{"gitId":"AlWo223"},"content":"        LIST, FIND, MARK, UNMARK, TODO, DEADLINE, EVENT, DELETE, BYE","lastModifiedDate":"2023-10-03"},{"lineNumber":20,"author":{"gitId":"AlWo223"},"content":"    }","lastModifiedDate":"2023-10-03"},{"lineNumber":21,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":22,"author":{"gitId":"AlWo223"},"content":"    /**","lastModifiedDate":"2023-10-01"},{"lineNumber":23,"author":{"gitId":"AlWo223"},"content":"     * Constructor of Command.","lastModifiedDate":"2023-10-01"},{"lineNumber":24,"author":{"gitId":"AlWo223"},"content":"     * @param command Command to be executed.","lastModifiedDate":"2023-10-03"},{"lineNumber":25,"author":{"gitId":"AlWo223"},"content":"     * @param argument Arguments required for the specific command.","lastModifiedDate":"2023-10-03"},{"lineNumber":26,"author":{"gitId":"AlWo223"},"content":"     * */","lastModifiedDate":"2023-10-01"},{"lineNumber":27,"author":{"gitId":"AlWo223"},"content":"    public Command(String command, String argument) {","lastModifiedDate":"2023-10-01"},{"lineNumber":28,"author":{"gitId":"AlWo223"},"content":"        this.command \u003d command;","lastModifiedDate":"2023-10-01"},{"lineNumber":29,"author":{"gitId":"AlWo223"},"content":"        this.argument \u003d argument;","lastModifiedDate":"2023-10-01"},{"lineNumber":30,"author":{"gitId":"AlWo223"},"content":"    }","lastModifiedDate":"2023-10-01"},{"lineNumber":31,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":32,"author":{"gitId":"AlWo223"},"content":"    /**","lastModifiedDate":"2023-10-01"},{"lineNumber":33,"author":{"gitId":"AlWo223"},"content":"     * Executes the given command.","lastModifiedDate":"2023-10-01"},{"lineNumber":34,"author":{"gitId":"AlWo223"},"content":"     * @param tasks TaskList object containing the list of tasks.","lastModifiedDate":"2023-10-03"},{"lineNumber":35,"author":{"gitId":"AlWo223"},"content":"     * @param ui Ui object to interact with the user.","lastModifiedDate":"2023-10-03"},{"lineNumber":36,"author":{"gitId":"AlWo223"},"content":"     * @return TaskList object containing the list of tasks with the applied modifications.","lastModifiedDate":"2023-10-01"},{"lineNumber":37,"author":{"gitId":"AlWo223"},"content":"     * @throws InvalidCommandException If the command is not included in the program or if there is a typo.","lastModifiedDate":"2023-10-01"},{"lineNumber":38,"author":{"gitId":"AlWo223"},"content":"     * */","lastModifiedDate":"2023-10-01"},{"lineNumber":39,"author":{"gitId":"AlWo223"},"content":"    public TaskList executeCommand(TaskList tasks, Ui ui) throws InvalidCommandException {","lastModifiedDate":"2023-10-01"},{"lineNumber":40,"author":{"gitId":"AlWo223"},"content":"        CommandType commandType \u003d getCommandType(this.command);","lastModifiedDate":"2023-10-03"},{"lineNumber":41,"author":{"gitId":"AlWo223"},"content":"        switch (commandType) {","lastModifiedDate":"2023-10-03"},{"lineNumber":42,"author":{"gitId":"AlWo223"},"content":"        case LIST:","lastModifiedDate":"2023-10-03"},{"lineNumber":43,"author":{"gitId":"AlWo223"},"content":"            ui.printList(tasks);","lastModifiedDate":"2023-10-01"},{"lineNumber":44,"author":{"gitId":"AlWo223"},"content":"            break;","lastModifiedDate":"2023-10-01"},{"lineNumber":45,"author":{"gitId":"AlWo223"},"content":"        case FIND:","lastModifiedDate":"2023-10-03"},{"lineNumber":46,"author":{"gitId":"AlWo223"},"content":"            findKeyword(tasks, argument, ui);","lastModifiedDate":"2023-10-03"},{"lineNumber":47,"author":{"gitId":"AlWo223"},"content":"            break;","lastModifiedDate":"2023-10-01"},{"lineNumber":48,"author":{"gitId":"AlWo223"},"content":"        case MARK:","lastModifiedDate":"2023-10-03"},{"lineNumber":49,"author":{"gitId":"AlWo223"},"content":"            tasks \u003d editTask(argument, true, tasks, ui);","lastModifiedDate":"2023-10-01"},{"lineNumber":50,"author":{"gitId":"AlWo223"},"content":"            break;","lastModifiedDate":"2023-10-01"},{"lineNumber":51,"author":{"gitId":"AlWo223"},"content":"        case UNMARK:","lastModifiedDate":"2023-10-03"},{"lineNumber":52,"author":{"gitId":"AlWo223"},"content":"            tasks \u003d editTask(argument, false, tasks, ui);","lastModifiedDate":"2023-10-01"},{"lineNumber":53,"author":{"gitId":"AlWo223"},"content":"            break;","lastModifiedDate":"2023-10-01"},{"lineNumber":54,"author":{"gitId":"AlWo223"},"content":"        case TODO:","lastModifiedDate":"2023-10-03"},{"lineNumber":55,"author":{"gitId":"AlWo223"},"content":"            tasks \u003d addToDo(argument, tasks, ui);","lastModifiedDate":"2023-10-01"},{"lineNumber":56,"author":{"gitId":"AlWo223"},"content":"            break;","lastModifiedDate":"2023-10-01"},{"lineNumber":57,"author":{"gitId":"AlWo223"},"content":"        case DEADLINE:","lastModifiedDate":"2023-10-03"},{"lineNumber":58,"author":{"gitId":"AlWo223"},"content":"            tasks \u003d addDeadline(argument, tasks, ui);","lastModifiedDate":"2023-10-01"},{"lineNumber":59,"author":{"gitId":"AlWo223"},"content":"            break;","lastModifiedDate":"2023-10-01"},{"lineNumber":60,"author":{"gitId":"AlWo223"},"content":"        case EVENT:","lastModifiedDate":"2023-10-03"},{"lineNumber":61,"author":{"gitId":"AlWo223"},"content":"            tasks \u003d addEvent(argument, tasks, ui);","lastModifiedDate":"2023-10-01"},{"lineNumber":62,"author":{"gitId":"AlWo223"},"content":"            break;","lastModifiedDate":"2023-10-01"},{"lineNumber":63,"author":{"gitId":"AlWo223"},"content":"        case DELETE:","lastModifiedDate":"2023-10-03"},{"lineNumber":64,"author":{"gitId":"AlWo223"},"content":"            tasks \u003d deleteTask(argument, tasks, ui);","lastModifiedDate":"2023-10-01"},{"lineNumber":65,"author":{"gitId":"AlWo223"},"content":"            break;","lastModifiedDate":"2023-10-01"},{"lineNumber":66,"author":{"gitId":"AlWo223"},"content":"        case BYE:","lastModifiedDate":"2023-10-03"},{"lineNumber":67,"author":{"gitId":"AlWo223"},"content":"        default:","lastModifiedDate":"2023-10-01"},{"lineNumber":68,"author":{"gitId":"AlWo223"},"content":"            break;","lastModifiedDate":"2023-10-03"},{"lineNumber":69,"author":{"gitId":"AlWo223"},"content":"        }","lastModifiedDate":"2023-10-01"},{"lineNumber":70,"author":{"gitId":"AlWo223"},"content":"        return tasks;","lastModifiedDate":"2023-10-01"},{"lineNumber":71,"author":{"gitId":"AlWo223"},"content":"    }","lastModifiedDate":"2023-10-01"},{"lineNumber":72,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":73,"author":{"gitId":"AlWo223"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":74,"author":{"gitId":"AlWo223"},"content":"     * Returns the CommandType enum based on the given command.","lastModifiedDate":"2023-10-03"},{"lineNumber":75,"author":{"gitId":"AlWo223"},"content":"     * @param command Command to be executed.","lastModifiedDate":"2023-10-03"},{"lineNumber":76,"author":{"gitId":"AlWo223"},"content":"     * @return CommandType enum of the given command.","lastModifiedDate":"2023-10-03"},{"lineNumber":77,"author":{"gitId":"AlWo223"},"content":"     * @throws InvalidCommandException If the command is not included in the program or if there is a typo.","lastModifiedDate":"2023-10-03"},{"lineNumber":78,"author":{"gitId":"AlWo223"},"content":"     * */","lastModifiedDate":"2023-10-03"},{"lineNumber":79,"author":{"gitId":"AlWo223"},"content":"    public CommandType getCommandType(String command) throws InvalidCommandException {","lastModifiedDate":"2023-10-03"},{"lineNumber":80,"author":{"gitId":"AlWo223"},"content":"        try {","lastModifiedDate":"2023-10-03"},{"lineNumber":81,"author":{"gitId":"AlWo223"},"content":"            return CommandType.valueOf(command.toUpperCase());","lastModifiedDate":"2023-10-03"},{"lineNumber":82,"author":{"gitId":"AlWo223"},"content":"        } catch(IllegalArgumentException e) {","lastModifiedDate":"2023-10-03"},{"lineNumber":83,"author":{"gitId":"AlWo223"},"content":"            throw new InvalidCommandException();","lastModifiedDate":"2023-10-03"},{"lineNumber":84,"author":{"gitId":"AlWo223"},"content":"        }","lastModifiedDate":"2023-10-03"},{"lineNumber":85,"author":{"gitId":"AlWo223"},"content":"    }","lastModifiedDate":"2023-10-03"},{"lineNumber":86,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":87,"author":{"gitId":"AlWo223"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":88,"author":{"gitId":"AlWo223"},"content":"     * Finds all the tasks containing the specified keyword in the description.","lastModifiedDate":"2023-10-03"},{"lineNumber":89,"author":{"gitId":"AlWo223"},"content":"     * If keyword is empty, it will print the entire list of tasks.","lastModifiedDate":"2023-10-03"},{"lineNumber":90,"author":{"gitId":"AlWo223"},"content":"     * @param tasks TaskList object containing the list of tasks.","lastModifiedDate":"2023-10-03"},{"lineNumber":91,"author":{"gitId":"AlWo223"},"content":"     * @param keyword Keyword to be searched for.","lastModifiedDate":"2023-10-03"},{"lineNumber":92,"author":{"gitId":"AlWo223"},"content":"     * @param ui Ui object to interact with the user.","lastModifiedDate":"2023-10-03"},{"lineNumber":93,"author":{"gitId":"AlWo223"},"content":"     * */","lastModifiedDate":"2023-10-03"},{"lineNumber":94,"author":{"gitId":"AlWo223"},"content":"    public void findKeyword(TaskList tasks, String keyword, Ui ui) {","lastModifiedDate":"2023-10-03"},{"lineNumber":95,"author":{"gitId":"AlWo223"},"content":"        if (keyword \u003d\u003d null || keyword.isEmpty()){","lastModifiedDate":"2023-10-03"},{"lineNumber":96,"author":{"gitId":"AlWo223"},"content":"            ui.printList(tasks);","lastModifiedDate":"2023-10-03"},{"lineNumber":97,"author":{"gitId":"AlWo223"},"content":"            return;","lastModifiedDate":"2023-10-03"},{"lineNumber":98,"author":{"gitId":"AlWo223"},"content":"        }","lastModifiedDate":"2023-10-03"},{"lineNumber":99,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":100,"author":{"gitId":"AlWo223"},"content":"        ArrayList\u003cTask\u003e matchingTasks \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-10-03"},{"lineNumber":101,"author":{"gitId":"AlWo223"},"content":"        for (Task task : tasks.getTasks()) {","lastModifiedDate":"2023-10-03"},{"lineNumber":102,"author":{"gitId":"AlWo223"},"content":"            if (task.getDescription().toLowerCase().contains(keyword.toLowerCase())) {","lastModifiedDate":"2023-10-03"},{"lineNumber":103,"author":{"gitId":"AlWo223"},"content":"                matchingTasks.add(task);","lastModifiedDate":"2023-10-03"},{"lineNumber":104,"author":{"gitId":"AlWo223"},"content":"            }","lastModifiedDate":"2023-10-03"},{"lineNumber":105,"author":{"gitId":"AlWo223"},"content":"        }","lastModifiedDate":"2023-10-03"},{"lineNumber":106,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":107,"author":{"gitId":"AlWo223"},"content":"        ui.printKeywordSearchResult(matchingTasks);","lastModifiedDate":"2023-10-03"},{"lineNumber":108,"author":{"gitId":"AlWo223"},"content":"    }","lastModifiedDate":"2023-10-03"},{"lineNumber":109,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":110,"author":{"gitId":"AlWo223"},"content":"    /**","lastModifiedDate":"2023-10-01"},{"lineNumber":111,"author":{"gitId":"AlWo223"},"content":"     * Marks or unmarks a given task.","lastModifiedDate":"2023-10-01"},{"lineNumber":112,"author":{"gitId":"AlWo223"},"content":"     * If the index is out of bounds or if the argument is not a number, it will print an error message.","lastModifiedDate":"2023-10-01"},{"lineNumber":113,"author":{"gitId":"AlWo223"},"content":"     * @param argument Index of the task to be edited.","lastModifiedDate":"2023-10-03"},{"lineNumber":114,"author":{"gitId":"AlWo223"},"content":"     * @param done New status of the task.","lastModifiedDate":"2023-10-03"},{"lineNumber":115,"author":{"gitId":"AlWo223"},"content":"     * @param tasks TaskList object containing the list of tasks.","lastModifiedDate":"2023-10-03"},{"lineNumber":116,"author":{"gitId":"AlWo223"},"content":"     * @param ui Ui object to interact with the user.","lastModifiedDate":"2023-10-03"},{"lineNumber":117,"author":{"gitId":"AlWo223"},"content":"     * @return TaskList object containing the list of tasks with the applied mark modifications.","lastModifiedDate":"2023-10-01"},{"lineNumber":118,"author":{"gitId":"AlWo223"},"content":"     * */","lastModifiedDate":"2023-10-01"},{"lineNumber":119,"author":{"gitId":"AlWo223"},"content":"    public TaskList editTask(String argument, boolean done, TaskList tasks, Ui ui) {","lastModifiedDate":"2023-10-01"},{"lineNumber":120,"author":{"gitId":"AlWo223"},"content":"        try {","lastModifiedDate":"2023-10-01"},{"lineNumber":121,"author":{"gitId":"AlWo223"},"content":"            int taskIndex \u003d Integer.parseInt(argument);","lastModifiedDate":"2023-10-01"},{"lineNumber":122,"author":{"gitId":"AlWo223"},"content":"            tasks.getTasks().get(taskIndex - 1).setDone(done);","lastModifiedDate":"2023-10-01"},{"lineNumber":123,"author":{"gitId":"AlWo223"},"content":"            ui.printMark(done, tasks, taskIndex);","lastModifiedDate":"2023-10-01"},{"lineNumber":124,"author":{"gitId":"AlWo223"},"content":"        } catch (IndexOutOfBoundsException | NumberFormatException e){","lastModifiedDate":"2023-10-01"},{"lineNumber":125,"author":{"gitId":"AlWo223"},"content":"            ui.printInvalidTaskIdMessage();","lastModifiedDate":"2023-10-01"},{"lineNumber":126,"author":{"gitId":"AlWo223"},"content":"        }","lastModifiedDate":"2023-10-01"},{"lineNumber":127,"author":{"gitId":"AlWo223"},"content":"        return tasks;","lastModifiedDate":"2023-10-01"},{"lineNumber":128,"author":{"gitId":"AlWo223"},"content":"    }","lastModifiedDate":"2023-10-01"},{"lineNumber":129,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":130,"author":{"gitId":"AlWo223"},"content":"    /**","lastModifiedDate":"2023-10-01"},{"lineNumber":131,"author":{"gitId":"AlWo223"},"content":"     * Adds a new Todo task with the description specified in argument.","lastModifiedDate":"2023-10-01"},{"lineNumber":132,"author":{"gitId":"AlWo223"},"content":"     * If the description is empty, it will print an error message.","lastModifiedDate":"2023-10-01"},{"lineNumber":133,"author":{"gitId":"AlWo223"},"content":"     * @param argument Description of the task.","lastModifiedDate":"2023-10-03"},{"lineNumber":134,"author":{"gitId":"AlWo223"},"content":"     * @param tasks TaskList object containing the list of tasks.","lastModifiedDate":"2023-10-03"},{"lineNumber":135,"author":{"gitId":"AlWo223"},"content":"     * @param ui Ui object to interact with the user.","lastModifiedDate":"2023-10-03"},{"lineNumber":136,"author":{"gitId":"AlWo223"},"content":"     * @return TaskList object containing the list of tasks with the new Todo.","lastModifiedDate":"2023-10-01"},{"lineNumber":137,"author":{"gitId":"AlWo223"},"content":"     * @see Todo","lastModifiedDate":"2023-10-01"},{"lineNumber":138,"author":{"gitId":"AlWo223"},"content":"     * */","lastModifiedDate":"2023-10-01"},{"lineNumber":139,"author":{"gitId":"AlWo223"},"content":"    public TaskList addToDo(String argument, TaskList tasks, Ui ui) {","lastModifiedDate":"2023-10-01"},{"lineNumber":140,"author":{"gitId":"AlWo223"},"content":"        if (argument \u003d\u003d null || argument.isEmpty()) {","lastModifiedDate":"2023-10-01"},{"lineNumber":141,"author":{"gitId":"AlWo223"},"content":"            ui.printEmptyTodoMessage();","lastModifiedDate":"2023-10-01"},{"lineNumber":142,"author":{"gitId":"AlWo223"},"content":"            return tasks;","lastModifiedDate":"2023-10-05"},{"lineNumber":143,"author":{"gitId":"AlWo223"},"content":"        }","lastModifiedDate":"2023-10-01"},{"lineNumber":144,"author":{"gitId":"AlWo223"},"content":"        Task todo \u003d new Todo(argument);","lastModifiedDate":"2023-10-01"},{"lineNumber":145,"author":{"gitId":"AlWo223"},"content":"        tasks.add(todo);","lastModifiedDate":"2023-10-01"},{"lineNumber":146,"author":{"gitId":"AlWo223"},"content":"        ui.printTaskAddedMessage(todo, tasks.getTasks());","lastModifiedDate":"2023-10-01"},{"lineNumber":147,"author":{"gitId":"AlWo223"},"content":"        return tasks;","lastModifiedDate":"2023-10-01"},{"lineNumber":148,"author":{"gitId":"AlWo223"},"content":"    }","lastModifiedDate":"2023-10-01"},{"lineNumber":149,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":150,"author":{"gitId":"AlWo223"},"content":"    /**","lastModifiedDate":"2023-10-01"},{"lineNumber":151,"author":{"gitId":"AlWo223"},"content":"     * Adds a new Deadline task with the description and due date specified in argument.","lastModifiedDate":"2023-10-01"},{"lineNumber":152,"author":{"gitId":"AlWo223"},"content":"     * If the description or due date is empty, it will print an error message.","lastModifiedDate":"2023-10-01"},{"lineNumber":153,"author":{"gitId":"AlWo223"},"content":"     * @param argument Description and due date of the task.","lastModifiedDate":"2023-10-03"},{"lineNumber":154,"author":{"gitId":"AlWo223"},"content":"     * @param tasks TaskList object containing the list of tasks.","lastModifiedDate":"2023-10-03"},{"lineNumber":155,"author":{"gitId":"AlWo223"},"content":"     * @param ui Ui object to interact with the user.","lastModifiedDate":"2023-10-03"},{"lineNumber":156,"author":{"gitId":"AlWo223"},"content":"     * @return TaskList object containing the list of tasks with the newly added deadline.","lastModifiedDate":"2023-10-01"},{"lineNumber":157,"author":{"gitId":"AlWo223"},"content":"     * @see Deadline","lastModifiedDate":"2023-10-01"},{"lineNumber":158,"author":{"gitId":"AlWo223"},"content":"     * */","lastModifiedDate":"2023-10-01"},{"lineNumber":159,"author":{"gitId":"AlWo223"},"content":"    public TaskList addDeadline(String argument, TaskList tasks, Ui ui) {","lastModifiedDate":"2023-10-01"},{"lineNumber":160,"author":{"gitId":"AlWo223"},"content":"        try {","lastModifiedDate":"2023-10-01"},{"lineNumber":161,"author":{"gitId":"AlWo223"},"content":"            String dueDateStr \u003d argument.split(\" /by \")[1];","lastModifiedDate":"2023-10-03"},{"lineNumber":162,"author":{"gitId":"AlWo223"},"content":"            String description \u003d argument.split(\" /by \")[0];","lastModifiedDate":"2023-10-01"},{"lineNumber":163,"author":{"gitId":"AlWo223"},"content":"            LocalDateTime dueDate \u003d LocalDateTime.parse(dueDateStr.replace(\" \", \"T\"));","lastModifiedDate":"2023-10-03"},{"lineNumber":164,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":165,"author":{"gitId":"AlWo223"},"content":"            Task deadline \u003d new Deadline(description, dueDate);","lastModifiedDate":"2023-10-01"},{"lineNumber":166,"author":{"gitId":"AlWo223"},"content":"            tasks.add(deadline);","lastModifiedDate":"2023-10-01"},{"lineNumber":167,"author":{"gitId":"AlWo223"},"content":"            ui.printTaskAddedMessage(deadline, tasks.getTasks());","lastModifiedDate":"2023-10-01"},{"lineNumber":168,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":169,"author":{"gitId":"AlWo223"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-10-01"},{"lineNumber":170,"author":{"gitId":"AlWo223"},"content":"            ui.printInvalidDeadlineMessage();","lastModifiedDate":"2023-10-01"},{"lineNumber":171,"author":{"gitId":"AlWo223"},"content":"        } catch (NullPointerException e) {","lastModifiedDate":"2023-10-01"},{"lineNumber":172,"author":{"gitId":"AlWo223"},"content":"            ui.printEmptyDeadlineMessage();","lastModifiedDate":"2023-10-01"},{"lineNumber":173,"author":{"gitId":"AlWo223"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-10-01"},{"lineNumber":174,"author":{"gitId":"AlWo223"},"content":"            ui.printInvalidDateTimeMessage();","lastModifiedDate":"2023-10-01"},{"lineNumber":175,"author":{"gitId":"AlWo223"},"content":"        }","lastModifiedDate":"2023-10-01"},{"lineNumber":176,"author":{"gitId":"AlWo223"},"content":"        return tasks;","lastModifiedDate":"2023-10-01"},{"lineNumber":177,"author":{"gitId":"AlWo223"},"content":"    }","lastModifiedDate":"2023-10-01"},{"lineNumber":178,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":179,"author":{"gitId":"AlWo223"},"content":"    /**","lastModifiedDate":"2023-10-01"},{"lineNumber":180,"author":{"gitId":"AlWo223"},"content":"     * Adds a new Event task with the description, start date and end date specified in argument.","lastModifiedDate":"2023-10-01"},{"lineNumber":181,"author":{"gitId":"AlWo223"},"content":"     * If the description, start date or end date is empty, it will print an error message.","lastModifiedDate":"2023-10-01"},{"lineNumber":182,"author":{"gitId":"AlWo223"},"content":"     * @param argument Description, start date and end date of the task.","lastModifiedDate":"2023-10-03"},{"lineNumber":183,"author":{"gitId":"AlWo223"},"content":"     * @param tasks TaskList object containing the list of tasks.","lastModifiedDate":"2023-10-03"},{"lineNumber":184,"author":{"gitId":"AlWo223"},"content":"     * @param ui Ui object to interact with the user.","lastModifiedDate":"2023-10-03"},{"lineNumber":185,"author":{"gitId":"AlWo223"},"content":"     * @return TaskList object containing the list of tasks with the newly added Event.","lastModifiedDate":"2023-10-01"},{"lineNumber":186,"author":{"gitId":"AlWo223"},"content":"     * @see Event","lastModifiedDate":"2023-10-01"},{"lineNumber":187,"author":{"gitId":"AlWo223"},"content":"     * */","lastModifiedDate":"2023-10-01"},{"lineNumber":188,"author":{"gitId":"AlWo223"},"content":"    public TaskList addEvent(String argument, TaskList tasks, Ui ui) {","lastModifiedDate":"2023-10-01"},{"lineNumber":189,"author":{"gitId":"AlWo223"},"content":"        try {","lastModifiedDate":"2023-10-01"},{"lineNumber":190,"author":{"gitId":"AlWo223"},"content":"            String description \u003d argument.split(\" /from \")[0];","lastModifiedDate":"2023-10-01"},{"lineNumber":191,"author":{"gitId":"AlWo223"},"content":"            String startDateStr \u003d argument.split(\" /from \")[1].split(\" /to \")[0];","lastModifiedDate":"2023-10-03"},{"lineNumber":192,"author":{"gitId":"AlWo223"},"content":"            String endDateStr \u003d argument.split(\" /from \")[1].split(\" /to \")[1];","lastModifiedDate":"2023-10-03"},{"lineNumber":193,"author":{"gitId":"AlWo223"},"content":"            LocalDateTime startDate \u003d LocalDateTime.parse(startDateStr.replace(\" \", \"T\"));","lastModifiedDate":"2023-10-03"},{"lineNumber":194,"author":{"gitId":"AlWo223"},"content":"            LocalDateTime endDate \u003d LocalDateTime.parse(endDateStr.replace(\" \", \"T\"));","lastModifiedDate":"2023-10-03"},{"lineNumber":195,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":196,"author":{"gitId":"AlWo223"},"content":"            if (startDate.isAfter(endDate)) {","lastModifiedDate":"2023-10-01"},{"lineNumber":197,"author":{"gitId":"AlWo223"},"content":"                throw new InvalidTimeSpanException();","lastModifiedDate":"2023-10-01"},{"lineNumber":198,"author":{"gitId":"AlWo223"},"content":"            }","lastModifiedDate":"2023-10-01"},{"lineNumber":199,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":200,"author":{"gitId":"AlWo223"},"content":"            Task event \u003d new Event(description, startDate, endDate);","lastModifiedDate":"2023-10-01"},{"lineNumber":201,"author":{"gitId":"AlWo223"},"content":"            tasks.add(event);","lastModifiedDate":"2023-10-01"},{"lineNumber":202,"author":{"gitId":"AlWo223"},"content":"            ui.printTaskAddedMessage(event, tasks.getTasks());","lastModifiedDate":"2023-10-01"},{"lineNumber":203,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":204,"author":{"gitId":"AlWo223"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-10-01"},{"lineNumber":205,"author":{"gitId":"AlWo223"},"content":"            ui.printInvalidEventMessage();","lastModifiedDate":"2023-10-01"},{"lineNumber":206,"author":{"gitId":"AlWo223"},"content":"        } catch (NullPointerException e) {","lastModifiedDate":"2023-10-01"},{"lineNumber":207,"author":{"gitId":"AlWo223"},"content":"            ui.printEmptyEventMessage();","lastModifiedDate":"2023-10-01"},{"lineNumber":208,"author":{"gitId":"AlWo223"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-10-01"},{"lineNumber":209,"author":{"gitId":"AlWo223"},"content":"            ui.printInvalidDateTimeMessage();","lastModifiedDate":"2023-10-01"},{"lineNumber":210,"author":{"gitId":"AlWo223"},"content":"        } catch(InvalidTimeSpanException e) {","lastModifiedDate":"2023-10-01"},{"lineNumber":211,"author":{"gitId":"AlWo223"},"content":"            e.printErrorMessage();","lastModifiedDate":"2023-10-01"},{"lineNumber":212,"author":{"gitId":"AlWo223"},"content":"        }","lastModifiedDate":"2023-10-01"},{"lineNumber":213,"author":{"gitId":"AlWo223"},"content":"        return tasks;","lastModifiedDate":"2023-10-01"},{"lineNumber":214,"author":{"gitId":"AlWo223"},"content":"    }","lastModifiedDate":"2023-10-01"},{"lineNumber":215,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":216,"author":{"gitId":"AlWo223"},"content":"    /**","lastModifiedDate":"2023-10-01"},{"lineNumber":217,"author":{"gitId":"AlWo223"},"content":"     * Deletes a task from the list of tasks based on the specified position within the list starting at index 1.","lastModifiedDate":"2023-10-01"},{"lineNumber":218,"author":{"gitId":"AlWo223"},"content":"     * If the index is out of bounds or if the argument is not a number, it will print an error message.","lastModifiedDate":"2023-10-01"},{"lineNumber":219,"author":{"gitId":"AlWo223"},"content":"     * @param argument Index of the task to be deleted (\u003e\u003d 1).","lastModifiedDate":"2023-10-03"},{"lineNumber":220,"author":{"gitId":"AlWo223"},"content":"     * @param tasks TaskList object containing the list of tasks.","lastModifiedDate":"2023-10-03"},{"lineNumber":221,"author":{"gitId":"AlWo223"},"content":"     * @param ui Ui object to interact with the user.","lastModifiedDate":"2023-10-03"},{"lineNumber":222,"author":{"gitId":"AlWo223"},"content":"     * @return TaskList object containing the updated list of tasks.","lastModifiedDate":"2023-10-01"},{"lineNumber":223,"author":{"gitId":"AlWo223"},"content":"     * */","lastModifiedDate":"2023-10-01"},{"lineNumber":224,"author":{"gitId":"AlWo223"},"content":"    public TaskList deleteTask(String argument, TaskList tasks, Ui ui) {","lastModifiedDate":"2023-10-01"},{"lineNumber":225,"author":{"gitId":"AlWo223"},"content":"        try {","lastModifiedDate":"2023-10-01"},{"lineNumber":226,"author":{"gitId":"AlWo223"},"content":"            int index \u003d Integer.parseInt(argument);","lastModifiedDate":"2023-10-01"},{"lineNumber":227,"author":{"gitId":"AlWo223"},"content":"            Task task \u003d tasks.getTasks().get(index - 1);","lastModifiedDate":"2023-10-01"},{"lineNumber":228,"author":{"gitId":"AlWo223"},"content":"            tasks.remove(index - 1);","lastModifiedDate":"2023-10-01"},{"lineNumber":229,"author":{"gitId":"AlWo223"},"content":"            ui.printTaskRemovedMessage(task, tasks);","lastModifiedDate":"2023-10-01"},{"lineNumber":230,"author":{"gitId":"AlWo223"},"content":"        } catch (IndexOutOfBoundsException | NumberFormatException e) {","lastModifiedDate":"2023-10-01"},{"lineNumber":231,"author":{"gitId":"AlWo223"},"content":"            ui.printInvalidTaskIdMessage();","lastModifiedDate":"2023-10-01"},{"lineNumber":232,"author":{"gitId":"AlWo223"},"content":"        }","lastModifiedDate":"2023-10-01"},{"lineNumber":233,"author":{"gitId":"AlWo223"},"content":"        return tasks;","lastModifiedDate":"2023-10-01"},{"lineNumber":234,"author":{"gitId":"AlWo223"},"content":"    }","lastModifiedDate":"2023-10-01"},{"lineNumber":235,"author":{"gitId":"AlWo223"},"content":"}","lastModifiedDate":"2023-10-01"}],"authorContributionMap":{"AlWo223":235}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AlWo223"},"content":"package duke;","lastModifiedDate":"2023-09-13"},{"lineNumber":2,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":3,"author":{"gitId":"AlWo223"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-10-01"},{"lineNumber":4,"author":{"gitId":"AlWo223"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-10-01"},{"lineNumber":5,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":6,"author":{"gitId":"AlWo223"},"content":"/**","lastModifiedDate":"2023-10-01"},{"lineNumber":7,"author":{"gitId":"AlWo223"},"content":" * Represents a deadline task with a description and a due date.","lastModifiedDate":"2023-10-03"},{"lineNumber":8,"author":{"gitId":"AlWo223"},"content":" */","lastModifiedDate":"2023-10-01"},{"lineNumber":9,"author":{"gitId":"AlWo223"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-09-06"},{"lineNumber":10,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":11,"author":{"gitId":"AlWo223"},"content":"    private LocalDateTime dueDate;","lastModifiedDate":"2023-10-01"},{"lineNumber":12,"author":{"gitId":"AlWo223"},"content":"    private static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"MMM-dd-yyyy HH:mm\");","lastModifiedDate":"2023-10-03"},{"lineNumber":13,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"AlWo223"},"content":"    /**","lastModifiedDate":"2023-10-01"},{"lineNumber":15,"author":{"gitId":"AlWo223"},"content":"     * Constructor for Deadline","lastModifiedDate":"2023-10-01"},{"lineNumber":16,"author":{"gitId":"AlWo223"},"content":"     * @param description description of the deadline","lastModifiedDate":"2023-10-01"},{"lineNumber":17,"author":{"gitId":"AlWo223"},"content":"     * @param dueDate due date of the described task","lastModifiedDate":"2023-10-01"},{"lineNumber":18,"author":{"gitId":"AlWo223"},"content":"     */","lastModifiedDate":"2023-10-01"},{"lineNumber":19,"author":{"gitId":"AlWo223"},"content":"    public Deadline(String description, LocalDateTime dueDate) {","lastModifiedDate":"2023-10-01"},{"lineNumber":20,"author":{"gitId":"AlWo223"},"content":"        super(description);","lastModifiedDate":"2023-09-06"},{"lineNumber":21,"author":{"gitId":"AlWo223"},"content":"        this.dueDate \u003d dueDate;","lastModifiedDate":"2023-09-06"},{"lineNumber":22,"author":{"gitId":"AlWo223"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":23,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":24,"author":{"gitId":"AlWo223"},"content":"    /**","lastModifiedDate":"2023-10-01"},{"lineNumber":25,"author":{"gitId":"AlWo223"},"content":"     * Returns the single line representation of the deadline which is used by the UI.","lastModifiedDate":"2023-10-01"},{"lineNumber":26,"author":{"gitId":"AlWo223"},"content":"     * @return string representation of the deadline.","lastModifiedDate":"2023-10-01"},{"lineNumber":27,"author":{"gitId":"AlWo223"},"content":"     */","lastModifiedDate":"2023-10-01"},{"lineNumber":28,"author":{"gitId":"AlWo223"},"content":"    @Override","lastModifiedDate":"2023-10-03"},{"lineNumber":29,"author":{"gitId":"AlWo223"},"content":"    public String toString() {","lastModifiedDate":"2023-09-06"},{"lineNumber":30,"author":{"gitId":"AlWo223"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + dueDate.format(DATE_TIME_FORMATTER) + \")\";","lastModifiedDate":"2023-10-03"},{"lineNumber":31,"author":{"gitId":"AlWo223"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":32,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":33,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":34,"author":{"gitId":"AlWo223"},"content":"    /**","lastModifiedDate":"2023-10-01"},{"lineNumber":35,"author":{"gitId":"AlWo223"},"content":"     * Returns the single line representation of the deadline which is used for the file.","lastModifiedDate":"2023-10-01"},{"lineNumber":36,"author":{"gitId":"AlWo223"},"content":"     * @return string representation of the deadline.","lastModifiedDate":"2023-10-01"},{"lineNumber":37,"author":{"gitId":"AlWo223"},"content":"     */","lastModifiedDate":"2023-10-01"},{"lineNumber":38,"author":{"gitId":"AlWo223"},"content":"    @Override","lastModifiedDate":"2023-10-03"},{"lineNumber":39,"author":{"gitId":"AlWo223"},"content":"    public String toSaveFormat() {","lastModifiedDate":"2023-10-03"},{"lineNumber":40,"author":{"gitId":"AlWo223"},"content":"        return (\"D | \" + super.toSaveFormat() + \" | \" + dueDate.format(DATE_TIME_FORMATTER));","lastModifiedDate":"2023-10-03"},{"lineNumber":41,"author":{"gitId":"AlWo223"},"content":"    }","lastModifiedDate":"2023-09-19"},{"lineNumber":42,"author":{"gitId":"AlWo223"},"content":"}","lastModifiedDate":"2023-09-06"}],"authorContributionMap":{"AlWo223":42}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AlWo223"},"content":"package duke;","lastModifiedDate":"2023-09-13"},{"lineNumber":2,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":3,"author":{"gitId":"AlWo223"},"content":"import duke.exceptions.InvalidCommandException;","lastModifiedDate":"2023-10-01"},{"lineNumber":4,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":5,"author":{"gitId":"AlWo223"},"content":"/**","lastModifiedDate":"2023-10-01"},{"lineNumber":6,"author":{"gitId":"AlWo223"},"content":" * Main class of the Duke program.","lastModifiedDate":"2023-10-01"},{"lineNumber":7,"author":{"gitId":"AlWo223"},"content":" * Duke is a chatbot that helps the user to keep track of tasks.","lastModifiedDate":"2023-10-01"},{"lineNumber":8,"author":{"gitId":"AlWo223"},"content":" * The user can add tasks, mark tasks as done, delete tasks and view the list of tasks.","lastModifiedDate":"2023-10-01"},{"lineNumber":9,"author":{"gitId":"AlWo223"},"content":" * The bot supports three types of tasks: Todo, Deadline and Event.","lastModifiedDate":"2023-10-01"},{"lineNumber":10,"author":{"gitId":"AlWo223"},"content":" * The tasks are saved in a file and loaded automatically from the file when the program is started again.","lastModifiedDate":"2023-10-01"},{"lineNumber":11,"author":{"gitId":"AlWo223"},"content":" * The user can exit the program by typing \"bye\".","lastModifiedDate":"2023-10-01"},{"lineNumber":12,"author":{"gitId":"AlWo223"},"content":" * */","lastModifiedDate":"2023-10-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":14,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":15,"author":{"gitId":"AlWo223"},"content":"    private static final String TERMINATE_COMMAND \u003d \"bye\";","lastModifiedDate":"2023-10-03"},{"lineNumber":16,"author":{"gitId":"AlWo223"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-10-01"},{"lineNumber":17,"author":{"gitId":"AlWo223"},"content":"    private Storage storage;","lastModifiedDate":"2023-10-01"},{"lineNumber":18,"author":{"gitId":"AlWo223"},"content":"    private Ui ui;","lastModifiedDate":"2023-10-01"},{"lineNumber":19,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":20,"author":{"gitId":"AlWo223"},"content":"    /**","lastModifiedDate":"2023-10-01"},{"lineNumber":21,"author":{"gitId":"AlWo223"},"content":"     * Constructor of Duke. Initializes the Ui, Storage and Tasks list.","lastModifiedDate":"2023-10-01"},{"lineNumber":22,"author":{"gitId":"AlWo223"},"content":"     * @param filePath Path to the file where the data is stored. Default path is data/duke.txt.","lastModifiedDate":"2023-10-03"},{"lineNumber":23,"author":{"gitId":"AlWo223"},"content":"     * */","lastModifiedDate":"2023-10-01"},{"lineNumber":24,"author":{"gitId":"AlWo223"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2023-10-01"},{"lineNumber":25,"author":{"gitId":"AlWo223"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2023-10-01"},{"lineNumber":26,"author":{"gitId":"AlWo223"},"content":"        this.storage \u003d new Storage(filePath);","lastModifiedDate":"2023-10-01"},{"lineNumber":27,"author":{"gitId":"AlWo223"},"content":"        this.tasks \u003d new TaskList(storage.loadData());","lastModifiedDate":"2023-10-01"},{"lineNumber":28,"author":{"gitId":"AlWo223"},"content":"    }","lastModifiedDate":"2023-10-01"},{"lineNumber":29,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":30,"author":{"gitId":"AlWo223"},"content":"    /**","lastModifiedDate":"2023-10-01"},{"lineNumber":31,"author":{"gitId":"AlWo223"},"content":"     * Runs the Duke program.","lastModifiedDate":"2023-10-01"},{"lineNumber":32,"author":{"gitId":"AlWo223"},"content":"     */","lastModifiedDate":"2023-10-01"},{"lineNumber":33,"author":{"gitId":"AlWo223"},"content":"    public void run() {","lastModifiedDate":"2023-10-01"},{"lineNumber":34,"author":{"gitId":"AlWo223"},"content":"        this.ui.introduceBot(tasks);","lastModifiedDate":"2023-10-01"},{"lineNumber":35,"author":{"gitId":"AlWo223"},"content":"        this.handleCommands();","lastModifiedDate":"2023-10-01"},{"lineNumber":36,"author":{"gitId":"AlWo223"},"content":"        this.ui.farewellBot();","lastModifiedDate":"2023-10-01"},{"lineNumber":37,"author":{"gitId":"AlWo223"},"content":"    }","lastModifiedDate":"2023-10-01"},{"lineNumber":38,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":39,"author":{"gitId":"AlWo223"},"content":"    /**","lastModifiedDate":"2023-10-01"},{"lineNumber":40,"author":{"gitId":"AlWo223"},"content":"     * Main method of the Duke program.","lastModifiedDate":"2023-10-01"},{"lineNumber":41,"author":{"gitId":"AlWo223"},"content":"     * @param args","lastModifiedDate":"2023-10-01"},{"lineNumber":42,"author":{"gitId":"AlWo223"},"content":"     */","lastModifiedDate":"2023-10-01"},{"lineNumber":43,"author":{"gitId":"AlWo223"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-10-01"},{"lineNumber":44,"author":{"gitId":"AlWo223"},"content":"        new Duke(\"data/duke.txt\").run();","lastModifiedDate":"2023-10-01"},{"lineNumber":45,"author":{"gitId":"AlWo223"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":46,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":47,"author":{"gitId":"AlWo223"},"content":"    /**","lastModifiedDate":"2023-10-01"},{"lineNumber":48,"author":{"gitId":"AlWo223"},"content":"     * Handles the user interaction loop and executes the commands.","lastModifiedDate":"2023-10-01"},{"lineNumber":49,"author":{"gitId":"AlWo223"},"content":"     * Method will continue to ask for user input until its termination on the \"bye\" command.","lastModifiedDate":"2023-10-01"},{"lineNumber":50,"author":{"gitId":"AlWo223"},"content":"     * @see Command","lastModifiedDate":"2023-10-01"},{"lineNumber":51,"author":{"gitId":"AlWo223"},"content":"     */","lastModifiedDate":"2023-10-01"},{"lineNumber":52,"author":{"gitId":"AlWo223"},"content":"    public void handleCommands() {","lastModifiedDate":"2023-10-01"},{"lineNumber":53,"author":{"gitId":"AlWo223"},"content":"        String input;","lastModifiedDate":"2023-09-06"},{"lineNumber":54,"author":{"gitId":"AlWo223"},"content":"        do {","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"AlWo223"},"content":"            input \u003d this.ui.readCommand();","lastModifiedDate":"2023-10-01"},{"lineNumber":56,"author":{"gitId":"AlWo223"},"content":"            Command c \u003d Parser.extractCommand(input);","lastModifiedDate":"2023-10-01"},{"lineNumber":57,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":58,"author":{"gitId":"AlWo223"},"content":"            try {","lastModifiedDate":"2023-09-13"},{"lineNumber":59,"author":{"gitId":"AlWo223"},"content":"                c.executeCommand(tasks, ui);","lastModifiedDate":"2023-10-01"},{"lineNumber":60,"author":{"gitId":"AlWo223"},"content":"                storage.saveData(tasks.getTasks());","lastModifiedDate":"2023-10-01"},{"lineNumber":61,"author":{"gitId":"AlWo223"},"content":"            } catch (InvalidCommandException e) {","lastModifiedDate":"2023-09-13"},{"lineNumber":62,"author":{"gitId":"AlWo223"},"content":"                ui.printErrorMessage(e.getErrorMessage());","lastModifiedDate":"2023-10-03"},{"lineNumber":63,"author":{"gitId":"AlWo223"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":64,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":65,"author":{"gitId":"AlWo223"},"content":"            ui.printHorizontalLine();","lastModifiedDate":"2023-10-01"},{"lineNumber":66,"author":{"gitId":"AlWo223"},"content":"        } while (!input.equalsIgnoreCase(TERMINATE_COMMAND));","lastModifiedDate":"2023-10-03"},{"lineNumber":67,"author":{"gitId":"AlWo223"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"AlWo223":66,"-":2}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AlWo223"},"content":"package duke;","lastModifiedDate":"2023-09-13"},{"lineNumber":2,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":3,"author":{"gitId":"AlWo223"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-10-01"},{"lineNumber":4,"author":{"gitId":"AlWo223"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-10-01"},{"lineNumber":5,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":6,"author":{"gitId":"AlWo223"},"content":"/**","lastModifiedDate":"2023-10-01"},{"lineNumber":7,"author":{"gitId":"AlWo223"},"content":" * Represents an event task which is a task with a start date and an end date.","lastModifiedDate":"2023-10-01"},{"lineNumber":8,"author":{"gitId":"AlWo223"},"content":" */","lastModifiedDate":"2023-10-01"},{"lineNumber":9,"author":{"gitId":"AlWo223"},"content":"public class Event extends Task {","lastModifiedDate":"2023-09-06"},{"lineNumber":10,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":11,"author":{"gitId":"AlWo223"},"content":"    private LocalDateTime startDate;","lastModifiedDate":"2023-10-01"},{"lineNumber":12,"author":{"gitId":"AlWo223"},"content":"    private LocalDateTime endDate;","lastModifiedDate":"2023-10-01"},{"lineNumber":13,"author":{"gitId":"AlWo223"},"content":"    private static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"MMM-dd-yyyy HH:mm\");","lastModifiedDate":"2023-10-03"},{"lineNumber":14,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":15,"author":{"gitId":"AlWo223"},"content":"    /**","lastModifiedDate":"2023-10-01"},{"lineNumber":16,"author":{"gitId":"AlWo223"},"content":"     * Constructor for Event class.","lastModifiedDate":"2023-10-01"},{"lineNumber":17,"author":{"gitId":"AlWo223"},"content":"     * @param description Description of the event.","lastModifiedDate":"2023-10-01"},{"lineNumber":18,"author":{"gitId":"AlWo223"},"content":"     * @param startDate Start date of the event.","lastModifiedDate":"2023-10-01"},{"lineNumber":19,"author":{"gitId":"AlWo223"},"content":"     * @param endDate End date of the event.","lastModifiedDate":"2023-10-01"},{"lineNumber":20,"author":{"gitId":"AlWo223"},"content":"     */","lastModifiedDate":"2023-10-01"},{"lineNumber":21,"author":{"gitId":"AlWo223"},"content":"    public Event(String description, LocalDateTime startDate, LocalDateTime endDate) {","lastModifiedDate":"2023-10-01"},{"lineNumber":22,"author":{"gitId":"AlWo223"},"content":"        super(description);","lastModifiedDate":"2023-09-06"},{"lineNumber":23,"author":{"gitId":"AlWo223"},"content":"        this.startDate \u003d startDate;","lastModifiedDate":"2023-09-06"},{"lineNumber":24,"author":{"gitId":"AlWo223"},"content":"        this.endDate \u003d endDate;","lastModifiedDate":"2023-09-06"},{"lineNumber":25,"author":{"gitId":"AlWo223"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":26,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":27,"author":{"gitId":"AlWo223"},"content":"    /**","lastModifiedDate":"2023-10-01"},{"lineNumber":28,"author":{"gitId":"AlWo223"},"content":"     * Returns the single line representation of the event which is used by the UI.","lastModifiedDate":"2023-10-01"},{"lineNumber":29,"author":{"gitId":"AlWo223"},"content":"     * @return string representation of the event.","lastModifiedDate":"2023-10-01"},{"lineNumber":30,"author":{"gitId":"AlWo223"},"content":"     */","lastModifiedDate":"2023-10-01"},{"lineNumber":31,"author":{"gitId":"AlWo223"},"content":"    @Override","lastModifiedDate":"2023-10-03"},{"lineNumber":32,"author":{"gitId":"AlWo223"},"content":"    public String toString() {","lastModifiedDate":"2023-09-06"},{"lineNumber":33,"author":{"gitId":"AlWo223"},"content":"        String startEndDescription \u003d \" (from: \" + startDate.format(DATE_TIME_FORMATTER) + \" to: \" + endDate.format(DATE_TIME_FORMATTER) + \")\";","lastModifiedDate":"2023-10-03"},{"lineNumber":34,"author":{"gitId":"AlWo223"},"content":"        return (\"[E]\" + super.toString() + startEndDescription);","lastModifiedDate":"2023-10-03"},{"lineNumber":35,"author":{"gitId":"AlWo223"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":36,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":37,"author":{"gitId":"AlWo223"},"content":"    /**","lastModifiedDate":"2023-10-01"},{"lineNumber":38,"author":{"gitId":"AlWo223"},"content":"     * Returns the single line representation of the event which is used for the file.","lastModifiedDate":"2023-10-01"},{"lineNumber":39,"author":{"gitId":"AlWo223"},"content":"     * @return string representation of the event.","lastModifiedDate":"2023-10-01"},{"lineNumber":40,"author":{"gitId":"AlWo223"},"content":"     */","lastModifiedDate":"2023-10-01"},{"lineNumber":41,"author":{"gitId":"AlWo223"},"content":"    @Override","lastModifiedDate":"2023-10-03"},{"lineNumber":42,"author":{"gitId":"AlWo223"},"content":"    public String toSaveFormat() {","lastModifiedDate":"2023-10-03"},{"lineNumber":43,"author":{"gitId":"AlWo223"},"content":"        String startEndDescription \u003d \" | \" + startDate.format(DATE_TIME_FORMATTER) + \" | \" + endDate.format(DATE_TIME_FORMATTER);","lastModifiedDate":"2023-10-03"},{"lineNumber":44,"author":{"gitId":"AlWo223"},"content":"        return (\"E | \" + super.toSaveFormat() + startEndDescription);","lastModifiedDate":"2023-10-03"},{"lineNumber":45,"author":{"gitId":"AlWo223"},"content":"    }","lastModifiedDate":"2023-09-19"},{"lineNumber":46,"author":{"gitId":"AlWo223"},"content":"}","lastModifiedDate":"2023-09-06"}],"authorContributionMap":{"AlWo223":46}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AlWo223"},"content":"package duke;","lastModifiedDate":"2023-10-01"},{"lineNumber":2,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":3,"author":{"gitId":"AlWo223"},"content":"/**","lastModifiedDate":"2023-10-01"},{"lineNumber":4,"author":{"gitId":"AlWo223"},"content":" * Deals with making sense of the user command.","lastModifiedDate":"2023-10-01"},{"lineNumber":5,"author":{"gitId":"AlWo223"},"content":" */","lastModifiedDate":"2023-10-01"},{"lineNumber":6,"author":{"gitId":"AlWo223"},"content":"public class Parser {","lastModifiedDate":"2023-10-01"},{"lineNumber":7,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":8,"author":{"gitId":"AlWo223"},"content":"    /**","lastModifiedDate":"2023-10-01"},{"lineNumber":9,"author":{"gitId":"AlWo223"},"content":"     * Extracts the command and argument from the input string provided by the user.","lastModifiedDate":"2023-10-01"},{"lineNumber":10,"author":{"gitId":"AlWo223"},"content":"     * @param input user input describing the command and argument","lastModifiedDate":"2023-10-01"},{"lineNumber":11,"author":{"gitId":"AlWo223"},"content":"     * @return Command object containing the extracted command and argument","lastModifiedDate":"2023-10-01"},{"lineNumber":12,"author":{"gitId":"AlWo223"},"content":"     */","lastModifiedDate":"2023-10-01"},{"lineNumber":13,"author":{"gitId":"AlWo223"},"content":"    public static Command extractCommand(String input) {","lastModifiedDate":"2023-10-01"},{"lineNumber":14,"author":{"gitId":"AlWo223"},"content":"        String[] parts \u003d input.split(\" \", 2);","lastModifiedDate":"2023-10-01"},{"lineNumber":15,"author":{"gitId":"AlWo223"},"content":"        String command \u003d parts[0].toLowerCase();","lastModifiedDate":"2023-10-01"},{"lineNumber":16,"author":{"gitId":"AlWo223"},"content":"        String argument \u003d null;","lastModifiedDate":"2023-10-01"},{"lineNumber":17,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":18,"author":{"gitId":"AlWo223"},"content":"        if (parts.length \u003e 1) {","lastModifiedDate":"2023-10-01"},{"lineNumber":19,"author":{"gitId":"AlWo223"},"content":"            argument \u003d parts[1];","lastModifiedDate":"2023-10-01"},{"lineNumber":20,"author":{"gitId":"AlWo223"},"content":"        }","lastModifiedDate":"2023-10-01"},{"lineNumber":21,"author":{"gitId":"AlWo223"},"content":"        return new Command(command, argument);","lastModifiedDate":"2023-10-01"},{"lineNumber":22,"author":{"gitId":"AlWo223"},"content":"    }","lastModifiedDate":"2023-10-01"},{"lineNumber":23,"author":{"gitId":"AlWo223"},"content":"}","lastModifiedDate":"2023-10-01"},{"lineNumber":24,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-01"}],"authorContributionMap":{"AlWo223":24}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AlWo223"},"content":"package duke;","lastModifiedDate":"2023-10-01"},{"lineNumber":2,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":3,"author":{"gitId":"AlWo223"},"content":"import duke.exceptions.CorruptedFileException;","lastModifiedDate":"2023-10-01"},{"lineNumber":4,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":5,"author":{"gitId":"AlWo223"},"content":"import java.io.File;","lastModifiedDate":"2023-10-01"},{"lineNumber":6,"author":{"gitId":"AlWo223"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-10-01"},{"lineNumber":7,"author":{"gitId":"AlWo223"},"content":"import java.io.IOException;","lastModifiedDate":"2023-10-01"},{"lineNumber":8,"author":{"gitId":"AlWo223"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-10-01"},{"lineNumber":9,"author":{"gitId":"AlWo223"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-10-01"},{"lineNumber":10,"author":{"gitId":"AlWo223"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-10-04"},{"lineNumber":11,"author":{"gitId":"AlWo223"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-01"},{"lineNumber":12,"author":{"gitId":"AlWo223"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-10-01"},{"lineNumber":13,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":14,"author":{"gitId":"AlWo223"},"content":"/**","lastModifiedDate":"2023-10-01"},{"lineNumber":15,"author":{"gitId":"AlWo223"},"content":" * Handles the loading and saving of data from and to the data file.","lastModifiedDate":"2023-10-01"},{"lineNumber":16,"author":{"gitId":"AlWo223"},"content":" */","lastModifiedDate":"2023-10-01"},{"lineNumber":17,"author":{"gitId":"AlWo223"},"content":"public class Storage {","lastModifiedDate":"2023-10-01"},{"lineNumber":18,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":19,"author":{"gitId":"AlWo223"},"content":"    private final String path;","lastModifiedDate":"2023-10-03"},{"lineNumber":20,"author":{"gitId":"AlWo223"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2023-10-01"},{"lineNumber":21,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":22,"author":{"gitId":"AlWo223"},"content":"    private static final DateTimeFormatter DTF \u003d DateTimeFormatter.ofPattern(\"MMM-dd-yyyy\u0027T\u0027HH:mm\");","lastModifiedDate":"2023-10-01"},{"lineNumber":23,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":24,"author":{"gitId":"AlWo223"},"content":"    /**","lastModifiedDate":"2023-10-01"},{"lineNumber":25,"author":{"gitId":"AlWo223"},"content":"     * Constructor for Storage with path set to the given path.","lastModifiedDate":"2023-10-01"},{"lineNumber":26,"author":{"gitId":"AlWo223"},"content":"     * @param path Path to the file which the Storage will read from and write to.","lastModifiedDate":"2023-10-01"},{"lineNumber":27,"author":{"gitId":"AlWo223"},"content":"     */","lastModifiedDate":"2023-10-01"},{"lineNumber":28,"author":{"gitId":"AlWo223"},"content":"    public Storage(String path) {","lastModifiedDate":"2023-10-01"},{"lineNumber":29,"author":{"gitId":"AlWo223"},"content":"        this.path \u003d path;","lastModifiedDate":"2023-10-01"},{"lineNumber":30,"author":{"gitId":"AlWo223"},"content":"    }","lastModifiedDate":"2023-10-01"},{"lineNumber":31,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":32,"author":{"gitId":"AlWo223"},"content":"    /**","lastModifiedDate":"2023-10-01"},{"lineNumber":33,"author":{"gitId":"AlWo223"},"content":"     * Loads data from the file specified by the path into a task list.","lastModifiedDate":"2023-10-01"},{"lineNumber":34,"author":{"gitId":"AlWo223"},"content":"     * If the file does not exist, an empty task list will be returned.","lastModifiedDate":"2023-10-01"},{"lineNumber":35,"author":{"gitId":"AlWo223"},"content":"     * @return ArrayList of Tasks read from the file.","lastModifiedDate":"2023-10-01"},{"lineNumber":36,"author":{"gitId":"AlWo223"},"content":"     */","lastModifiedDate":"2023-10-01"},{"lineNumber":37,"author":{"gitId":"AlWo223"},"content":"    public ArrayList\u003cTask\u003e loadData() {","lastModifiedDate":"2023-10-01"},{"lineNumber":38,"author":{"gitId":"AlWo223"},"content":"        try {","lastModifiedDate":"2023-10-01"},{"lineNumber":39,"author":{"gitId":"AlWo223"},"content":"            tasks \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-10-01"},{"lineNumber":40,"author":{"gitId":"AlWo223"},"content":"            File f \u003d new File(path);","lastModifiedDate":"2023-10-01"},{"lineNumber":41,"author":{"gitId":"AlWo223"},"content":"            Scanner s \u003d new Scanner(f);","lastModifiedDate":"2023-10-01"},{"lineNumber":42,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":43,"author":{"gitId":"AlWo223"},"content":"            while (s.hasNext()) {","lastModifiedDate":"2023-10-01"},{"lineNumber":44,"author":{"gitId":"AlWo223"},"content":"                String input \u003d s.nextLine();","lastModifiedDate":"2023-10-01"},{"lineNumber":45,"author":{"gitId":"AlWo223"},"content":"                readDataLine(input);","lastModifiedDate":"2023-10-01"},{"lineNumber":46,"author":{"gitId":"AlWo223"},"content":"            }","lastModifiedDate":"2023-10-01"},{"lineNumber":47,"author":{"gitId":"AlWo223"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-10-01"},{"lineNumber":48,"author":{"gitId":"AlWo223"},"content":"            System.out.println(\"Data file not found, creating new file.\");","lastModifiedDate":"2023-10-03"},{"lineNumber":49,"author":{"gitId":"AlWo223"},"content":"        }","lastModifiedDate":"2023-10-01"},{"lineNumber":50,"author":{"gitId":"AlWo223"},"content":"        return tasks;","lastModifiedDate":"2023-10-01"},{"lineNumber":51,"author":{"gitId":"AlWo223"},"content":"    }","lastModifiedDate":"2023-10-01"},{"lineNumber":52,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":53,"author":{"gitId":"AlWo223"},"content":"    /**","lastModifiedDate":"2023-10-01"},{"lineNumber":54,"author":{"gitId":"AlWo223"},"content":"     * Reads one line of data from the file and adds the corresponding task to the task list.","lastModifiedDate":"2023-10-01"},{"lineNumber":55,"author":{"gitId":"AlWo223"},"content":"     * If the input formatting of the line is incorrect, the line will be skipped and the user will be notified about","lastModifiedDate":"2023-10-01"},{"lineNumber":56,"author":{"gitId":"AlWo223"},"content":"     * the","lastModifiedDate":"2023-10-01"},{"lineNumber":57,"author":{"gitId":"AlWo223"},"content":"     * file corruption.","lastModifiedDate":"2023-10-01"},{"lineNumber":58,"author":{"gitId":"AlWo223"},"content":"     * @param input Line of data from the file.","lastModifiedDate":"2023-10-01"},{"lineNumber":59,"author":{"gitId":"AlWo223"},"content":"     */","lastModifiedDate":"2023-10-01"},{"lineNumber":60,"author":{"gitId":"AlWo223"},"content":"    public void readDataLine(String input) {","lastModifiedDate":"2023-10-01"},{"lineNumber":61,"author":{"gitId":"AlWo223"},"content":"        String[] parts \u003d input.split(\" \\\\| \");","lastModifiedDate":"2023-10-01"},{"lineNumber":62,"author":{"gitId":"AlWo223"},"content":"        try {","lastModifiedDate":"2023-10-01"},{"lineNumber":63,"author":{"gitId":"AlWo223"},"content":"            Task task;","lastModifiedDate":"2023-10-01"},{"lineNumber":64,"author":{"gitId":"AlWo223"},"content":"            switch(parts[0]) {","lastModifiedDate":"2023-10-01"},{"lineNumber":65,"author":{"gitId":"AlWo223"},"content":"            case \"T\":","lastModifiedDate":"2023-10-01"},{"lineNumber":66,"author":{"gitId":"AlWo223"},"content":"                task \u003d new Todo(parts[2]);","lastModifiedDate":"2023-10-01"},{"lineNumber":67,"author":{"gitId":"AlWo223"},"content":"                break;","lastModifiedDate":"2023-10-01"},{"lineNumber":68,"author":{"gitId":"AlWo223"},"content":"            case \"D\":","lastModifiedDate":"2023-10-01"},{"lineNumber":69,"author":{"gitId":"AlWo223"},"content":"                LocalDateTime dueDate \u003d LocalDateTime.parse(parts[3].replace(\" \", \"T\"), DTF);","lastModifiedDate":"2023-10-03"},{"lineNumber":70,"author":{"gitId":"AlWo223"},"content":"                task \u003d new Deadline(parts[2], dueDate);","lastModifiedDate":"2023-10-03"},{"lineNumber":71,"author":{"gitId":"AlWo223"},"content":"                break;","lastModifiedDate":"2023-10-01"},{"lineNumber":72,"author":{"gitId":"AlWo223"},"content":"            case \"E\":","lastModifiedDate":"2023-10-01"},{"lineNumber":73,"author":{"gitId":"AlWo223"},"content":"                LocalDateTime startDate \u003d LocalDateTime.parse(parts[3].replace(\" \", \"T\"), DTF);","lastModifiedDate":"2023-10-03"},{"lineNumber":74,"author":{"gitId":"AlWo223"},"content":"                LocalDateTime endDate \u003d LocalDateTime.parse(parts[4].replace(\" \", \"T\"), DTF);","lastModifiedDate":"2023-10-03"},{"lineNumber":75,"author":{"gitId":"AlWo223"},"content":"                task \u003d new Event(parts[2], startDate, endDate);","lastModifiedDate":"2023-10-03"},{"lineNumber":76,"author":{"gitId":"AlWo223"},"content":"                break;","lastModifiedDate":"2023-10-01"},{"lineNumber":77,"author":{"gitId":"AlWo223"},"content":"            default:","lastModifiedDate":"2023-10-01"},{"lineNumber":78,"author":{"gitId":"AlWo223"},"content":"                throw new CorruptedFileException();","lastModifiedDate":"2023-10-01"},{"lineNumber":79,"author":{"gitId":"AlWo223"},"content":"            }","lastModifiedDate":"2023-10-01"},{"lineNumber":80,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":81,"author":{"gitId":"AlWo223"},"content":"            int binaryIsDone \u003d Integer.parseInt(parts[1]);","lastModifiedDate":"2023-10-01"},{"lineNumber":82,"author":{"gitId":"AlWo223"},"content":"            task.setDoneFromFile(binaryIsDone);","lastModifiedDate":"2023-10-03"},{"lineNumber":83,"author":{"gitId":"AlWo223"},"content":"            tasks.add(task);","lastModifiedDate":"2023-10-01"},{"lineNumber":84,"author":{"gitId":"AlWo223"},"content":"        } catch (ArrayIndexOutOfBoundsException | NumberFormatException | CorruptedFileException","lastModifiedDate":"2023-10-04"},{"lineNumber":85,"author":{"gitId":"AlWo223"},"content":"                 | DateTimeParseException e) {","lastModifiedDate":"2023-10-04"},{"lineNumber":86,"author":{"gitId":"AlWo223"},"content":"            System.out.println(\"Failed to read line, the file is corrupted.\");","lastModifiedDate":"2023-10-01"},{"lineNumber":87,"author":{"gitId":"AlWo223"},"content":"        }","lastModifiedDate":"2023-10-01"},{"lineNumber":88,"author":{"gitId":"AlWo223"},"content":"    }","lastModifiedDate":"2023-10-01"},{"lineNumber":89,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":90,"author":{"gitId":"AlWo223"},"content":"    /**","lastModifiedDate":"2023-10-01"},{"lineNumber":91,"author":{"gitId":"AlWo223"},"content":"     * Store the given task list to the file specified by the path.","lastModifiedDate":"2023-10-01"},{"lineNumber":92,"author":{"gitId":"AlWo223"},"content":"     * If the file does not exist, a new file will be created.","lastModifiedDate":"2023-10-01"},{"lineNumber":93,"author":{"gitId":"AlWo223"},"content":"     * @param tasks Task list to be saved.","lastModifiedDate":"2023-10-01"},{"lineNumber":94,"author":{"gitId":"AlWo223"},"content":"     */","lastModifiedDate":"2023-10-01"},{"lineNumber":95,"author":{"gitId":"AlWo223"},"content":"    public void saveData(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-10-01"},{"lineNumber":96,"author":{"gitId":"AlWo223"},"content":"        try {","lastModifiedDate":"2023-10-01"},{"lineNumber":97,"author":{"gitId":"AlWo223"},"content":"            this.tasks \u003d tasks;","lastModifiedDate":"2023-10-01"},{"lineNumber":98,"author":{"gitId":"AlWo223"},"content":"            File f \u003d new File(path);","lastModifiedDate":"2023-10-01"},{"lineNumber":99,"author":{"gitId":"AlWo223"},"content":"            f.getParentFile().mkdirs();","lastModifiedDate":"2023-10-01"},{"lineNumber":100,"author":{"gitId":"AlWo223"},"content":"            f.createNewFile();","lastModifiedDate":"2023-10-01"},{"lineNumber":101,"author":{"gitId":"AlWo223"},"content":"            FileWriter fw \u003d new FileWriter(path);","lastModifiedDate":"2023-10-01"},{"lineNumber":102,"author":{"gitId":"AlWo223"},"content":"            for (Task task : tasks) {","lastModifiedDate":"2023-10-01"},{"lineNumber":103,"author":{"gitId":"AlWo223"},"content":"                fw.write(task.toSaveFormat()+\"\\n\");","lastModifiedDate":"2023-10-03"},{"lineNumber":104,"author":{"gitId":"AlWo223"},"content":"            }","lastModifiedDate":"2023-10-01"},{"lineNumber":105,"author":{"gitId":"AlWo223"},"content":"            fw.close();","lastModifiedDate":"2023-10-01"},{"lineNumber":106,"author":{"gitId":"AlWo223"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-10-01"},{"lineNumber":107,"author":{"gitId":"AlWo223"},"content":"            System.out.println(\"An error occurred when accessing the file.\");","lastModifiedDate":"2023-10-01"},{"lineNumber":108,"author":{"gitId":"AlWo223"},"content":"        }","lastModifiedDate":"2023-10-01"},{"lineNumber":109,"author":{"gitId":"AlWo223"},"content":"    }","lastModifiedDate":"2023-10-01"},{"lineNumber":110,"author":{"gitId":"AlWo223"},"content":"}","lastModifiedDate":"2023-10-01"}],"authorContributionMap":{"AlWo223":110}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AlWo223"},"content":"package duke;","lastModifiedDate":"2023-09-13"},{"lineNumber":2,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":3,"author":{"gitId":"AlWo223"},"content":"import duke.exceptions.CorruptedFileException;","lastModifiedDate":"2023-10-01"},{"lineNumber":4,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":5,"author":{"gitId":"AlWo223"},"content":"/**","lastModifiedDate":"2023-10-01"},{"lineNumber":6,"author":{"gitId":"AlWo223"},"content":" * Represents a task consisting of a description and the marking label.","lastModifiedDate":"2023-10-01"},{"lineNumber":7,"author":{"gitId":"AlWo223"},"content":" */","lastModifiedDate":"2023-10-01"},{"lineNumber":8,"author":{"gitId":"AlWo223"},"content":"public class Task {","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"AlWo223"},"content":"    private final String description;","lastModifiedDate":"2023-10-03"},{"lineNumber":10,"author":{"gitId":"AlWo223"},"content":"    private boolean isDone;","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"AlWo223"},"content":"    /**","lastModifiedDate":"2023-10-01"},{"lineNumber":13,"author":{"gitId":"AlWo223"},"content":"     * Generates new Task with a specified description.","lastModifiedDate":"2023-10-01"},{"lineNumber":14,"author":{"gitId":"AlWo223"},"content":"     * By default, the task is not done.","lastModifiedDate":"2023-10-01"},{"lineNumber":15,"author":{"gitId":"AlWo223"},"content":"     * @param description description of the task","lastModifiedDate":"2023-10-01"},{"lineNumber":16,"author":{"gitId":"AlWo223"},"content":"     */","lastModifiedDate":"2023-10-01"},{"lineNumber":17,"author":{"gitId":"AlWo223"},"content":"    public Task(String description) {","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"AlWo223"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"AlWo223"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"AlWo223"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"AlWo223"},"content":"    public String getDescription() {","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"AlWo223"},"content":"        return description;","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"AlWo223"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"AlWo223"},"content":"    public void setDone(boolean done) {","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"AlWo223"},"content":"        isDone \u003d done;","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"AlWo223"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"AlWo223"},"content":"    /**","lastModifiedDate":"2023-10-01"},{"lineNumber":31,"author":{"gitId":"AlWo223"},"content":"     * Sets the task as done or not done. This method is only used when reading from the file.","lastModifiedDate":"2023-10-01"},{"lineNumber":32,"author":{"gitId":"AlWo223"},"content":"     * @param done 0 if not done, 1 if done","lastModifiedDate":"2023-10-01"},{"lineNumber":33,"author":{"gitId":"AlWo223"},"content":"     * @throws CorruptedFileException if done is not 0 or 1","lastModifiedDate":"2023-10-01"},{"lineNumber":34,"author":{"gitId":"AlWo223"},"content":"     */","lastModifiedDate":"2023-10-01"},{"lineNumber":35,"author":{"gitId":"AlWo223"},"content":"    public void setDoneFromFile(int done) throws CorruptedFileException {","lastModifiedDate":"2023-10-03"},{"lineNumber":36,"author":{"gitId":"AlWo223"},"content":"        if (done \u003d\u003d 0) {","lastModifiedDate":"2023-09-19"},{"lineNumber":37,"author":{"gitId":"AlWo223"},"content":"            isDone \u003d false;","lastModifiedDate":"2023-09-19"},{"lineNumber":38,"author":{"gitId":"AlWo223"},"content":"        } else if (done \u003d\u003d 1){","lastModifiedDate":"2023-10-03"},{"lineNumber":39,"author":{"gitId":"AlWo223"},"content":"            isDone \u003d true;","lastModifiedDate":"2023-09-19"},{"lineNumber":40,"author":{"gitId":"AlWo223"},"content":"        } else {","lastModifiedDate":"2023-09-19"},{"lineNumber":41,"author":{"gitId":"AlWo223"},"content":"            throw new CorruptedFileException();","lastModifiedDate":"2023-09-19"},{"lineNumber":42,"author":{"gitId":"AlWo223"},"content":"        }","lastModifiedDate":"2023-09-19"},{"lineNumber":43,"author":{"gitId":"AlWo223"},"content":"    }","lastModifiedDate":"2023-09-19"},{"lineNumber":44,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":45,"author":{"gitId":"AlWo223"},"content":"    /**","lastModifiedDate":"2023-10-01"},{"lineNumber":46,"author":{"gitId":"AlWo223"},"content":"     * Returns the single line representation of the task which is used by the UI.","lastModifiedDate":"2023-10-01"},{"lineNumber":47,"author":{"gitId":"AlWo223"},"content":"     * @return string representation of the task.","lastModifiedDate":"2023-10-01"},{"lineNumber":48,"author":{"gitId":"AlWo223"},"content":"     */","lastModifiedDate":"2023-10-01"},{"lineNumber":49,"author":{"gitId":"AlWo223"},"content":"    @Override","lastModifiedDate":"2023-10-03"},{"lineNumber":50,"author":{"gitId":"AlWo223"},"content":"    public String toString() {","lastModifiedDate":"2023-09-06"},{"lineNumber":51,"author":{"gitId":"AlWo223"},"content":"        String marking \u003d \" \";","lastModifiedDate":"2023-10-03"},{"lineNumber":52,"author":{"gitId":"AlWo223"},"content":"        if (isDone) {","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"AlWo223"},"content":"            marking \u003d \"x\";","lastModifiedDate":"2023-10-03"},{"lineNumber":54,"author":{"gitId":"AlWo223"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"AlWo223"},"content":"        return (\"[\" + marking + \"] \" + description);","lastModifiedDate":"2023-10-03"},{"lineNumber":56,"author":{"gitId":"AlWo223"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"AlWo223"},"content":"    /**","lastModifiedDate":"2023-10-01"},{"lineNumber":59,"author":{"gitId":"AlWo223"},"content":"     * Returns the single line representation of the task which is used for the file.","lastModifiedDate":"2023-10-01"},{"lineNumber":60,"author":{"gitId":"AlWo223"},"content":"     * @return string representation of the task.","lastModifiedDate":"2023-10-01"},{"lineNumber":61,"author":{"gitId":"AlWo223"},"content":"     */","lastModifiedDate":"2023-10-01"},{"lineNumber":62,"author":{"gitId":"AlWo223"},"content":"    public String toSaveFormat() {","lastModifiedDate":"2023-10-03"},{"lineNumber":63,"author":{"gitId":"AlWo223"},"content":"        int isDoneBinary \u003d 0;","lastModifiedDate":"2023-10-03"},{"lineNumber":64,"author":{"gitId":"AlWo223"},"content":"        if (isDone) {","lastModifiedDate":"2023-09-19"},{"lineNumber":65,"author":{"gitId":"AlWo223"},"content":"            isDoneBinary \u003d 1;","lastModifiedDate":"2023-10-03"},{"lineNumber":66,"author":{"gitId":"AlWo223"},"content":"        }","lastModifiedDate":"2023-09-19"},{"lineNumber":67,"author":{"gitId":"AlWo223"},"content":"        return (isDoneBinary + \" | \" + this.description);","lastModifiedDate":"2023-10-03"},{"lineNumber":68,"author":{"gitId":"AlWo223"},"content":"    }","lastModifiedDate":"2023-09-19"},{"lineNumber":69,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":70,"author":{"gitId":"AlWo223"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"AlWo223":70}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AlWo223"},"content":"package duke;","lastModifiedDate":"2023-10-01"},{"lineNumber":2,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":3,"author":{"gitId":"AlWo223"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-01"},{"lineNumber":4,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":5,"author":{"gitId":"AlWo223"},"content":"/**","lastModifiedDate":"2023-10-01"},{"lineNumber":6,"author":{"gitId":"AlWo223"},"content":" * Represents the list of tasks.","lastModifiedDate":"2023-10-01"},{"lineNumber":7,"author":{"gitId":"AlWo223"},"content":" */","lastModifiedDate":"2023-10-01"},{"lineNumber":8,"author":{"gitId":"AlWo223"},"content":"public class TaskList {","lastModifiedDate":"2023-10-01"},{"lineNumber":9,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":10,"author":{"gitId":"AlWo223"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2023-10-01"},{"lineNumber":11,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":12,"author":{"gitId":"AlWo223"},"content":"    /**","lastModifiedDate":"2023-10-01"},{"lineNumber":13,"author":{"gitId":"AlWo223"},"content":"     * Generates TaskList object.","lastModifiedDate":"2023-10-01"},{"lineNumber":14,"author":{"gitId":"AlWo223"},"content":"     * @param tasks list of tasks.","lastModifiedDate":"2023-10-01"},{"lineNumber":15,"author":{"gitId":"AlWo223"},"content":"     */","lastModifiedDate":"2023-10-01"},{"lineNumber":16,"author":{"gitId":"AlWo223"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-10-01"},{"lineNumber":17,"author":{"gitId":"AlWo223"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2023-10-01"},{"lineNumber":18,"author":{"gitId":"AlWo223"},"content":"    }","lastModifiedDate":"2023-10-01"},{"lineNumber":19,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":20,"author":{"gitId":"AlWo223"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":21,"author":{"gitId":"AlWo223"},"content":"     * Returns the list of tasks.","lastModifiedDate":"2023-10-03"},{"lineNumber":22,"author":{"gitId":"AlWo223"},"content":"     * @return list of tasks.","lastModifiedDate":"2023-10-03"},{"lineNumber":23,"author":{"gitId":"AlWo223"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":24,"author":{"gitId":"AlWo223"},"content":"    public ArrayList\u003cTask\u003e getTasks() {","lastModifiedDate":"2023-10-01"},{"lineNumber":25,"author":{"gitId":"AlWo223"},"content":"        return tasks;","lastModifiedDate":"2023-10-01"},{"lineNumber":26,"author":{"gitId":"AlWo223"},"content":"    }","lastModifiedDate":"2023-10-01"},{"lineNumber":27,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":28,"author":{"gitId":"AlWo223"},"content":"    /**","lastModifiedDate":"2023-10-01"},{"lineNumber":29,"author":{"gitId":"AlWo223"},"content":"     * Adds task to the list.","lastModifiedDate":"2023-10-01"},{"lineNumber":30,"author":{"gitId":"AlWo223"},"content":"     * @param task Task to be added.","lastModifiedDate":"2023-10-01"},{"lineNumber":31,"author":{"gitId":"AlWo223"},"content":"     */","lastModifiedDate":"2023-10-01"},{"lineNumber":32,"author":{"gitId":"AlWo223"},"content":"    public void add(Task task) {","lastModifiedDate":"2023-10-01"},{"lineNumber":33,"author":{"gitId":"AlWo223"},"content":"        this.tasks.add(task);","lastModifiedDate":"2023-10-01"},{"lineNumber":34,"author":{"gitId":"AlWo223"},"content":"    }","lastModifiedDate":"2023-10-01"},{"lineNumber":35,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":36,"author":{"gitId":"AlWo223"},"content":"    /**","lastModifiedDate":"2023-10-01"},{"lineNumber":37,"author":{"gitId":"AlWo223"},"content":"     * Removes task from the list at specified index.","lastModifiedDate":"2023-10-01"},{"lineNumber":38,"author":{"gitId":"AlWo223"},"content":"     * @param index Index of task to be removed.","lastModifiedDate":"2023-10-01"},{"lineNumber":39,"author":{"gitId":"AlWo223"},"content":"     */","lastModifiedDate":"2023-10-01"},{"lineNumber":40,"author":{"gitId":"AlWo223"},"content":"    public void remove(int index) {","lastModifiedDate":"2023-10-01"},{"lineNumber":41,"author":{"gitId":"AlWo223"},"content":"        this.tasks.remove(index);","lastModifiedDate":"2023-10-01"},{"lineNumber":42,"author":{"gitId":"AlWo223"},"content":"    }","lastModifiedDate":"2023-10-01"},{"lineNumber":43,"author":{"gitId":"AlWo223"},"content":"}","lastModifiedDate":"2023-10-01"}],"authorContributionMap":{"AlWo223":43}},{"path":"src/main/java/duke/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AlWo223"},"content":"package duke;","lastModifiedDate":"2023-09-13"},{"lineNumber":2,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":3,"author":{"gitId":"AlWo223"},"content":"/**","lastModifiedDate":"2023-10-01"},{"lineNumber":4,"author":{"gitId":"AlWo223"},"content":" * Represents a todo task consisting of a description of the task.","lastModifiedDate":"2023-10-01"},{"lineNumber":5,"author":{"gitId":"AlWo223"},"content":" */","lastModifiedDate":"2023-10-01"},{"lineNumber":6,"author":{"gitId":"AlWo223"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-09-06"},{"lineNumber":7,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":8,"author":{"gitId":"AlWo223"},"content":"    /**","lastModifiedDate":"2023-10-01"},{"lineNumber":9,"author":{"gitId":"AlWo223"},"content":"     * Generates new Todo object.","lastModifiedDate":"2023-10-01"},{"lineNumber":10,"author":{"gitId":"AlWo223"},"content":"     * @param description Description of the todo.","lastModifiedDate":"2023-10-01"},{"lineNumber":11,"author":{"gitId":"AlWo223"},"content":"     */","lastModifiedDate":"2023-10-01"},{"lineNumber":12,"author":{"gitId":"AlWo223"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"AlWo223"},"content":"        super(description);","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"AlWo223"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":15,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":16,"author":{"gitId":"AlWo223"},"content":"    /**","lastModifiedDate":"2023-10-01"},{"lineNumber":17,"author":{"gitId":"AlWo223"},"content":"     * Returns the single line representation of the todo which is used by the UI.","lastModifiedDate":"2023-10-01"},{"lineNumber":18,"author":{"gitId":"AlWo223"},"content":"     * @return string representation of the todo.","lastModifiedDate":"2023-10-01"},{"lineNumber":19,"author":{"gitId":"AlWo223"},"content":"     */","lastModifiedDate":"2023-10-01"},{"lineNumber":20,"author":{"gitId":"AlWo223"},"content":"    @Override","lastModifiedDate":"2023-10-03"},{"lineNumber":21,"author":{"gitId":"AlWo223"},"content":"    public String toString() {","lastModifiedDate":"2023-09-06"},{"lineNumber":22,"author":{"gitId":"AlWo223"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-09-06"},{"lineNumber":23,"author":{"gitId":"AlWo223"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":24,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":25,"author":{"gitId":"AlWo223"},"content":"    /**","lastModifiedDate":"2023-10-01"},{"lineNumber":26,"author":{"gitId":"AlWo223"},"content":"     * Returns the single line representation of the todo which is used for the file.","lastModifiedDate":"2023-10-01"},{"lineNumber":27,"author":{"gitId":"AlWo223"},"content":"     * @return string representation of the todo.","lastModifiedDate":"2023-10-01"},{"lineNumber":28,"author":{"gitId":"AlWo223"},"content":"     */","lastModifiedDate":"2023-10-01"},{"lineNumber":29,"author":{"gitId":"AlWo223"},"content":"    @Override","lastModifiedDate":"2023-10-03"},{"lineNumber":30,"author":{"gitId":"AlWo223"},"content":"    public String toSaveFormat() {","lastModifiedDate":"2023-10-03"},{"lineNumber":31,"author":{"gitId":"AlWo223"},"content":"        return (\"T | \" + super.toSaveFormat());","lastModifiedDate":"2023-10-03"},{"lineNumber":32,"author":{"gitId":"AlWo223"},"content":"    }","lastModifiedDate":"2023-09-19"},{"lineNumber":33,"author":{"gitId":"AlWo223"},"content":"}","lastModifiedDate":"2023-09-06"}],"authorContributionMap":{"AlWo223":33}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AlWo223"},"content":"package duke;","lastModifiedDate":"2023-10-01"},{"lineNumber":2,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":3,"author":{"gitId":"AlWo223"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-01"},{"lineNumber":4,"author":{"gitId":"AlWo223"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-10-01"},{"lineNumber":5,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":6,"author":{"gitId":"AlWo223"},"content":"/**","lastModifiedDate":"2023-10-01"},{"lineNumber":7,"author":{"gitId":"AlWo223"},"content":" * Represents the user interface of the bot and controls the interaction with the user.","lastModifiedDate":"2023-10-01"},{"lineNumber":8,"author":{"gitId":"AlWo223"},"content":" */","lastModifiedDate":"2023-10-01"},{"lineNumber":9,"author":{"gitId":"AlWo223"},"content":"public class Ui {","lastModifiedDate":"2023-10-01"},{"lineNumber":10,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":11,"author":{"gitId":"AlWo223"},"content":"    private final String HORIZONTAL_LINE \u003d \"--------------------------------------------\";","lastModifiedDate":"2023-10-01"},{"lineNumber":12,"author":{"gitId":"AlWo223"},"content":"    private Scanner in;","lastModifiedDate":"2023-10-01"},{"lineNumber":13,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":14,"author":{"gitId":"AlWo223"},"content":"    /**","lastModifiedDate":"2023-10-01"},{"lineNumber":15,"author":{"gitId":"AlWo223"},"content":"     * Constructor for Ui.","lastModifiedDate":"2023-10-01"},{"lineNumber":16,"author":{"gitId":"AlWo223"},"content":"     */","lastModifiedDate":"2023-10-01"},{"lineNumber":17,"author":{"gitId":"AlWo223"},"content":"    public Ui() {","lastModifiedDate":"2023-10-01"},{"lineNumber":18,"author":{"gitId":"AlWo223"},"content":"        in \u003d new Scanner(System.in);","lastModifiedDate":"2023-10-01"},{"lineNumber":19,"author":{"gitId":"AlWo223"},"content":"    }","lastModifiedDate":"2023-10-01"},{"lineNumber":20,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":21,"author":{"gitId":"AlWo223"},"content":"    /**","lastModifiedDate":"2023-10-01"},{"lineNumber":22,"author":{"gitId":"AlWo223"},"content":"     * Introduces the bot and greets the user with the current list of tasks.","lastModifiedDate":"2023-10-01"},{"lineNumber":23,"author":{"gitId":"AlWo223"},"content":"     * @param tasks TaskList object containing the list of tasks.","lastModifiedDate":"2023-10-01"},{"lineNumber":24,"author":{"gitId":"AlWo223"},"content":"     */","lastModifiedDate":"2023-10-01"},{"lineNumber":25,"author":{"gitId":"AlWo223"},"content":"    public void introduceBot(TaskList tasks) {","lastModifiedDate":"2023-10-01"},{"lineNumber":26,"author":{"gitId":"AlWo223"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2023-10-01"},{"lineNumber":27,"author":{"gitId":"AlWo223"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2023-10-01"},{"lineNumber":28,"author":{"gitId":"AlWo223"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2023-10-01"},{"lineNumber":29,"author":{"gitId":"AlWo223"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2023-10-01"},{"lineNumber":30,"author":{"gitId":"AlWo223"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2023-10-01"},{"lineNumber":31,"author":{"gitId":"AlWo223"},"content":"        String name \u003d \"Lexi\";","lastModifiedDate":"2023-10-01"},{"lineNumber":32,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":33,"author":{"gitId":"AlWo223"},"content":"        System.out.println(logo);","lastModifiedDate":"2023-10-01"},{"lineNumber":34,"author":{"gitId":"AlWo223"},"content":"        printHorizontalLine();","lastModifiedDate":"2023-10-03"},{"lineNumber":35,"author":{"gitId":"AlWo223"},"content":"        System.out.println(\"Hello! I\u0027m \" + name);","lastModifiedDate":"2023-10-01"},{"lineNumber":36,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":37,"author":{"gitId":"AlWo223"},"content":"        if (tasks.getTasks().size() \u003e 0) {","lastModifiedDate":"2023-10-01"},{"lineNumber":38,"author":{"gitId":"AlWo223"},"content":"            printList(tasks);","lastModifiedDate":"2023-10-01"},{"lineNumber":39,"author":{"gitId":"AlWo223"},"content":"        } else {","lastModifiedDate":"2023-10-01"},{"lineNumber":40,"author":{"gitId":"AlWo223"},"content":"            System.out.println(\"Currently, you have no tasks in your list.\");","lastModifiedDate":"2023-10-01"},{"lineNumber":41,"author":{"gitId":"AlWo223"},"content":"        }","lastModifiedDate":"2023-10-01"},{"lineNumber":42,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":43,"author":{"gitId":"AlWo223"},"content":"        System.out.println(\"How can I help you buddy?\");","lastModifiedDate":"2023-10-01"},{"lineNumber":44,"author":{"gitId":"AlWo223"},"content":"        printHorizontalLine();","lastModifiedDate":"2023-10-03"},{"lineNumber":45,"author":{"gitId":"AlWo223"},"content":"    }","lastModifiedDate":"2023-10-01"},{"lineNumber":46,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":47,"author":{"gitId":"AlWo223"},"content":"    /**","lastModifiedDate":"2023-10-01"},{"lineNumber":48,"author":{"gitId":"AlWo223"},"content":"     * Prints farewell message to the user.","lastModifiedDate":"2023-10-01"},{"lineNumber":49,"author":{"gitId":"AlWo223"},"content":"     */","lastModifiedDate":"2023-10-01"},{"lineNumber":50,"author":{"gitId":"AlWo223"},"content":"    public void farewellBot() {","lastModifiedDate":"2023-10-01"},{"lineNumber":51,"author":{"gitId":"AlWo223"},"content":"        System.out.println(\"Have a wonderful day! Hope to see you again soon!\");","lastModifiedDate":"2023-10-01"},{"lineNumber":52,"author":{"gitId":"AlWo223"},"content":"        printHorizontalLine();","lastModifiedDate":"2023-10-03"},{"lineNumber":53,"author":{"gitId":"AlWo223"},"content":"    }","lastModifiedDate":"2023-10-01"},{"lineNumber":54,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":55,"author":{"gitId":"AlWo223"},"content":"    /**","lastModifiedDate":"2023-10-01"},{"lineNumber":56,"author":{"gitId":"AlWo223"},"content":"     * Prints a numbered list of tasks.","lastModifiedDate":"2023-10-01"},{"lineNumber":57,"author":{"gitId":"AlWo223"},"content":"     * @param tasks TaskList object containing the list of tasks.","lastModifiedDate":"2023-10-01"},{"lineNumber":58,"author":{"gitId":"AlWo223"},"content":"     */","lastModifiedDate":"2023-10-01"},{"lineNumber":59,"author":{"gitId":"AlWo223"},"content":"    public void printList(TaskList tasks) {","lastModifiedDate":"2023-10-01"},{"lineNumber":60,"author":{"gitId":"AlWo223"},"content":"        System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2023-10-01"},{"lineNumber":61,"author":{"gitId":"AlWo223"},"content":"        for (int i \u003d 0; i \u003c tasks.getTasks().size(); i++) {","lastModifiedDate":"2023-10-01"},{"lineNumber":62,"author":{"gitId":"AlWo223"},"content":"            System.out.println((i+1) + \".\" + tasks.getTasks().get(i));","lastModifiedDate":"2023-10-01"},{"lineNumber":63,"author":{"gitId":"AlWo223"},"content":"        }","lastModifiedDate":"2023-10-01"},{"lineNumber":64,"author":{"gitId":"AlWo223"},"content":"    }","lastModifiedDate":"2023-10-01"},{"lineNumber":65,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":66,"author":{"gitId":"AlWo223"},"content":"    /**","lastModifiedDate":"2023-10-01"},{"lineNumber":67,"author":{"gitId":"AlWo223"},"content":"     * Notifies user after a task has been added.","lastModifiedDate":"2023-10-01"},{"lineNumber":68,"author":{"gitId":"AlWo223"},"content":"     * @param task Task object that has been added.","lastModifiedDate":"2023-10-01"},{"lineNumber":69,"author":{"gitId":"AlWo223"},"content":"     * @param tasks TaskList object containing the updated list of tasks.","lastModifiedDate":"2023-10-01"},{"lineNumber":70,"author":{"gitId":"AlWo223"},"content":"     */","lastModifiedDate":"2023-10-01"},{"lineNumber":71,"author":{"gitId":"AlWo223"},"content":"    public void printTaskAddedMessage(Task task, ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-10-01"},{"lineNumber":72,"author":{"gitId":"AlWo223"},"content":"        System.out.println(\"Ok, I have added the following task:\");","lastModifiedDate":"2023-10-01"},{"lineNumber":73,"author":{"gitId":"AlWo223"},"content":"        System.out.println(\"   \" + task);","lastModifiedDate":"2023-10-01"},{"lineNumber":74,"author":{"gitId":"AlWo223"},"content":"        System.out.println(\"Now you have \" + tasks.size() + \" tasks in the list.\");","lastModifiedDate":"2023-10-01"},{"lineNumber":75,"author":{"gitId":"AlWo223"},"content":"    }","lastModifiedDate":"2023-10-01"},{"lineNumber":76,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":77,"author":{"gitId":"AlWo223"},"content":"    /**","lastModifiedDate":"2023-10-01"},{"lineNumber":78,"author":{"gitId":"AlWo223"},"content":"     * Notifies user after a task has been removed.","lastModifiedDate":"2023-10-01"},{"lineNumber":79,"author":{"gitId":"AlWo223"},"content":"     * @param task Task object that has been removed.","lastModifiedDate":"2023-10-01"},{"lineNumber":80,"author":{"gitId":"AlWo223"},"content":"     * @param tasks TaskList object containing the updated list of tasks.","lastModifiedDate":"2023-10-01"},{"lineNumber":81,"author":{"gitId":"AlWo223"},"content":"     */","lastModifiedDate":"2023-10-01"},{"lineNumber":82,"author":{"gitId":"AlWo223"},"content":"    public void printTaskRemovedMessage(Task task, TaskList tasks) {","lastModifiedDate":"2023-10-01"},{"lineNumber":83,"author":{"gitId":"AlWo223"},"content":"        System.out.println(\"Alright, I have removed the following task:\");","lastModifiedDate":"2023-10-01"},{"lineNumber":84,"author":{"gitId":"AlWo223"},"content":"        System.out.println(\"   \" + task);","lastModifiedDate":"2023-10-01"},{"lineNumber":85,"author":{"gitId":"AlWo223"},"content":"        System.out.println(\"Now you have \" + tasks.getTasks().size() + \" tasks in the list.\");","lastModifiedDate":"2023-10-01"},{"lineNumber":86,"author":{"gitId":"AlWo223"},"content":"    }","lastModifiedDate":"2023-10-01"},{"lineNumber":87,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":88,"author":{"gitId":"AlWo223"},"content":"    /**","lastModifiedDate":"2023-10-01"},{"lineNumber":89,"author":{"gitId":"AlWo223"},"content":"     * Reads the user input.","lastModifiedDate":"2023-10-01"},{"lineNumber":90,"author":{"gitId":"AlWo223"},"content":"     * @return String containing the provided input.","lastModifiedDate":"2023-10-01"},{"lineNumber":91,"author":{"gitId":"AlWo223"},"content":"     */","lastModifiedDate":"2023-10-01"},{"lineNumber":92,"author":{"gitId":"AlWo223"},"content":"    public String readCommand() {","lastModifiedDate":"2023-10-01"},{"lineNumber":93,"author":{"gitId":"AlWo223"},"content":"        return in.nextLine().trim();","lastModifiedDate":"2023-10-03"},{"lineNumber":94,"author":{"gitId":"AlWo223"},"content":"    }","lastModifiedDate":"2023-10-01"},{"lineNumber":95,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":96,"author":{"gitId":"AlWo223"},"content":"    /**","lastModifiedDate":"2023-10-01"},{"lineNumber":97,"author":{"gitId":"AlWo223"},"content":"     * Prints a horizontal line used for command separations in the dialogue.","lastModifiedDate":"2023-10-01"},{"lineNumber":98,"author":{"gitId":"AlWo223"},"content":"     */","lastModifiedDate":"2023-10-01"},{"lineNumber":99,"author":{"gitId":"AlWo223"},"content":"    public void printHorizontalLine() {","lastModifiedDate":"2023-10-01"},{"lineNumber":100,"author":{"gitId":"AlWo223"},"content":"        System.out.println(HORIZONTAL_LINE);","lastModifiedDate":"2023-10-01"},{"lineNumber":101,"author":{"gitId":"AlWo223"},"content":"    }","lastModifiedDate":"2023-10-01"},{"lineNumber":102,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":103,"author":{"gitId":"AlWo223"},"content":"    /**","lastModifiedDate":"2023-10-01"},{"lineNumber":104,"author":{"gitId":"AlWo223"},"content":"     * Notifies the user about the successful marking or unmarking of a task.","lastModifiedDate":"2023-10-01"},{"lineNumber":105,"author":{"gitId":"AlWo223"},"content":"     * @param done Boolean value indicating whether the task is done.","lastModifiedDate":"2023-10-01"},{"lineNumber":106,"author":{"gitId":"AlWo223"},"content":"     * @param tasks TaskList object containing the list of tasks.","lastModifiedDate":"2023-10-01"},{"lineNumber":107,"author":{"gitId":"AlWo223"},"content":"     * @param index Index of the task to be marked as done.","lastModifiedDate":"2023-10-01"},{"lineNumber":108,"author":{"gitId":"AlWo223"},"content":"     */","lastModifiedDate":"2023-10-01"},{"lineNumber":109,"author":{"gitId":"AlWo223"},"content":"    public void printMark(boolean done, TaskList tasks, int index) {","lastModifiedDate":"2023-10-01"},{"lineNumber":110,"author":{"gitId":"AlWo223"},"content":"        if (done) {","lastModifiedDate":"2023-10-01"},{"lineNumber":111,"author":{"gitId":"AlWo223"},"content":"            System.out.println(\"Great! I have marked this task as done:\");","lastModifiedDate":"2023-10-01"},{"lineNumber":112,"author":{"gitId":"AlWo223"},"content":"        } else {","lastModifiedDate":"2023-10-01"},{"lineNumber":113,"author":{"gitId":"AlWo223"},"content":"            System.out.println(\"Alright, I have marked this task as not done:\");","lastModifiedDate":"2023-10-01"},{"lineNumber":114,"author":{"gitId":"AlWo223"},"content":"        }","lastModifiedDate":"2023-10-01"},{"lineNumber":115,"author":{"gitId":"AlWo223"},"content":"        System.out.println(tasks.getTasks().get(index - 1));","lastModifiedDate":"2023-10-01"},{"lineNumber":116,"author":{"gitId":"AlWo223"},"content":"    }","lastModifiedDate":"2023-10-01"},{"lineNumber":117,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":118,"author":{"gitId":"AlWo223"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":119,"author":{"gitId":"AlWo223"},"content":"     * Prints the list of tasks that match the provided keyword.","lastModifiedDate":"2023-10-03"},{"lineNumber":120,"author":{"gitId":"AlWo223"},"content":"     * If no tasks match, user will be notified as well.","lastModifiedDate":"2023-10-03"},{"lineNumber":121,"author":{"gitId":"AlWo223"},"content":"     * @param matchingTasks ArrayList of Task objects that match the provided keyword.","lastModifiedDate":"2023-10-03"},{"lineNumber":122,"author":{"gitId":"AlWo223"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":123,"author":{"gitId":"AlWo223"},"content":"    public void printKeywordSearchResult(ArrayList\u003cTask\u003e matchingTasks) {","lastModifiedDate":"2023-10-03"},{"lineNumber":124,"author":{"gitId":"AlWo223"},"content":"        if (matchingTasks.size() \u003d\u003d 0) {","lastModifiedDate":"2023-10-01"},{"lineNumber":125,"author":{"gitId":"AlWo223"},"content":"            System.out.println(\"There are no matching tasks in your list!\");","lastModifiedDate":"2023-10-01"},{"lineNumber":126,"author":{"gitId":"AlWo223"},"content":"        } else {","lastModifiedDate":"2023-10-01"},{"lineNumber":127,"author":{"gitId":"AlWo223"},"content":"            System.out.println(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2023-10-01"},{"lineNumber":128,"author":{"gitId":"AlWo223"},"content":"            for (int i \u003d 0; i \u003c matchingTasks.size(); i++) {","lastModifiedDate":"2023-10-01"},{"lineNumber":129,"author":{"gitId":"AlWo223"},"content":"                System.out.println((i+1) + \".\" + matchingTasks.get(i));","lastModifiedDate":"2023-10-01"},{"lineNumber":130,"author":{"gitId":"AlWo223"},"content":"            }","lastModifiedDate":"2023-10-01"},{"lineNumber":131,"author":{"gitId":"AlWo223"},"content":"        }","lastModifiedDate":"2023-10-01"},{"lineNumber":132,"author":{"gitId":"AlWo223"},"content":"    }","lastModifiedDate":"2023-10-01"},{"lineNumber":133,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":134,"author":{"gitId":"AlWo223"},"content":"    /**","lastModifiedDate":"2023-10-01"},{"lineNumber":135,"author":{"gitId":"AlWo223"},"content":"     * Notifies user about deadline formatting issue and provides the expected input format.","lastModifiedDate":"2023-10-01"},{"lineNumber":136,"author":{"gitId":"AlWo223"},"content":"     * @see Deadline","lastModifiedDate":"2023-10-01"},{"lineNumber":137,"author":{"gitId":"AlWo223"},"content":"     */","lastModifiedDate":"2023-10-01"},{"lineNumber":138,"author":{"gitId":"AlWo223"},"content":"    public void printInvalidDeadlineMessage() {","lastModifiedDate":"2023-10-01"},{"lineNumber":139,"author":{"gitId":"AlWo223"},"content":"        System.out.println(\"Oops, I don\u0027t understand that! Please provide a valid deadline in the format: \" +","lastModifiedDate":"2023-10-01"},{"lineNumber":140,"author":{"gitId":"AlWo223"},"content":"                \"deadline \u003cdescription\u003e /by \u003cdue date\u003e\");","lastModifiedDate":"2023-10-01"},{"lineNumber":141,"author":{"gitId":"AlWo223"},"content":"    }","lastModifiedDate":"2023-10-01"},{"lineNumber":142,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":143,"author":{"gitId":"AlWo223"},"content":"    /**","lastModifiedDate":"2023-10-01"},{"lineNumber":144,"author":{"gitId":"AlWo223"},"content":"     * Notifies user about empty deadline input and provides the expected input format.","lastModifiedDate":"2023-10-01"},{"lineNumber":145,"author":{"gitId":"AlWo223"},"content":"     * @see Deadline","lastModifiedDate":"2023-10-01"},{"lineNumber":146,"author":{"gitId":"AlWo223"},"content":"     */","lastModifiedDate":"2023-10-01"},{"lineNumber":147,"author":{"gitId":"AlWo223"},"content":"    public void printEmptyDeadlineMessage() {","lastModifiedDate":"2023-10-01"},{"lineNumber":148,"author":{"gitId":"AlWo223"},"content":"        System.out.println(\"I am sorry, the deadline cannot be empty! Please provide a valid deadline in the \" +","lastModifiedDate":"2023-10-01"},{"lineNumber":149,"author":{"gitId":"AlWo223"},"content":"                \"format: deadline \u003cdescription\u003e /by \u003cdue date\u003e\");","lastModifiedDate":"2023-10-01"},{"lineNumber":150,"author":{"gitId":"AlWo223"},"content":"    }","lastModifiedDate":"2023-10-01"},{"lineNumber":151,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":152,"author":{"gitId":"AlWo223"},"content":"    /**","lastModifiedDate":"2023-10-01"},{"lineNumber":153,"author":{"gitId":"AlWo223"},"content":"     * Notifies user about invalid event input and provides the correct input formatting.","lastModifiedDate":"2023-10-01"},{"lineNumber":154,"author":{"gitId":"AlWo223"},"content":"     * @see Event","lastModifiedDate":"2023-10-01"},{"lineNumber":155,"author":{"gitId":"AlWo223"},"content":"     */","lastModifiedDate":"2023-10-01"},{"lineNumber":156,"author":{"gitId":"AlWo223"},"content":"    public void printInvalidEventMessage() {","lastModifiedDate":"2023-10-01"},{"lineNumber":157,"author":{"gitId":"AlWo223"},"content":"        System.out.println(\"Oops, I don\u0027t understand that! Please provide a valid event in the format: event \" +","lastModifiedDate":"2023-10-01"},{"lineNumber":158,"author":{"gitId":"AlWo223"},"content":"                \"\u003cdescription\u003e /from \u003cstart date\u003e /to \u003cend date\u003e\");","lastModifiedDate":"2023-10-01"},{"lineNumber":159,"author":{"gitId":"AlWo223"},"content":"    }","lastModifiedDate":"2023-10-01"},{"lineNumber":160,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":161,"author":{"gitId":"AlWo223"},"content":"    /**","lastModifiedDate":"2023-10-01"},{"lineNumber":162,"author":{"gitId":"AlWo223"},"content":"     * Notifies user about empty event input and provides the correct input formatting.","lastModifiedDate":"2023-10-01"},{"lineNumber":163,"author":{"gitId":"AlWo223"},"content":"     * @see Event","lastModifiedDate":"2023-10-01"},{"lineNumber":164,"author":{"gitId":"AlWo223"},"content":"     */","lastModifiedDate":"2023-10-01"},{"lineNumber":165,"author":{"gitId":"AlWo223"},"content":"    public void printEmptyEventMessage() {","lastModifiedDate":"2023-10-01"},{"lineNumber":166,"author":{"gitId":"AlWo223"},"content":"        System.out.println(\"I am sorry, the event cannot be empty! Please provide a valid event in the format: \" +","lastModifiedDate":"2023-10-01"},{"lineNumber":167,"author":{"gitId":"AlWo223"},"content":"                \"event \u003cdescription\u003e /from \u003cstart date\u003e /to \u003cend date\u003e\");","lastModifiedDate":"2023-10-01"},{"lineNumber":168,"author":{"gitId":"AlWo223"},"content":"    }","lastModifiedDate":"2023-10-01"},{"lineNumber":169,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":170,"author":{"gitId":"AlWo223"},"content":"    /**","lastModifiedDate":"2023-10-01"},{"lineNumber":171,"author":{"gitId":"AlWo223"},"content":"     * Notifies user about invalid task id input.","lastModifiedDate":"2023-10-01"},{"lineNumber":172,"author":{"gitId":"AlWo223"},"content":"     */","lastModifiedDate":"2023-10-01"},{"lineNumber":173,"author":{"gitId":"AlWo223"},"content":"    public void printInvalidTaskIdMessage() {","lastModifiedDate":"2023-10-01"},{"lineNumber":174,"author":{"gitId":"AlWo223"},"content":"        System.out.println(\"This task id does not exist, please provide a valid task number!\");","lastModifiedDate":"2023-10-01"},{"lineNumber":175,"author":{"gitId":"AlWo223"},"content":"    }","lastModifiedDate":"2023-10-01"},{"lineNumber":176,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":177,"author":{"gitId":"AlWo223"},"content":"    /**","lastModifiedDate":"2023-10-01"},{"lineNumber":178,"author":{"gitId":"AlWo223"},"content":"     * Notifies user about empty todo input.","lastModifiedDate":"2023-10-01"},{"lineNumber":179,"author":{"gitId":"AlWo223"},"content":"     */","lastModifiedDate":"2023-10-01"},{"lineNumber":180,"author":{"gitId":"AlWo223"},"content":"    public void printEmptyTodoMessage() {","lastModifiedDate":"2023-10-01"},{"lineNumber":181,"author":{"gitId":"AlWo223"},"content":"        System.out.println(\"I am sorry, the todo cannot be empty!\");","lastModifiedDate":"2023-10-01"},{"lineNumber":182,"author":{"gitId":"AlWo223"},"content":"    }","lastModifiedDate":"2023-10-01"},{"lineNumber":183,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":184,"author":{"gitId":"AlWo223"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":185,"author":{"gitId":"AlWo223"},"content":"     * Notifies user about invalid data and time input and provides the correct input formatting.","lastModifiedDate":"2023-10-03"},{"lineNumber":186,"author":{"gitId":"AlWo223"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":187,"author":{"gitId":"AlWo223"},"content":"    public void printInvalidDateTimeMessage() {","lastModifiedDate":"2023-10-01"},{"lineNumber":188,"author":{"gitId":"AlWo223"},"content":"        System.out.println(\"Oops, I don\u0027t understand that! Please provide valid date and time in a readable format \" +","lastModifiedDate":"2023-10-01"},{"lineNumber":189,"author":{"gitId":"AlWo223"},"content":"                \"like: YYYY-MM-DD HH:MM\");","lastModifiedDate":"2023-10-03"},{"lineNumber":190,"author":{"gitId":"AlWo223"},"content":"    }","lastModifiedDate":"2023-10-01"},{"lineNumber":191,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":192,"author":{"gitId":"AlWo223"},"content":"    public void printErrorMessage(String errorMessage) {","lastModifiedDate":"2023-10-03"},{"lineNumber":193,"author":{"gitId":"AlWo223"},"content":"        System.out.println(errorMessage);","lastModifiedDate":"2023-10-03"},{"lineNumber":194,"author":{"gitId":"AlWo223"},"content":"    }","lastModifiedDate":"2023-10-03"},{"lineNumber":195,"author":{"gitId":"AlWo223"},"content":"}","lastModifiedDate":"2023-10-01"}],"authorContributionMap":{"AlWo223":195}},{"path":"src/main/java/duke/exceptions/CorruptedFileException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AlWo223"},"content":"package duke.exceptions;","lastModifiedDate":"2023-10-01"},{"lineNumber":2,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":3,"author":{"gitId":"AlWo223"},"content":"/**","lastModifiedDate":"2023-10-01"},{"lineNumber":4,"author":{"gitId":"AlWo223"},"content":" * Represents an exception thrown when the file is corrupted, i.e., file is not matching the correct format.","lastModifiedDate":"2023-10-01"},{"lineNumber":5,"author":{"gitId":"AlWo223"},"content":" */","lastModifiedDate":"2023-10-01"},{"lineNumber":6,"author":{"gitId":"AlWo223"},"content":"public class CorruptedFileException extends Exception {","lastModifiedDate":"2023-09-19"},{"lineNumber":7,"author":{"gitId":"AlWo223"},"content":"}","lastModifiedDate":"2023-09-19"}],"authorContributionMap":{"AlWo223":7}},{"path":"src/main/java/duke/exceptions/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AlWo223"},"content":"package duke.exceptions;","lastModifiedDate":"2023-10-01"},{"lineNumber":2,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":3,"author":{"gitId":"AlWo223"},"content":"/**","lastModifiedDate":"2023-10-01"},{"lineNumber":4,"author":{"gitId":"AlWo223"},"content":" * Represents an exception when the input is not a valid command.","lastModifiedDate":"2023-10-01"},{"lineNumber":5,"author":{"gitId":"AlWo223"},"content":" */","lastModifiedDate":"2023-10-01"},{"lineNumber":6,"author":{"gitId":"AlWo223"},"content":"public class InvalidCommandException extends Exception {","lastModifiedDate":"2023-09-13"},{"lineNumber":7,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":8,"author":{"gitId":"AlWo223"},"content":"    /**","lastModifiedDate":"2023-10-01"},{"lineNumber":9,"author":{"gitId":"AlWo223"},"content":"     * Provides error message for the case when the input is not a valid command.","lastModifiedDate":"2023-10-03"},{"lineNumber":10,"author":{"gitId":"AlWo223"},"content":"     */","lastModifiedDate":"2023-10-01"},{"lineNumber":11,"author":{"gitId":"AlWo223"},"content":"    public String getErrorMessage() {","lastModifiedDate":"2023-10-03"},{"lineNumber":12,"author":{"gitId":"AlWo223"},"content":"        return \"Oops, seems like I don\u0027t know this command. Please provide a valid command!\";","lastModifiedDate":"2023-10-03"},{"lineNumber":13,"author":{"gitId":"AlWo223"},"content":"    }","lastModifiedDate":"2023-10-01"},{"lineNumber":14,"author":{"gitId":"AlWo223"},"content":"}","lastModifiedDate":"2023-09-13"}],"authorContributionMap":{"AlWo223":14}},{"path":"src/main/java/duke/exceptions/InvalidTimeSpanException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AlWo223"},"content":"package duke.exceptions;","lastModifiedDate":"2023-10-01"},{"lineNumber":2,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":3,"author":{"gitId":"AlWo223"},"content":"/**","lastModifiedDate":"2023-10-03"},{"lineNumber":4,"author":{"gitId":"AlWo223"},"content":" * Represents an exception when the start time of an event is after the end time.","lastModifiedDate":"2023-10-03"},{"lineNumber":5,"author":{"gitId":"AlWo223"},"content":" */","lastModifiedDate":"2023-10-03"},{"lineNumber":6,"author":{"gitId":"AlWo223"},"content":"public class InvalidTimeSpanException extends Exception {","lastModifiedDate":"2023-10-01"},{"lineNumber":7,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":8,"author":{"gitId":"AlWo223"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":9,"author":{"gitId":"AlWo223"},"content":"     * Notifies user when the start time of an event is after the end time.","lastModifiedDate":"2023-10-03"},{"lineNumber":10,"author":{"gitId":"AlWo223"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":11,"author":{"gitId":"AlWo223"},"content":"    public void printErrorMessage() {","lastModifiedDate":"2023-10-01"},{"lineNumber":12,"author":{"gitId":"AlWo223"},"content":"        System.out.println(\"The start time of an event cannot be after the end time!\");","lastModifiedDate":"2023-10-01"},{"lineNumber":13,"author":{"gitId":"AlWo223"},"content":"    }","lastModifiedDate":"2023-10-01"},{"lineNumber":14,"author":{"gitId":"AlWo223"},"content":"}","lastModifiedDate":"2023-10-01"}],"authorContributionMap":{"AlWo223":14}},{"path":"text-ui-test/data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"AlWo223"},"content":"E | 0 | project meeting | Aug-06-2022 13:00 | Aug-06-2022 14:00","lastModifiedDate":"2023-10-03"},{"lineNumber":2,"author":{"gitId":"AlWo223"},"content":"T | 0 | join Book club","lastModifiedDate":"2023-10-03"},{"lineNumber":3,"author":{"gitId":"AlWo223"},"content":"T | 0 | borrow book","lastModifiedDate":"2023-10-03"},{"lineNumber":4,"author":{"gitId":"AlWo223"},"content":"D | 0 | apply to Harvard | Dec-06-2023 23:59","lastModifiedDate":"2023-10-03"},{"lineNumber":5,"author":{"gitId":"AlWo223"},"content":"D | 0 | organize present for birthday party | Aug-08-2023 14:00","lastModifiedDate":"2023-10-03"}],"authorContributionMap":{"AlWo223":5}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"AlWo223"},"content":"todo read book","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"AlWo223"},"content":"deadline return book /by 2019-06-13","lastModifiedDate":"2023-10-01"},{"lineNumber":3,"author":{"gitId":"AlWo223"},"content":"event project meeting /from 2022-08-06 13:00 /to 2022-08-06 12:00","lastModifiedDate":"2023-10-01"},{"lineNumber":4,"author":{"gitId":"AlWo223"},"content":"event project meeting /from 2022-08-06 13:00 /to 2022-08-06 14:00","lastModifiedDate":"2023-10-03"},{"lineNumber":5,"author":{"gitId":"AlWo223"},"content":"mark 1","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"AlWo223"},"content":"unmark 0","lastModifiedDate":"2023-09-19"},{"lineNumber":7,"author":{"gitId":"AlWo223"},"content":"blah","lastModifiedDate":"2023-09-19"},{"lineNumber":8,"author":{"gitId":"AlWo223"},"content":"list","lastModifiedDate":"2023-09-19"},{"lineNumber":9,"author":{"gitId":"AlWo223"},"content":"delete 1","lastModifiedDate":"2023-09-19"},{"lineNumber":10,"author":{"gitId":"AlWo223"},"content":"todo join Book club","lastModifiedDate":"2023-10-03"},{"lineNumber":11,"author":{"gitId":"AlWo223"},"content":"delete","lastModifiedDate":"2023-09-19"},{"lineNumber":12,"author":{"gitId":"AlWo223"},"content":"mark","lastModifiedDate":"2023-10-01"},{"lineNumber":13,"author":{"gitId":"AlWo223"},"content":"todo borrow book","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"AlWo223"},"content":"find book","lastModifiedDate":"2023-10-03"},{"lineNumber":15,"author":{"gitId":"AlWo223"},"content":"deadline apply to Harvard /by 2023-12-06 23:59","lastModifiedDate":"2023-10-03"},{"lineNumber":16,"author":{"gitId":"AlWo223"},"content":"deadline organize present for birthday party /by 2023-08-08 14:00","lastModifiedDate":"2023-10-03"},{"lineNumber":17,"author":{"gitId":"AlWo223"},"content":"todo","lastModifiedDate":"2023-10-05"},{"lineNumber":18,"author":{"gitId":"AlWo223"},"content":"bye","lastModifiedDate":"2023-09-06"}],"authorContributionMap":{"AlWo223":18}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"AlWo223"},"content":"if [ -e \"./data/duke.txt\" ]","lastModifiedDate":"2023-10-03"},{"lineNumber":16,"author":{"gitId":"AlWo223"},"content":"then","lastModifiedDate":"2023-10-03"},{"lineNumber":17,"author":{"gitId":"AlWo223"},"content":"    rm data/duke.txt","lastModifiedDate":"2023-10-03"},{"lineNumber":18,"author":{"gitId":"AlWo223"},"content":"fi","lastModifiedDate":"2023-10-03"},{"lineNumber":19,"author":{"gitId":"AlWo223"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"AlWo223"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/duke/**/*.java","lastModifiedDate":"2023-10-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"AlWo223"},"content":"java -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-10-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"AlWo223"},"content":"diff -w ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2023-10-03"},{"lineNumber":36,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"AlWo223":8,"-":35}}]
