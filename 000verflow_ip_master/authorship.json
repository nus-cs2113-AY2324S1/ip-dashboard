[{"path":"data/history.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"000verflow"},"content":"T | 0 | test","lastModifiedDate":"2023-09-22"},{"lineNumber":2,"author":{"gitId":"000verflow"},"content":"D | 0 | submission | 2023-10-15T18:00","lastModifiedDate":"2023-09-22"},{"lineNumber":3,"author":{"gitId":"000verflow"},"content":"T | 0 | 1234","lastModifiedDate":"2023-10-03"}],"authorContributionMap":{"000verflow":3}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"000verflow"},"content":"# User guide","lastModifiedDate":"2023-10-03"},{"lineNumber":2,"author":{"gitId":"000verflow"},"content":"Andrew Tate is a **CLI tool** to help you manage your tasks.","lastModifiedDate":"2023-10-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":4,"author":{"gitId":"000verflow"},"content":"## Contents","lastModifiedDate":"2023-10-03"},{"lineNumber":5,"author":{"gitId":"000verflow"},"content":"* [Quick start](#quick-start--return-to-contents)","lastModifiedDate":"2023-10-03"},{"lineNumber":6,"author":{"gitId":"000verflow"},"content":"* [Features](#features--return-to-contents)","lastModifiedDate":"2023-10-03"},{"lineNumber":7,"author":{"gitId":"000verflow"},"content":"  -  [List current tasks: `list`](#list-current-tasks--list--return-to-contents)","lastModifiedDate":"2023-10-03"},{"lineNumber":8,"author":{"gitId":"000verflow"},"content":"  -  [Exiting the program: `bye`](#exiting-the-program-bye--return-to-contents)","lastModifiedDate":"2023-10-03"},{"lineNumber":9,"author":{"gitId":"000verflow"},"content":"  -  [Add a ToDo: `todo`](#add-a-todo-todo--return-to-contents)","lastModifiedDate":"2023-10-03"},{"lineNumber":10,"author":{"gitId":"000verflow"},"content":"  -  [Add a Deadline: `deadline`](#add-a-deadline-deadline--return-to-contents)","lastModifiedDate":"2023-10-03"},{"lineNumber":11,"author":{"gitId":"000verflow"},"content":"  -  [Add an Event: `event`](#add-an-event-event--return-to-contents)","lastModifiedDate":"2023-10-03"},{"lineNumber":12,"author":{"gitId":"000verflow"},"content":"  -  [Mark a task as done: `mark`](#mark-a-task-as-done-mark--return-to-contents)","lastModifiedDate":"2023-10-03"},{"lineNumber":13,"author":{"gitId":"000verflow"},"content":"  -  [Unmark a task as done: `unmark`](#unmark-a-task-from-done-unmark--return-to-contents)","lastModifiedDate":"2023-10-03"},{"lineNumber":14,"author":{"gitId":"000verflow"},"content":"  -  [Delete a task: `delete`](#delete-a-task-delete--return-to-contents)","lastModifiedDate":"2023-10-03"},{"lineNumber":15,"author":{"gitId":"000verflow"},"content":"  -  [Locate a task by name: `find`](#locate-a-task-by-name-find--return-to-contents)","lastModifiedDate":"2023-10-03"},{"lineNumber":16,"author":{"gitId":"000verflow"},"content":"* [Command summary](#command-summary--return-to-contents)","lastModifiedDate":"2023-10-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":19,"author":{"gitId":"000verflow"},"content":"## Quick start | [Return to contents](#contents)","lastModifiedDate":"2023-10-03"},{"lineNumber":20,"author":{"gitId":"000verflow"},"content":"1. Make sure that you have Java 11 or above installed on your computer.","lastModifiedDate":"2023-10-03"},{"lineNumber":21,"author":{"gitId":"000verflow"},"content":"   1. [How do I check the version of my Java](https://www.java.com/en/download/help/version_manual.html)","lastModifiedDate":"2023-10-03"},{"lineNumber":22,"author":{"gitId":"000verflow"},"content":"2. Download the latest ip.jar release from [GitHub](https://github.com/000verflow/ip/releases)","lastModifiedDate":"2023-10-03"},{"lineNumber":23,"author":{"gitId":"000verflow"},"content":"3. Create a `data` folder within the same folder as `ip.jar`","lastModifiedDate":"2023-10-03"},{"lineNumber":24,"author":{"gitId":"000verflow"},"content":"4. Using a CLI prompt like `command prompt` for Windows users and `Terminal` for Mac users","lastModifiedDate":"2023-10-03"},{"lineNumber":25,"author":{"gitId":"000verflow"},"content":"5. Use `cd` command to move to the folder where you put `ip.jar`","lastModifiedDate":"2023-10-03"},{"lineNumber":26,"author":{"gitId":"000verflow"},"content":"6. Run the program with `java -jar ip.jar`","lastModifiedDate":"2023-10-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":28,"author":{"gitId":"000verflow"},"content":"## Features | [Return to contents](#contents)","lastModifiedDate":"2023-10-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":30,"author":{"gitId":"000verflow"},"content":"\u003e Note:","lastModifiedDate":"2023-10-03"},{"lineNumber":31,"author":{"gitId":"000verflow"},"content":"\u003e - Andrew Tate saves your tasks locally using relative path `./data/history.txt`, please create the `./data` directory","lastModifiedDate":"2023-10-03"},{"lineNumber":32,"author":{"gitId":"000verflow"},"content":"    for the program","lastModifiedDate":"2023-10-03"},{"lineNumber":33,"author":{"gitId":"000verflow"},"content":"\u003e - **UPPERCASE** parameters are required by the user.","lastModifiedDate":"2023-10-03"},{"lineNumber":34,"author":{"gitId":"000verflow"},"content":"    \u003e   - e.g `todo DESCRIPTION`","lastModifiedDate":"2023-10-03"},{"lineNumber":35,"author":{"gitId":"000verflow"},"content":"\u003e - If a command doesn\u0027t take any parameters, it will be ignored.","lastModifiedDate":"2023-10-03"},{"lineNumber":36,"author":{"gitId":"000verflow"},"content":"    \u003e   - e.g `bye 1234`","lastModifiedDate":"2023-10-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":38,"author":{"gitId":"000verflow"},"content":"## List current tasks : `list` | [Return to contents](#contents)","lastModifiedDate":"2023-10-03"},{"lineNumber":39,"author":{"gitId":"000verflow"},"content":"Lists all current tasks, marked done or undone.","lastModifiedDate":"2023-10-03"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":41,"author":{"gitId":"000verflow"},"content":"Format: `list`","lastModifiedDate":"2023-10-03"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":43,"author":{"gitId":"000verflow"},"content":"## Exiting the program: `bye` | [Return to contents](#contents)","lastModifiedDate":"2023-10-03"},{"lineNumber":44,"author":{"gitId":"000verflow"},"content":"Exits from the program. Any current tasks would\u0027ve been saved in the `history.txt` file.","lastModifiedDate":"2023-10-03"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":46,"author":{"gitId":"000verflow"},"content":"Format: `bye`","lastModifiedDate":"2023-10-03"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":48,"author":{"gitId":"000verflow"},"content":"## Add a ToDo: `todo` | [Return to contents](#contents)","lastModifiedDate":"2023-10-03"},{"lineNumber":49,"author":{"gitId":"000verflow"},"content":"Creates a ToDo task and add it into the task list.","lastModifiedDate":"2023-10-03"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":51,"author":{"gitId":"000verflow"},"content":"Format: `todo DESCRIPTION`","lastModifiedDate":"2023-10-03"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":53,"author":{"gitId":"000verflow"},"content":"Example:","lastModifiedDate":"2023-10-03"},{"lineNumber":54,"author":{"gitId":"000verflow"},"content":"- `todo assignment for cs2113`","lastModifiedDate":"2023-10-03"},{"lineNumber":55,"author":{"gitId":"000verflow"},"content":"- `todo revise notes`","lastModifiedDate":"2023-10-03"},{"lineNumber":56,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":57,"author":{"gitId":"000verflow"},"content":"## Add a Deadline: `deadline` | [Return to contents](#contents)","lastModifiedDate":"2023-10-03"},{"lineNumber":58,"author":{"gitId":"000verflow"},"content":"Creates a Deadline task and add it into the task list.","lastModifiedDate":"2023-10-03"},{"lineNumber":59,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":60,"author":{"gitId":"000verflow"},"content":"Format: `deadline DESCRIPTION /by DEADLINE`","lastModifiedDate":"2023-10-03"},{"lineNumber":61,"author":{"gitId":"000verflow"},"content":"\u003e Note: DEADLINE is in YYYY-MM-DD HHMM format","lastModifiedDate":"2023-10-03"},{"lineNumber":62,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":63,"author":{"gitId":"000verflow"},"content":"Example:","lastModifiedDate":"2023-10-03"},{"lineNumber":64,"author":{"gitId":"000verflow"},"content":"- `deadline assignment submission /by 2023-10-15 1800`","lastModifiedDate":"2023-10-03"},{"lineNumber":65,"author":{"gitId":"000verflow"},"content":"- `deadline create notes /by 2023-09-12 1330 `","lastModifiedDate":"2023-10-03"},{"lineNumber":66,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":67,"author":{"gitId":"000verflow"},"content":"## Add an Event: `event` | [Return to contents](#contents)","lastModifiedDate":"2023-10-03"},{"lineNumber":68,"author":{"gitId":"000verflow"},"content":"Creates an Event task and add it into the task list.","lastModifiedDate":"2023-10-03"},{"lineNumber":69,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":70,"author":{"gitId":"000verflow"},"content":"Format: `event DESCRIPTION /from EVENTSTART /to EVENTEND`","lastModifiedDate":"2023-10-03"},{"lineNumber":71,"author":{"gitId":"000verflow"},"content":"\u003e Note: EVENTSTART/EVENTEND is in YYYY-MM-DD HHMM format","lastModifiedDate":"2023-10-03"},{"lineNumber":72,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":73,"author":{"gitId":"000verflow"},"content":"Example:","lastModifiedDate":"2023-10-03"},{"lineNumber":74,"author":{"gitId":"000verflow"},"content":"- `event tiktok hackathon /from 2023-10-15 1800 /to 2023-10-17 0900`","lastModifiedDate":"2023-10-03"},{"lineNumber":75,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":76,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":77,"author":{"gitId":"000verflow"},"content":"## Mark a task as done: `mark` | [Return to contents](#contents)","lastModifiedDate":"2023-10-03"},{"lineNumber":78,"author":{"gitId":"000verflow"},"content":"Mark a task as done, displayed with a `[X]`.","lastModifiedDate":"2023-10-03"},{"lineNumber":79,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":80,"author":{"gitId":"000verflow"},"content":"Format: `mark INDEX`","lastModifiedDate":"2023-10-03"},{"lineNumber":81,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":82,"author":{"gitId":"000verflow"},"content":"\u003eNote: Marks the task at the specified `INDEX`, where index starts from 1,2,3...","lastModifiedDate":"2023-10-03"},{"lineNumber":83,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":84,"author":{"gitId":"000verflow"},"content":"Examples:","lastModifiedDate":"2023-10-03"},{"lineNumber":85,"author":{"gitId":"000verflow"},"content":"- `mark 1` will mark the 1st task as done in the task list.","lastModifiedDate":"2023-10-03"},{"lineNumber":86,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":87,"author":{"gitId":"000verflow"},"content":"## Unmark a task from done: `unmark` | [Return to contents](#contents)","lastModifiedDate":"2023-10-03"},{"lineNumber":88,"author":{"gitId":"000verflow"},"content":"Unmark a task from done to undone, displayed with a `[ ]`.","lastModifiedDate":"2023-10-03"},{"lineNumber":89,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":90,"author":{"gitId":"000verflow"},"content":"Format: `unmark INDEX`","lastModifiedDate":"2023-10-03"},{"lineNumber":91,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":92,"author":{"gitId":"000verflow"},"content":"\u003eNote: Marks the task at the specified `INDEX`, where index starts from 1,2,3...","lastModifiedDate":"2023-10-03"},{"lineNumber":93,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":94,"author":{"gitId":"000verflow"},"content":"Examples:","lastModifiedDate":"2023-10-03"},{"lineNumber":95,"author":{"gitId":"000verflow"},"content":"- `unmark 1` will unmark the 1st task from done to undone in the task list.","lastModifiedDate":"2023-10-03"},{"lineNumber":96,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":97,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":98,"author":{"gitId":"000verflow"},"content":"## Delete a task: `delete` | [Return to contents](#contents)","lastModifiedDate":"2023-10-03"},{"lineNumber":99,"author":{"gitId":"000verflow"},"content":"Deletes a task from the task list.","lastModifiedDate":"2023-10-03"},{"lineNumber":100,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":101,"author":{"gitId":"000verflow"},"content":"Format: `delete INDEX`","lastModifiedDate":"2023-10-03"},{"lineNumber":102,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":103,"author":{"gitId":"000verflow"},"content":"\u003eNote: Deletes the task at the specified `INDEX`, where index starts from 1,2,3...","lastModifiedDate":"2023-10-03"},{"lineNumber":104,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":105,"author":{"gitId":"000verflow"},"content":"Examples:","lastModifiedDate":"2023-10-03"},{"lineNumber":106,"author":{"gitId":"000verflow"},"content":"- `delete 1` deletes the 1st task in the task list.","lastModifiedDate":"2023-10-03"},{"lineNumber":107,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":108,"author":{"gitId":"000verflow"},"content":"## Locate a task by name: `find` | [Return to contents](#contents)","lastModifiedDate":"2023-10-03"},{"lineNumber":109,"author":{"gitId":"000verflow"},"content":"Find any tasks in the task list that match given name.","lastModifiedDate":"2023-10-03"},{"lineNumber":110,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":111,"author":{"gitId":"000verflow"},"content":"Format: `find KEYWORD`","lastModifiedDate":"2023-10-03"},{"lineNumber":112,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":113,"author":{"gitId":"000verflow"},"content":"\u003e Note:","lastModifiedDate":"2023-10-03"},{"lineNumber":114,"author":{"gitId":"000verflow"},"content":"\u003e - Only the description is searched.","lastModifiedDate":"2023-10-03"},{"lineNumber":115,"author":{"gitId":"000verflow"},"content":"\u003e - Partial words will be matched. e.g. `cs` will match `cs2113`.","lastModifiedDate":"2023-10-03"},{"lineNumber":116,"author":{"gitId":"000verflow"},"content":"\u003e - The search is case-insensitive. e.g. `cs2113` will match `CS2113`","lastModifiedDate":"2023-10-03"},{"lineNumber":117,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":118,"author":{"gitId":"000verflow"},"content":"Examples:","lastModifiedDate":"2023-10-03"},{"lineNumber":119,"author":{"gitId":"000verflow"},"content":"- `find submissions` returns `cs2113 project submission deadline`","lastModifiedDate":"2023-10-03"},{"lineNumber":120,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":121,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":122,"author":{"gitId":"000verflow"},"content":"## Command summary | [Return to contents](#contents)","lastModifiedDate":"2023-10-03"},{"lineNumber":123,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":124,"author":{"gitId":"000verflow"},"content":"| Action   | Command                                                            |","lastModifiedDate":"2023-10-03"},{"lineNumber":125,"author":{"gitId":"000verflow"},"content":"|----------|--------------------------------------------------------------------|","lastModifiedDate":"2023-10-03"},{"lineNumber":126,"author":{"gitId":"000verflow"},"content":"| list     | `list`                                                             |","lastModifiedDate":"2023-10-03"},{"lineNumber":127,"author":{"gitId":"000verflow"},"content":"| bye      | `bye`                                                              |","lastModifiedDate":"2023-10-03"},{"lineNumber":128,"author":{"gitId":"000verflow"},"content":"| todo     | `todo DESCRIPTION` `todo powerpoint slides for cs2113`             |","lastModifiedDate":"2023-10-03"},{"lineNumber":129,"author":{"gitId":"000verflow"},"content":"| deadline | `deadline assignment submission /by 2023-10-15 1800`               |","lastModifiedDate":"2023-10-03"},{"lineNumber":130,"author":{"gitId":"000verflow"},"content":"| event    | `event tiktok hackathon /from 2023-10-15 1800 /to 2023-10-17 0900` |","lastModifiedDate":"2023-10-03"},{"lineNumber":131,"author":{"gitId":"000verflow"},"content":"| mark     | `mark INDEX` `mark 1` `mark 2`                                     |","lastModifiedDate":"2023-10-03"},{"lineNumber":132,"author":{"gitId":"000verflow"},"content":"| unmark   | `unmark INDEX` `unmark 1` `unmark 2`                               |","lastModifiedDate":"2023-10-03"},{"lineNumber":133,"author":{"gitId":"000verflow"},"content":"| delete   | `delete INDEX` `delete 1`                                          |","lastModifiedDate":"2023-10-03"},{"lineNumber":134,"author":{"gitId":"000verflow"},"content":"| find     | `find KEYWORD` `find submissions`                                  |                     ","lastModifiedDate":"2023-10-03"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"}],"authorContributionMap":{"000verflow":122,"-":13}},{"path":"src/main/java/duke/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"000verflow"},"content":"package duke;","lastModifiedDate":"2023-09-22"},{"lineNumber":2,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":3,"author":{"gitId":"000verflow"},"content":"/**","lastModifiedDate":"2023-09-25"},{"lineNumber":4,"author":{"gitId":"000verflow"},"content":" * The {@code Command} class represents a user command that the application can execute.","lastModifiedDate":"2023-09-25"},{"lineNumber":5,"author":{"gitId":"000verflow"},"content":" * Each {@code Command} object encapsulates a command type, represented by a command string,","lastModifiedDate":"2023-09-25"},{"lineNumber":6,"author":{"gitId":"000verflow"},"content":" * and any necessary arguments to execute the command.","lastModifiedDate":"2023-09-25"},{"lineNumber":7,"author":{"gitId":"000verflow"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":8,"author":{"gitId":"000verflow"},"content":" * The {@code Command} class is responsible for executing the user command on a given {@code TaskList}.","lastModifiedDate":"2023-09-25"},{"lineNumber":9,"author":{"gitId":"000verflow"},"content":" * The execution behavior is defined by the {@code execute} method, which interprets the command string","lastModifiedDate":"2023-09-25"},{"lineNumber":10,"author":{"gitId":"000verflow"},"content":" * and performs the corresponding action on the task list. The class supports a variety of command types,","lastModifiedDate":"2023-09-25"},{"lineNumber":11,"author":{"gitId":"000verflow"},"content":" * including adding tasks, deleting tasks, marking tasks as complete or incomplete, listing tasks,","lastModifiedDate":"2023-09-25"},{"lineNumber":12,"author":{"gitId":"000verflow"},"content":" * and finding tasks, among others.","lastModifiedDate":"2023-09-25"},{"lineNumber":13,"author":{"gitId":"000verflow"},"content":" * \u003c/p\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":14,"author":{"gitId":"000verflow"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":15,"author":{"gitId":"000verflow"},"content":" * This class also holds a flag, {@code Exit}, to signal when the user has issued an exit command, allowing","lastModifiedDate":"2023-09-25"},{"lineNumber":16,"author":{"gitId":"000verflow"},"content":" * the application to terminate its loop and exit gracefully.","lastModifiedDate":"2023-09-25"},{"lineNumber":17,"author":{"gitId":"000verflow"},"content":" * \u003c/p\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":18,"author":{"gitId":"000verflow"},"content":" *","lastModifiedDate":"2023-09-25"},{"lineNumber":19,"author":{"gitId":"000verflow"},"content":" * \u003cul\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":20,"author":{"gitId":"000verflow"},"content":" *     \u003cli\u003e{@link #execute(TaskList)} - Executes the command on the given {@code TaskList}.\u003c/li\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":21,"author":{"gitId":"000verflow"},"content":" *     \u003cli\u003e{@link #setExit()} - Sets the exit flag to true.\u003c/li\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":22,"author":{"gitId":"000verflow"},"content":" *     \u003cli\u003e{@link #isExit()} - Returns the current state of the exit flag.\u003c/li\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":23,"author":{"gitId":"000verflow"},"content":" * \u003c/ul\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":24,"author":{"gitId":"000verflow"},"content":" *","lastModifiedDate":"2023-09-25"},{"lineNumber":25,"author":{"gitId":"000verflow"},"content":" * @see TaskList","lastModifiedDate":"2023-09-25"},{"lineNumber":26,"author":{"gitId":"000verflow"},"content":" * @see DukeException","lastModifiedDate":"2023-09-25"},{"lineNumber":27,"author":{"gitId":"000verflow"},"content":" *","lastModifiedDate":"2023-09-25"},{"lineNumber":28,"author":{"gitId":"000verflow"},"content":" * @author  Ashok Balaji","lastModifiedDate":"2023-09-25"},{"lineNumber":29,"author":{"gitId":"000verflow"},"content":" * @version 1.0","lastModifiedDate":"2023-09-25"},{"lineNumber":30,"author":{"gitId":"000verflow"},"content":" * @since   2023-09-25","lastModifiedDate":"2023-09-25"},{"lineNumber":31,"author":{"gitId":"000verflow"},"content":" */","lastModifiedDate":"2023-09-25"},{"lineNumber":32,"author":{"gitId":"000verflow"},"content":"public class Command {","lastModifiedDate":"2023-09-22"},{"lineNumber":33,"author":{"gitId":"000verflow"},"content":"    protected String COMMAND;","lastModifiedDate":"2023-09-22"},{"lineNumber":34,"author":{"gitId":"000verflow"},"content":"    protected String[] ARGUMENTS;","lastModifiedDate":"2023-09-22"},{"lineNumber":35,"author":{"gitId":"000verflow"},"content":"    protected boolean Exit;","lastModifiedDate":"2023-09-22"},{"lineNumber":36,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":37,"author":{"gitId":"000verflow"},"content":"    public Command(String command, String[] arguments){","lastModifiedDate":"2023-09-22"},{"lineNumber":38,"author":{"gitId":"000verflow"},"content":"        this.COMMAND \u003d command;","lastModifiedDate":"2023-09-22"},{"lineNumber":39,"author":{"gitId":"000verflow"},"content":"        this.ARGUMENTS \u003d arguments;","lastModifiedDate":"2023-09-22"},{"lineNumber":40,"author":{"gitId":"000verflow"},"content":"        this.Exit \u003d false;","lastModifiedDate":"2023-09-22"},{"lineNumber":41,"author":{"gitId":"000verflow"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":42,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":43,"author":{"gitId":"000verflow"},"content":"    public void execute(TaskList TASKS) throws DukeException{","lastModifiedDate":"2023-09-22"},{"lineNumber":44,"author":{"gitId":"000verflow"},"content":"        switch (this.COMMAND) {","lastModifiedDate":"2023-09-22"},{"lineNumber":45,"author":{"gitId":"000verflow"},"content":"            case \"find\":","lastModifiedDate":"2023-09-22"},{"lineNumber":46,"author":{"gitId":"000verflow"},"content":"                TASKS.findTasksInList(this.ARGUMENTS);","lastModifiedDate":"2023-09-22"},{"lineNumber":47,"author":{"gitId":"000verflow"},"content":"                return;","lastModifiedDate":"2023-09-22"},{"lineNumber":48,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":49,"author":{"gitId":"000verflow"},"content":"            case \"todo\":","lastModifiedDate":"2023-09-22"},{"lineNumber":50,"author":{"gitId":"000verflow"},"content":"                TASKS.addTodoInList(this.ARGUMENTS);","lastModifiedDate":"2023-09-22"},{"lineNumber":51,"author":{"gitId":"000verflow"},"content":"                return;","lastModifiedDate":"2023-09-22"},{"lineNumber":52,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":53,"author":{"gitId":"000verflow"},"content":"            case \"deadline\":","lastModifiedDate":"2023-09-22"},{"lineNumber":54,"author":{"gitId":"000verflow"},"content":"                TASKS.addDeadlineInList(this.ARGUMENTS);","lastModifiedDate":"2023-09-22"},{"lineNumber":55,"author":{"gitId":"000verflow"},"content":"                return;","lastModifiedDate":"2023-09-22"},{"lineNumber":56,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":57,"author":{"gitId":"000verflow"},"content":"            case \"event\":","lastModifiedDate":"2023-09-22"},{"lineNumber":58,"author":{"gitId":"000verflow"},"content":"                TASKS.addEventInList(this.ARGUMENTS);","lastModifiedDate":"2023-09-22"},{"lineNumber":59,"author":{"gitId":"000verflow"},"content":"                return;","lastModifiedDate":"2023-09-22"},{"lineNumber":60,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":61,"author":{"gitId":"000verflow"},"content":"            case \"list\":","lastModifiedDate":"2023-09-22"},{"lineNumber":62,"author":{"gitId":"000verflow"},"content":"                TASKS.printList();","lastModifiedDate":"2023-09-22"},{"lineNumber":63,"author":{"gitId":"000verflow"},"content":"                return;","lastModifiedDate":"2023-09-22"},{"lineNumber":64,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":65,"author":{"gitId":"000verflow"},"content":"            case \"mark\":","lastModifiedDate":"2023-09-22"},{"lineNumber":66,"author":{"gitId":"000verflow"},"content":"                TASKS.markTaskComplete(this.ARGUMENTS);","lastModifiedDate":"2023-09-22"},{"lineNumber":67,"author":{"gitId":"000verflow"},"content":"                return;","lastModifiedDate":"2023-09-22"},{"lineNumber":68,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":69,"author":{"gitId":"000verflow"},"content":"            case \"unmark\":","lastModifiedDate":"2023-09-22"},{"lineNumber":70,"author":{"gitId":"000verflow"},"content":"                TASKS.markTaskIncomplete(this.ARGUMENTS);","lastModifiedDate":"2023-09-25"},{"lineNumber":71,"author":{"gitId":"000verflow"},"content":"                return;","lastModifiedDate":"2023-09-22"},{"lineNumber":72,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":73,"author":{"gitId":"000verflow"},"content":"            case \"delete\":","lastModifiedDate":"2023-09-22"},{"lineNumber":74,"author":{"gitId":"000verflow"},"content":"                TASKS.deleteTaskInList(this.ARGUMENTS);","lastModifiedDate":"2023-09-22"},{"lineNumber":75,"author":{"gitId":"000verflow"},"content":"                return;","lastModifiedDate":"2023-09-22"},{"lineNumber":76,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":77,"author":{"gitId":"000verflow"},"content":"            case \"bye\":","lastModifiedDate":"2023-09-22"},{"lineNumber":78,"author":{"gitId":"000verflow"},"content":"                setExit();","lastModifiedDate":"2023-09-22"},{"lineNumber":79,"author":{"gitId":"000verflow"},"content":"                return;","lastModifiedDate":"2023-09-22"},{"lineNumber":80,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":81,"author":{"gitId":"000verflow"},"content":"            default: // unknown command exception","lastModifiedDate":"2023-09-22"},{"lineNumber":82,"author":{"gitId":"000verflow"},"content":"                throw new DukeException(\"I don\u0027t know what that means...\");","lastModifiedDate":"2023-09-22"},{"lineNumber":83,"author":{"gitId":"000verflow"},"content":"        }","lastModifiedDate":"2023-09-22"},{"lineNumber":84,"author":{"gitId":"000verflow"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":85,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":86,"author":{"gitId":"000verflow"},"content":"    public void setExit(){","lastModifiedDate":"2023-09-22"},{"lineNumber":87,"author":{"gitId":"000verflow"},"content":"        this.Exit \u003d true;","lastModifiedDate":"2023-09-22"},{"lineNumber":88,"author":{"gitId":"000verflow"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":89,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":90,"author":{"gitId":"000verflow"},"content":"    public boolean isExit(){","lastModifiedDate":"2023-09-22"},{"lineNumber":91,"author":{"gitId":"000verflow"},"content":"        return this.Exit;","lastModifiedDate":"2023-09-22"},{"lineNumber":92,"author":{"gitId":"000verflow"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":93,"author":{"gitId":"000verflow"},"content":"}","lastModifiedDate":"2023-09-22"}],"authorContributionMap":{"000verflow":93}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"000verflow"},"content":"package duke;","lastModifiedDate":"2023-09-10"},{"lineNumber":2,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":3,"author":{"gitId":"000verflow"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-22"},{"lineNumber":4,"author":{"gitId":"000verflow"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-09-22"},{"lineNumber":5,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":6,"author":{"gitId":"000verflow"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"000verflow"},"content":"    protected LocalDateTime by;","lastModifiedDate":"2023-09-22"},{"lineNumber":8,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"000verflow"},"content":"    public Deadline(String description, LocalDateTime by) {","lastModifiedDate":"2023-09-22"},{"lineNumber":10,"author":{"gitId":"000verflow"},"content":"        super(description);","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"000verflow"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"000verflow"},"content":"        this.taskType \u003d \"D\";","lastModifiedDate":"2023-09-16"},{"lineNumber":13,"author":{"gitId":"000verflow"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"000verflow"},"content":"    public void setBy(LocalDateTime by) {","lastModifiedDate":"2023-09-22"},{"lineNumber":16,"author":{"gitId":"000verflow"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"000verflow"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"000verflow"},"content":"    public LocalDateTime getBy() {","lastModifiedDate":"2023-09-22"},{"lineNumber":20,"author":{"gitId":"000verflow"},"content":"        return by;","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"000verflow"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"000verflow"},"content":"    @Override","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"000verflow"},"content":"    public String toString() {","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"000verflow"},"content":"        return String.format(\"[%s]%s (by: %s)\", this.taskType ,super.toString(), this.by.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy h:mma\")));","lastModifiedDate":"2023-09-22"},{"lineNumber":26,"author":{"gitId":"000verflow"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"000verflow"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"000verflow":27}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"000verflow"},"content":"package duke;","lastModifiedDate":"2023-09-10"},{"lineNumber":2,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":3,"author":{"gitId":"000verflow"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-16"},{"lineNumber":4,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":5,"author":{"gitId":"000verflow"},"content":"/**","lastModifiedDate":"2023-09-25"},{"lineNumber":6,"author":{"gitId":"000verflow"},"content":" * The {@code Duke} class serves as the main class for the Duke application, orchestrating","lastModifiedDate":"2023-09-25"},{"lineNumber":7,"author":{"gitId":"000verflow"},"content":" * the interaction between the user, the task list, the storage, and the user interface.","lastModifiedDate":"2023-09-25"},{"lineNumber":8,"author":{"gitId":"000verflow"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":9,"author":{"gitId":"000verflow"},"content":" * The Duke application is a task management system where users can add, delete,","lastModifiedDate":"2023-09-25"},{"lineNumber":10,"author":{"gitId":"000verflow"},"content":" * and mark tasks as done. Tasks are saved in a specified file, and the application","lastModifiedDate":"2023-09-25"},{"lineNumber":11,"author":{"gitId":"000verflow"},"content":" * can load tasks from this file upon startup. The Duke class initializes the required","lastModifiedDate":"2023-09-25"},{"lineNumber":12,"author":{"gitId":"000verflow"},"content":" * components such as UI, Storage, and TaskList and handles the main execution loop","lastModifiedDate":"2023-09-25"},{"lineNumber":13,"author":{"gitId":"000verflow"},"content":" * where commands are read, parsed, executed, and the tasks list is saved back to the file.","lastModifiedDate":"2023-09-25"},{"lineNumber":14,"author":{"gitId":"000verflow"},"content":" * \u003c/p\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":15,"author":{"gitId":"000verflow"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":16,"author":{"gitId":"000verflow"},"content":" * When an instance of {@code Duke} is created, it attempts to load the task list from a file.","lastModifiedDate":"2023-09-25"},{"lineNumber":17,"author":{"gitId":"000verflow"},"content":" * If an error occurs during this loading, appropriate error messages are displayed,","lastModifiedDate":"2023-09-25"},{"lineNumber":18,"author":{"gitId":"000verflow"},"content":" * and an empty task list is initialized. The Duke class has a {@code run} method that","lastModifiedDate":"2023-09-25"},{"lineNumber":19,"author":{"gitId":"000verflow"},"content":" * starts the main execution of the application, and a {@code main} method that serves as","lastModifiedDate":"2023-09-25"},{"lineNumber":20,"author":{"gitId":"000verflow"},"content":" * the entry point of the application.","lastModifiedDate":"2023-09-25"},{"lineNumber":21,"author":{"gitId":"000verflow"},"content":" * \u003c/p\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":22,"author":{"gitId":"000verflow"},"content":" * \u003cul\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":23,"author":{"gitId":"000verflow"},"content":" *     \u003cli\u003e{@link #Duke(String)} - Constructs a new Duke object.\u003c/li\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":24,"author":{"gitId":"000verflow"},"content":" *     \u003cli\u003e{@link #run()} - Starts the execution of Duke.\u003c/li\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":25,"author":{"gitId":"000verflow"},"content":" *     \u003cli\u003e{@link #main(String[])} - The entry point of the application.\u003c/li\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":26,"author":{"gitId":"000verflow"},"content":" * \u003c/ul\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":27,"author":{"gitId":"000verflow"},"content":" *","lastModifiedDate":"2023-09-25"},{"lineNumber":28,"author":{"gitId":"000verflow"},"content":" * @see Storage","lastModifiedDate":"2023-09-25"},{"lineNumber":29,"author":{"gitId":"000verflow"},"content":" * @see TaskList","lastModifiedDate":"2023-09-25"},{"lineNumber":30,"author":{"gitId":"000verflow"},"content":" * @see Ui","lastModifiedDate":"2023-09-25"},{"lineNumber":31,"author":{"gitId":"000verflow"},"content":" * @see Command","lastModifiedDate":"2023-09-25"},{"lineNumber":32,"author":{"gitId":"000verflow"},"content":" * @see Parser","lastModifiedDate":"2023-09-25"},{"lineNumber":33,"author":{"gitId":"000verflow"},"content":" *","lastModifiedDate":"2023-09-25"},{"lineNumber":34,"author":{"gitId":"000verflow"},"content":" * @author  Ashok Balaji","lastModifiedDate":"2023-09-25"},{"lineNumber":35,"author":{"gitId":"000verflow"},"content":" * @version 1.0","lastModifiedDate":"2023-09-25"},{"lineNumber":36,"author":{"gitId":"000verflow"},"content":" * @since   2023-09-25","lastModifiedDate":"2023-09-25"},{"lineNumber":37,"author":{"gitId":"000verflow"},"content":" */","lastModifiedDate":"2023-09-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":39,"author":{"gitId":"000verflow"},"content":"    private static Storage STORAGE;","lastModifiedDate":"2023-09-22"},{"lineNumber":40,"author":{"gitId":"000verflow"},"content":"    private static TaskList TASKS;","lastModifiedDate":"2023-09-22"},{"lineNumber":41,"author":{"gitId":"000verflow"},"content":"    private static Ui UI;","lastModifiedDate":"2023-09-22"},{"lineNumber":42,"author":{"gitId":"000verflow"},"content":"    public static String DATAPATH \u003d \".\\\\data\\\\history.txt\";","lastModifiedDate":"2023-10-03"},{"lineNumber":43,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":44,"author":{"gitId":"000verflow"},"content":"    /**","lastModifiedDate":"2023-09-25"},{"lineNumber":45,"author":{"gitId":"000verflow"},"content":"     * Constructs a new Duke object which initializes the user interface, storage, and task list.","lastModifiedDate":"2023-09-25"},{"lineNumber":46,"author":{"gitId":"000verflow"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":47,"author":{"gitId":"000verflow"},"content":"     * Attempts to load the task list from the specified file path. If the loading fails due to an","lastModifiedDate":"2023-09-25"},{"lineNumber":48,"author":{"gitId":"000verflow"},"content":"     * IOException, it shows a loading error and initializes an empty task list. If it fails due to a","lastModifiedDate":"2023-09-25"},{"lineNumber":49,"author":{"gitId":"000verflow"},"content":"     * DukeException, it shows an error message and initializes an empty task list.","lastModifiedDate":"2023-09-25"},{"lineNumber":50,"author":{"gitId":"000verflow"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":51,"author":{"gitId":"000verflow"},"content":"     *","lastModifiedDate":"2023-09-25"},{"lineNumber":52,"author":{"gitId":"000verflow"},"content":"     * @param filePath The file path where the task list is stored and from where it should be loaded.","lastModifiedDate":"2023-09-25"},{"lineNumber":53,"author":{"gitId":"000verflow"},"content":"     */","lastModifiedDate":"2023-09-25"},{"lineNumber":54,"author":{"gitId":"000verflow"},"content":"    public Duke(String filePath){","lastModifiedDate":"2023-09-22"},{"lineNumber":55,"author":{"gitId":"000verflow"},"content":"        UI \u003d new Ui();","lastModifiedDate":"2023-09-22"},{"lineNumber":56,"author":{"gitId":"000verflow"},"content":"        STORAGE \u003d new Storage(filePath);","lastModifiedDate":"2023-09-22"},{"lineNumber":57,"author":{"gitId":"000verflow"},"content":"        try {","lastModifiedDate":"2023-08-19"},{"lineNumber":58,"author":{"gitId":"000verflow"},"content":"            TASKS \u003d new TaskList(STORAGE.load());","lastModifiedDate":"2023-09-22"},{"lineNumber":59,"author":{"gitId":"000verflow"},"content":"        } catch (IOException ioEx) {","lastModifiedDate":"2023-09-22"},{"lineNumber":60,"author":{"gitId":"000verflow"},"content":"            UI.showLoadingError(DATAPATH);","lastModifiedDate":"2023-09-22"},{"lineNumber":61,"author":{"gitId":"000verflow"},"content":"            TASKS \u003d new TaskList();","lastModifiedDate":"2023-09-22"},{"lineNumber":62,"author":{"gitId":"000verflow"},"content":"        } catch (DukeException dukeEx) {","lastModifiedDate":"2023-09-22"},{"lineNumber":63,"author":{"gitId":"000verflow"},"content":"            UI.showError(dukeEx);","lastModifiedDate":"2023-09-22"},{"lineNumber":64,"author":{"gitId":"000verflow"},"content":"            System.out.println(\"Historical data load failed.\");","lastModifiedDate":"2023-09-22"},{"lineNumber":65,"author":{"gitId":"000verflow"},"content":"            TASKS \u003d new TaskList();","lastModifiedDate":"2023-09-22"},{"lineNumber":66,"author":{"gitId":"000verflow"},"content":"        }","lastModifiedDate":"2023-09-10"},{"lineNumber":67,"author":{"gitId":"000verflow"},"content":"    }","lastModifiedDate":"2023-09-10"},{"lineNumber":68,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":69,"author":{"gitId":"000verflow"},"content":"    /**","lastModifiedDate":"2023-09-25"},{"lineNumber":70,"author":{"gitId":"000verflow"},"content":"     * Starts the execution of Duke.","lastModifiedDate":"2023-09-25"},{"lineNumber":71,"author":{"gitId":"000verflow"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":72,"author":{"gitId":"000verflow"},"content":"     * Displays a welcome message and continuously reads and executes commands until an exit command is received.","lastModifiedDate":"2023-09-25"},{"lineNumber":73,"author":{"gitId":"000verflow"},"content":"     * After executing a command, it saves the current state of the task list. If a DukeException occurs during","lastModifiedDate":"2023-09-25"},{"lineNumber":74,"author":{"gitId":"000verflow"},"content":"     * the execution of a command, it shows an error message. If an IOException occurs during the saving of tasks,","lastModifiedDate":"2023-09-25"},{"lineNumber":75,"author":{"gitId":"000verflow"},"content":"     * it prints an error message and returns, effectively ending the program.","lastModifiedDate":"2023-09-25"},{"lineNumber":76,"author":{"gitId":"000verflow"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":77,"author":{"gitId":"000verflow"},"content":"     */","lastModifiedDate":"2023-09-25"},{"lineNumber":78,"author":{"gitId":"000verflow"},"content":"    public void run(){","lastModifiedDate":"2023-09-22"},{"lineNumber":79,"author":{"gitId":"000verflow"},"content":"        UI.showWelcomeMessage();","lastModifiedDate":"2023-09-22"},{"lineNumber":80,"author":{"gitId":"000verflow"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2023-09-22"},{"lineNumber":81,"author":{"gitId":"000verflow"},"content":"        while (!isExit) {","lastModifiedDate":"2023-09-22"},{"lineNumber":82,"author":{"gitId":"000verflow"},"content":"            try {","lastModifiedDate":"2023-09-16"},{"lineNumber":83,"author":{"gitId":"000verflow"},"content":"                String fullCommand \u003d UI.readCommand();","lastModifiedDate":"2023-09-22"},{"lineNumber":84,"author":{"gitId":"000verflow"},"content":"                UI.showLine();","lastModifiedDate":"2023-09-22"},{"lineNumber":85,"author":{"gitId":"000verflow"},"content":"                Command c \u003d Parser.parse(fullCommand);","lastModifiedDate":"2023-09-22"},{"lineNumber":86,"author":{"gitId":"000verflow"},"content":"                c.execute(TASKS);","lastModifiedDate":"2023-09-22"},{"lineNumber":87,"author":{"gitId":"000verflow"},"content":"                STORAGE.save(TASKS);","lastModifiedDate":"2023-09-22"},{"lineNumber":88,"author":{"gitId":"000verflow"},"content":"                isExit \u003d c.isExit();","lastModifiedDate":"2023-09-22"},{"lineNumber":89,"author":{"gitId":"000verflow"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-09-22"},{"lineNumber":90,"author":{"gitId":"000verflow"},"content":"                UI.showError(e);","lastModifiedDate":"2023-09-22"},{"lineNumber":91,"author":{"gitId":"000verflow"},"content":"            }catch (IOException IOEx) {","lastModifiedDate":"2023-09-16"},{"lineNumber":92,"author":{"gitId":"000verflow"},"content":"                System.out.println(\"Unable to open write handler @ \" + DATAPATH);","lastModifiedDate":"2023-09-22"},{"lineNumber":93,"author":{"gitId":"000verflow"},"content":"                return;","lastModifiedDate":"2023-09-16"},{"lineNumber":94,"author":{"gitId":"000verflow"},"content":"            } finally {","lastModifiedDate":"2023-09-22"},{"lineNumber":95,"author":{"gitId":"000verflow"},"content":"                UI.showLine();","lastModifiedDate":"2023-09-22"},{"lineNumber":96,"author":{"gitId":"000verflow"},"content":"            }","lastModifiedDate":"2023-09-16"},{"lineNumber":97,"author":{"gitId":"000verflow"},"content":"        }","lastModifiedDate":"2023-09-10"},{"lineNumber":98,"author":{"gitId":"000verflow"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":99,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":100,"author":{"gitId":"000verflow"},"content":"    public static void main(String[] args){","lastModifiedDate":"2023-09-22"},{"lineNumber":101,"author":{"gitId":"000verflow"},"content":"        new Duke(DATAPATH).run();","lastModifiedDate":"2023-09-22"},{"lineNumber":102,"author":{"gitId":"000verflow"},"content":"        UI.showExitMessage();","lastModifiedDate":"2023-09-22"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":104,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"},{"lineNumber":105,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-08-18"},{"lineNumber":106,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-08-18"}],"authorContributionMap":{"000verflow":103,"-":3}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"000verflow"},"content":"package duke;","lastModifiedDate":"2023-09-10"},{"lineNumber":2,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":3,"author":{"gitId":"000verflow"},"content":"public class DukeException extends Exception{","lastModifiedDate":"2023-09-10"},{"lineNumber":4,"author":{"gitId":"000verflow"},"content":"    protected String errorMessage;","lastModifiedDate":"2023-09-10"},{"lineNumber":5,"author":{"gitId":"000verflow"},"content":"    protected static String LINE_DIVIDER \u003d \"____________________________________________________________\";","lastModifiedDate":"2023-09-10"},{"lineNumber":6,"author":{"gitId":"000verflow"},"content":"    public DukeException(String errorMessage){","lastModifiedDate":"2023-09-10"},{"lineNumber":7,"author":{"gitId":"000verflow"},"content":"        this.errorMessage \u003d errorMessage;","lastModifiedDate":"2023-09-10"},{"lineNumber":8,"author":{"gitId":"000verflow"},"content":"    }","lastModifiedDate":"2023-09-10"},{"lineNumber":9,"author":{"gitId":"000verflow"},"content":"    @Override","lastModifiedDate":"2023-09-10"},{"lineNumber":10,"author":{"gitId":"000verflow"},"content":"    public String toString(){","lastModifiedDate":"2023-09-10"},{"lineNumber":11,"author":{"gitId":"000verflow"},"content":"        return String.format(\"%s\", errorMessage);","lastModifiedDate":"2023-09-22"},{"lineNumber":12,"author":{"gitId":"000verflow"},"content":"    }","lastModifiedDate":"2023-09-10"},{"lineNumber":13,"author":{"gitId":"000verflow"},"content":"}","lastModifiedDate":"2023-09-10"}],"authorContributionMap":{"000verflow":13}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"000verflow"},"content":"package duke;","lastModifiedDate":"2023-09-10"},{"lineNumber":2,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":3,"author":{"gitId":"000verflow"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-10-03"},{"lineNumber":4,"author":{"gitId":"000verflow"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-10-03"},{"lineNumber":5,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":6,"author":{"gitId":"000verflow"},"content":"public class Event extends Task{","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"000verflow"},"content":"    protected LocalDateTime start;","lastModifiedDate":"2023-10-03"},{"lineNumber":8,"author":{"gitId":"000verflow"},"content":"    protected LocalDateTime end;","lastModifiedDate":"2023-10-03"},{"lineNumber":9,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"000verflow"},"content":"    public Event(String description, LocalDateTime start, LocalDateTime end){","lastModifiedDate":"2023-10-03"},{"lineNumber":11,"author":{"gitId":"000verflow"},"content":"        super(description);","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"000verflow"},"content":"        this.start \u003d start;","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"000verflow"},"content":"        this.end \u003d end;","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"000verflow"},"content":"        this.taskType \u003d \"E\";","lastModifiedDate":"2023-09-16"},{"lineNumber":15,"author":{"gitId":"000verflow"},"content":"    }","lastModifiedDate":"2023-09-16"},{"lineNumber":16,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":17,"author":{"gitId":"000verflow"},"content":"    public LocalDateTime getStart(){","lastModifiedDate":"2023-10-03"},{"lineNumber":18,"author":{"gitId":"000verflow"},"content":"        return this.start;","lastModifiedDate":"2023-09-16"},{"lineNumber":19,"author":{"gitId":"000verflow"},"content":"    }","lastModifiedDate":"2023-09-16"},{"lineNumber":20,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":21,"author":{"gitId":"000verflow"},"content":"    public LocalDateTime getEnd(){","lastModifiedDate":"2023-10-03"},{"lineNumber":22,"author":{"gitId":"000verflow"},"content":"        return this.end;","lastModifiedDate":"2023-09-16"},{"lineNumber":23,"author":{"gitId":"000verflow"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"000verflow"},"content":"    @Override","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"000verflow"},"content":"    public String toString(){","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"000verflow"},"content":"        return String.format(\"[%s]%s (from: %s to: %s)\", this.taskType, super.toString(),","lastModifiedDate":"2023-10-03"},{"lineNumber":28,"author":{"gitId":"000verflow"},"content":"                this.start.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy h:mma\")),","lastModifiedDate":"2023-10-03"},{"lineNumber":29,"author":{"gitId":"000verflow"},"content":"                this.end.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy h:mma\")));","lastModifiedDate":"2023-10-03"},{"lineNumber":30,"author":{"gitId":"000verflow"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"000verflow"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"000verflow":31}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"000verflow"},"content":"package duke;","lastModifiedDate":"2023-09-22"},{"lineNumber":2,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":3,"author":{"gitId":"000verflow"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-09-22"},{"lineNumber":4,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":5,"author":{"gitId":"000verflow"},"content":"/**","lastModifiedDate":"2023-09-25"},{"lineNumber":6,"author":{"gitId":"000verflow"},"content":" * The {@code Parser} class is a utility class responsible for interpreting user inputs to create","lastModifiedDate":"2023-09-25"},{"lineNumber":7,"author":{"gitId":"000verflow"},"content":" * {@code Command} objects that can be executed by the application. The Parser class is designed","lastModifiedDate":"2023-09-25"},{"lineNumber":8,"author":{"gitId":"000verflow"},"content":" * to extract meaningful information, such as action commands and their arguments, from user-inputted strings.","lastModifiedDate":"2023-09-25"},{"lineNumber":9,"author":{"gitId":"000verflow"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":10,"author":{"gitId":"000verflow"},"content":" * The class is designed with a private constructor to prevent instantiation, reflecting its role as a utility class","lastModifiedDate":"2023-09-25"},{"lineNumber":11,"author":{"gitId":"000verflow"},"content":" * that does not maintain any state. The primary functionality is provided by the {@code parse} static method,","lastModifiedDate":"2023-09-25"},{"lineNumber":12,"author":{"gitId":"000verflow"},"content":" * which interprets the user input and returns an appropriate {@code Command} object.","lastModifiedDate":"2023-09-25"},{"lineNumber":13,"author":{"gitId":"000verflow"},"content":" * \u003c/p\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":14,"author":{"gitId":"000verflow"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":15,"author":{"gitId":"000verflow"},"content":" * The {@code Parser} class provides constants {@code FIRST_INDEX} and {@code SECOND_INDEX} representing the indices","lastModifiedDate":"2023-09-25"},{"lineNumber":16,"author":{"gitId":"000verflow"},"content":" * of the action command and arguments in the command string, respectively.","lastModifiedDate":"2023-09-25"},{"lineNumber":17,"author":{"gitId":"000verflow"},"content":" * \u003c/p\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":18,"author":{"gitId":"000verflow"},"content":" * \u003cul\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":19,"author":{"gitId":"000verflow"},"content":" *     \u003cli\u003e{@link #parse(String)} - Parses the given string command to create a new {@code Command} object.\u003c/li\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":20,"author":{"gitId":"000verflow"},"content":" * \u003c/ul\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":21,"author":{"gitId":"000verflow"},"content":" *","lastModifiedDate":"2023-09-25"},{"lineNumber":22,"author":{"gitId":"000verflow"},"content":" * @see Command","lastModifiedDate":"2023-09-25"},{"lineNumber":23,"author":{"gitId":"000verflow"},"content":" *","lastModifiedDate":"2023-09-25"},{"lineNumber":24,"author":{"gitId":"000verflow"},"content":" * @author  Ashok Balaji","lastModifiedDate":"2023-09-25"},{"lineNumber":25,"author":{"gitId":"000verflow"},"content":" * @version 1.0","lastModifiedDate":"2023-09-25"},{"lineNumber":26,"author":{"gitId":"000verflow"},"content":" * @since   2023-09-25","lastModifiedDate":"2023-09-25"},{"lineNumber":27,"author":{"gitId":"000verflow"},"content":" */","lastModifiedDate":"2023-09-25"},{"lineNumber":28,"author":{"gitId":"000verflow"},"content":"public class Parser {","lastModifiedDate":"2023-09-22"},{"lineNumber":29,"author":{"gitId":"000verflow"},"content":"    final static int FIRST_INDEX\u003d0;","lastModifiedDate":"2023-09-22"},{"lineNumber":30,"author":{"gitId":"000verflow"},"content":"    final static int SECOND_INDEX\u003d1;","lastModifiedDate":"2023-09-22"},{"lineNumber":31,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":32,"author":{"gitId":"000verflow"},"content":"    private Parser(){}","lastModifiedDate":"2023-09-22"},{"lineNumber":33,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":34,"author":{"gitId":"000verflow"},"content":"    /**","lastModifiedDate":"2023-09-25"},{"lineNumber":35,"author":{"gitId":"000verflow"},"content":"     * Parses the given string command to create a new Command object.","lastModifiedDate":"2023-09-25"},{"lineNumber":36,"author":{"gitId":"000verflow"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":37,"author":{"gitId":"000verflow"},"content":"     * The method takes a full command string, splits it into action command and arguments, and initializes a new","lastModifiedDate":"2023-09-25"},{"lineNumber":38,"author":{"gitId":"000verflow"},"content":"     * Command object with them. The action command is converted to lowercase to account for typing errors.","lastModifiedDate":"2023-09-25"},{"lineNumber":39,"author":{"gitId":"000verflow"},"content":"     * The action command represents the first word in the string, and the remaining words are considered as arguments.","lastModifiedDate":"2023-09-25"},{"lineNumber":40,"author":{"gitId":"000verflow"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":41,"author":{"gitId":"000verflow"},"content":"     *","lastModifiedDate":"2023-09-25"},{"lineNumber":42,"author":{"gitId":"000verflow"},"content":"     * @param fullCommand The full string command to be parsed.","lastModifiedDate":"2023-09-25"},{"lineNumber":43,"author":{"gitId":"000verflow"},"content":"     * @return A Command object initialized with the parsed action command and arguments.","lastModifiedDate":"2023-09-25"},{"lineNumber":44,"author":{"gitId":"000verflow"},"content":"     */","lastModifiedDate":"2023-09-25"},{"lineNumber":45,"author":{"gitId":"000verflow"},"content":"    public static Command parse(String fullCommand){","lastModifiedDate":"2023-09-22"},{"lineNumber":46,"author":{"gitId":"000verflow"},"content":"        String[] arguments \u003d fullCommand.split(\"\\\\s+\"); // split by space","lastModifiedDate":"2023-09-22"},{"lineNumber":47,"author":{"gitId":"000verflow"},"content":"        String actionCommand \u003d arguments[FIRST_INDEX];","lastModifiedDate":"2023-09-22"},{"lineNumber":48,"author":{"gitId":"000verflow"},"content":"        actionCommand \u003d actionCommand.toLowerCase(); // make sure all same case to account for typing error","lastModifiedDate":"2023-09-22"},{"lineNumber":49,"author":{"gitId":"000verflow"},"content":"        String[] newArguments \u003d Arrays.copyOfRange(arguments, SECOND_INDEX, arguments.length); // ignore command","lastModifiedDate":"2023-09-22"},{"lineNumber":50,"author":{"gitId":"000verflow"},"content":"        return new Command(actionCommand, newArguments);","lastModifiedDate":"2023-09-22"},{"lineNumber":51,"author":{"gitId":"000verflow"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":52,"author":{"gitId":"000verflow"},"content":"}","lastModifiedDate":"2023-09-22"}],"authorContributionMap":{"000verflow":52}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"000verflow"},"content":"package duke;","lastModifiedDate":"2023-09-22"},{"lineNumber":2,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":3,"author":{"gitId":"000verflow"},"content":"import java.io.File;","lastModifiedDate":"2023-09-22"},{"lineNumber":4,"author":{"gitId":"000verflow"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-09-22"},{"lineNumber":5,"author":{"gitId":"000verflow"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-22"},{"lineNumber":6,"author":{"gitId":"000verflow"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-22"},{"lineNumber":7,"author":{"gitId":"000verflow"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-09-22"},{"lineNumber":8,"author":{"gitId":"000verflow"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-22"},{"lineNumber":9,"author":{"gitId":"000verflow"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-09-22"},{"lineNumber":10,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":11,"author":{"gitId":"000verflow"},"content":"/**","lastModifiedDate":"2023-09-25"},{"lineNumber":12,"author":{"gitId":"000verflow"},"content":" * The {@code Storage} class manages the loading and saving of tasks to and from a data file.","lastModifiedDate":"2023-09-25"},{"lineNumber":13,"author":{"gitId":"000verflow"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":14,"author":{"gitId":"000verflow"},"content":" * This class handles interactions with a specified file, allowing the user to load tasks from it and save tasks to it.","lastModifiedDate":"2023-09-25"},{"lineNumber":15,"author":{"gitId":"000verflow"},"content":" * The {@code load} method reads tasks from the file, and the {@code save} method writes tasks to the file, both using","lastModifiedDate":"2023-09-25"},{"lineNumber":16,"author":{"gitId":"000verflow"},"content":" * specific string formats to represent different task types.","lastModifiedDate":"2023-09-25"},{"lineNumber":17,"author":{"gitId":"000verflow"},"content":" * \u003c/p\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":18,"author":{"gitId":"000verflow"},"content":" * Tasks are represented differently based on their types:","lastModifiedDate":"2023-09-25"},{"lineNumber":19,"author":{"gitId":"000verflow"},"content":" * \u003cul\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":20,"author":{"gitId":"000verflow"},"content":" *     \u003cli\u003e\"T\" for ToDo.\u003c/li\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":21,"author":{"gitId":"000verflow"},"content":" *     \u003cli\u003e\"D\" for Deadline along with end time.\u003c/li\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":22,"author":{"gitId":"000verflow"},"content":" *     \u003cli\u003e\"E\" for Event along with start and end times.\u003c/li\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":23,"author":{"gitId":"000verflow"},"content":" * \u003c/ul\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":24,"author":{"gitId":"000verflow"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":25,"author":{"gitId":"000verflow"},"content":" * The data file is located at the path provided during the instantiation of the {@code Storage} object. If no file exists","lastModifiedDate":"2023-09-25"},{"lineNumber":26,"author":{"gitId":"000verflow"},"content":" * at the given path when loading tasks, a new file will be created at the same location.","lastModifiedDate":"2023-09-25"},{"lineNumber":27,"author":{"gitId":"000verflow"},"content":" * \u003c/p\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":28,"author":{"gitId":"000verflow"},"content":" *","lastModifiedDate":"2023-09-25"},{"lineNumber":29,"author":{"gitId":"000verflow"},"content":" * Key Methods Include:","lastModifiedDate":"2023-09-25"},{"lineNumber":30,"author":{"gitId":"000verflow"},"content":" * \u003cul\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":31,"author":{"gitId":"000verflow"},"content":" *     \u003cli\u003e{@link #load()} - Loads tasks from the data file into a list and returns it.\u003c/li\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":32,"author":{"gitId":"000verflow"},"content":" *     \u003cli\u003e{@link #save(TaskList)} - Saves tasks from the given TaskList to the data file.\u003c/li\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":33,"author":{"gitId":"000verflow"},"content":" * \u003c/ul\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":34,"author":{"gitId":"000verflow"},"content":" *","lastModifiedDate":"2023-09-25"},{"lineNumber":35,"author":{"gitId":"000verflow"},"content":" * @author  Ashok Balaji","lastModifiedDate":"2023-09-25"},{"lineNumber":36,"author":{"gitId":"000verflow"},"content":" * @version 1.0","lastModifiedDate":"2023-09-25"},{"lineNumber":37,"author":{"gitId":"000verflow"},"content":" * @since   2023-09-25","lastModifiedDate":"2023-09-25"},{"lineNumber":38,"author":{"gitId":"000verflow"},"content":" */","lastModifiedDate":"2023-09-25"},{"lineNumber":39,"author":{"gitId":"000verflow"},"content":"public class Storage {","lastModifiedDate":"2023-09-22"},{"lineNumber":40,"author":{"gitId":"000verflow"},"content":"    public static int FIRST_INDEX\u003d0;","lastModifiedDate":"2023-09-22"},{"lineNumber":41,"author":{"gitId":"000verflow"},"content":"    public static int SECOND_INDEX\u003d1;","lastModifiedDate":"2023-09-22"},{"lineNumber":42,"author":{"gitId":"000verflow"},"content":"    public static int THIRD_INDEX\u003d2;","lastModifiedDate":"2023-09-22"},{"lineNumber":43,"author":{"gitId":"000verflow"},"content":"    public static int FOURTH_INDEX\u003d3;","lastModifiedDate":"2023-09-22"},{"lineNumber":44,"author":{"gitId":"000verflow"},"content":"    public static int FIFTH_INDEX\u003d4;","lastModifiedDate":"2023-09-22"},{"lineNumber":45,"author":{"gitId":"000verflow"},"content":"    protected File dataFile;","lastModifiedDate":"2023-09-22"},{"lineNumber":46,"author":{"gitId":"000verflow"},"content":"    protected String filePath;","lastModifiedDate":"2023-09-22"},{"lineNumber":47,"author":{"gitId":"000verflow"},"content":"    protected FileWriter fw;","lastModifiedDate":"2023-09-22"},{"lineNumber":48,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":49,"author":{"gitId":"000verflow"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2023-09-22"},{"lineNumber":50,"author":{"gitId":"000verflow"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-09-22"},{"lineNumber":51,"author":{"gitId":"000verflow"},"content":"        this.dataFile \u003d new File(filePath);","lastModifiedDate":"2023-09-22"},{"lineNumber":52,"author":{"gitId":"000verflow"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":53,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":54,"author":{"gitId":"000verflow"},"content":"    /**","lastModifiedDate":"2023-09-25"},{"lineNumber":55,"author":{"gitId":"000verflow"},"content":"     * Loads tasks from the data file and returns a list of tasks.","lastModifiedDate":"2023-09-25"},{"lineNumber":56,"author":{"gitId":"000verflow"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":57,"author":{"gitId":"000verflow"},"content":"     * If the data file does not exist, it creates a new one and prints a message indicating this.","lastModifiedDate":"2023-09-25"},{"lineNumber":58,"author":{"gitId":"000verflow"},"content":"     * If the data file does exist, it reads the file line by line, parsing each line to create the corresponding task object","lastModifiedDate":"2023-09-25"},{"lineNumber":59,"author":{"gitId":"000verflow"},"content":"     * and adds it to the task list. If a task is marked as done, it updates the task object accordingly.","lastModifiedDate":"2023-09-25"},{"lineNumber":60,"author":{"gitId":"000verflow"},"content":"     * If the line represents a deadline, it also parses the deadline end time.","lastModifiedDate":"2023-09-25"},{"lineNumber":61,"author":{"gitId":"000verflow"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":62,"author":{"gitId":"000verflow"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":63,"author":{"gitId":"000verflow"},"content":"     * The tasks are represented with different indicators:","lastModifiedDate":"2023-09-25"},{"lineNumber":64,"author":{"gitId":"000verflow"},"content":"     * \"T\" for ToDo,","lastModifiedDate":"2023-09-25"},{"lineNumber":65,"author":{"gitId":"000verflow"},"content":"     * \"D\" for Deadline,","lastModifiedDate":"2023-09-25"},{"lineNumber":66,"author":{"gitId":"000verflow"},"content":"     * \"E\" for Event.","lastModifiedDate":"2023-09-25"},{"lineNumber":67,"author":{"gitId":"000verflow"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":68,"author":{"gitId":"000verflow"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":69,"author":{"gitId":"000verflow"},"content":"     * It prints a message indicating the successful loading of historical data if any data is present in the file.","lastModifiedDate":"2023-09-25"},{"lineNumber":70,"author":{"gitId":"000verflow"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":71,"author":{"gitId":"000verflow"},"content":"     *","lastModifiedDate":"2023-09-25"},{"lineNumber":72,"author":{"gitId":"000verflow"},"content":"     * @return {@code ArrayList\u003cTask\u003e} A list of tasks loaded from the data file.","lastModifiedDate":"2023-09-25"},{"lineNumber":73,"author":{"gitId":"000verflow"},"content":"     * @throws IOException If an I/O error occurs when creating a new file or reading from the existing file.","lastModifiedDate":"2023-09-25"},{"lineNumber":74,"author":{"gitId":"000verflow"},"content":"     * @throws DukeException If there is a DateTimeParseException while parsing the deadline end time, or if the data file contains corrupt data.","lastModifiedDate":"2023-09-25"},{"lineNumber":75,"author":{"gitId":"000verflow"},"content":"     */","lastModifiedDate":"2023-09-25"},{"lineNumber":76,"author":{"gitId":"000verflow"},"content":"    public ArrayList\u003cTask\u003e load() throws IOException, DukeException {","lastModifiedDate":"2023-09-22"},{"lineNumber":77,"author":{"gitId":"000verflow"},"content":"        ArrayList\u003cTask\u003e TASKS \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-09-22"},{"lineNumber":78,"author":{"gitId":"000verflow"},"content":"        if (this.dataFile.createNewFile()){","lastModifiedDate":"2023-09-22"},{"lineNumber":79,"author":{"gitId":"000verflow"},"content":"            System.out.println(\"Data file not found @ \" + this.filePath +","lastModifiedDate":"2023-09-22"},{"lineNumber":80,"author":{"gitId":"000verflow"},"content":"                    \"\\nCreating new data file @ \" + this.filePath);","lastModifiedDate":"2023-09-22"},{"lineNumber":81,"author":{"gitId":"000verflow"},"content":"        }else{","lastModifiedDate":"2023-09-22"},{"lineNumber":82,"author":{"gitId":"000verflow"},"content":"            Scanner dataScanner \u003d new Scanner(dataFile);","lastModifiedDate":"2023-09-22"},{"lineNumber":83,"author":{"gitId":"000verflow"},"content":"            while(dataScanner.hasNext()){","lastModifiedDate":"2023-09-22"},{"lineNumber":84,"author":{"gitId":"000verflow"},"content":"                String dataLine \u003d  dataScanner.nextLine();","lastModifiedDate":"2023-09-22"},{"lineNumber":85,"author":{"gitId":"000verflow"},"content":"                String[] splitLineArguments \u003d dataLine.split(\" \\\\| \");","lastModifiedDate":"2023-09-22"},{"lineNumber":86,"author":{"gitId":"000verflow"},"content":"                switch (splitLineArguments[FIRST_INDEX]) {","lastModifiedDate":"2023-09-22"},{"lineNumber":87,"author":{"gitId":"000verflow"},"content":"                    case \"T\":","lastModifiedDate":"2023-09-22"},{"lineNumber":88,"author":{"gitId":"000verflow"},"content":"                        ToDo newTodo \u003d new ToDo(splitLineArguments[THIRD_INDEX]);","lastModifiedDate":"2023-09-22"},{"lineNumber":89,"author":{"gitId":"000verflow"},"content":"                        TASKS.add(newTodo);","lastModifiedDate":"2023-09-22"},{"lineNumber":90,"author":{"gitId":"000verflow"},"content":"                        if (splitLineArguments[SECOND_INDEX].equals(\"1\")){","lastModifiedDate":"2023-09-22"},{"lineNumber":91,"author":{"gitId":"000verflow"},"content":"                            newTodo.markAsDone();","lastModifiedDate":"2023-09-22"},{"lineNumber":92,"author":{"gitId":"000verflow"},"content":"                        }","lastModifiedDate":"2023-09-22"},{"lineNumber":93,"author":{"gitId":"000verflow"},"content":"                        break;","lastModifiedDate":"2023-09-22"},{"lineNumber":94,"author":{"gitId":"000verflow"},"content":"                    case \"D\":","lastModifiedDate":"2023-09-22"},{"lineNumber":95,"author":{"gitId":"000verflow"},"content":"                        try {","lastModifiedDate":"2023-09-22"},{"lineNumber":96,"author":{"gitId":"000verflow"},"content":"                            LocalDateTime deadlineEndParsed \u003d LocalDateTime.parse(splitLineArguments[FOURTH_INDEX]);","lastModifiedDate":"2023-09-22"},{"lineNumber":97,"author":{"gitId":"000verflow"},"content":"                            Deadline newDeadline \u003d new Deadline(splitLineArguments[THIRD_INDEX],","lastModifiedDate":"2023-09-22"},{"lineNumber":98,"author":{"gitId":"000verflow"},"content":"                                    deadlineEndParsed);","lastModifiedDate":"2023-09-22"},{"lineNumber":99,"author":{"gitId":"000verflow"},"content":"                            TASKS.add(newDeadline);","lastModifiedDate":"2023-09-22"},{"lineNumber":100,"author":{"gitId":"000verflow"},"content":"                            if (splitLineArguments[SECOND_INDEX].equals(\"1\")){","lastModifiedDate":"2023-09-22"},{"lineNumber":101,"author":{"gitId":"000verflow"},"content":"                                newDeadline.markAsDone();","lastModifiedDate":"2023-09-22"},{"lineNumber":102,"author":{"gitId":"000verflow"},"content":"                            }","lastModifiedDate":"2023-09-22"},{"lineNumber":103,"author":{"gitId":"000verflow"},"content":"                        } catch (DateTimeParseException dtEx){","lastModifiedDate":"2023-09-22"},{"lineNumber":104,"author":{"gitId":"000verflow"},"content":"                            throw new DukeException(\"Invalid date format in your load file bro... \");","lastModifiedDate":"2023-09-22"},{"lineNumber":105,"author":{"gitId":"000verflow"},"content":"                        }","lastModifiedDate":"2023-09-22"},{"lineNumber":106,"author":{"gitId":"000verflow"},"content":"                        break;","lastModifiedDate":"2023-09-22"},{"lineNumber":107,"author":{"gitId":"000verflow"},"content":"                    case \"E\":","lastModifiedDate":"2023-09-22"},{"lineNumber":108,"author":{"gitId":"000verflow"},"content":"                        LocalDateTime eventStartParsed \u003d LocalDateTime.parse(splitLineArguments[FOURTH_INDEX]);","lastModifiedDate":"2023-10-03"},{"lineNumber":109,"author":{"gitId":"000verflow"},"content":"                        LocalDateTime eventEndParsed \u003d LocalDateTime.parse(splitLineArguments[FIFTH_INDEX]);","lastModifiedDate":"2023-10-03"},{"lineNumber":110,"author":{"gitId":"000verflow"},"content":"                        Event newEvent \u003d new Event(splitLineArguments[THIRD_INDEX], eventStartParsed,","lastModifiedDate":"2023-10-03"},{"lineNumber":111,"author":{"gitId":"000verflow"},"content":"                                eventEndParsed);","lastModifiedDate":"2023-10-03"},{"lineNumber":112,"author":{"gitId":"000verflow"},"content":"                        TASKS.add(newEvent);","lastModifiedDate":"2023-09-22"},{"lineNumber":113,"author":{"gitId":"000verflow"},"content":"                        if (splitLineArguments[SECOND_INDEX].equals(\"1\")){","lastModifiedDate":"2023-09-22"},{"lineNumber":114,"author":{"gitId":"000verflow"},"content":"                            newEvent.markAsDone();","lastModifiedDate":"2023-09-22"},{"lineNumber":115,"author":{"gitId":"000verflow"},"content":"                        }","lastModifiedDate":"2023-09-22"},{"lineNumber":116,"author":{"gitId":"000verflow"},"content":"                        break;","lastModifiedDate":"2023-09-22"},{"lineNumber":117,"author":{"gitId":"000verflow"},"content":"                    default:","lastModifiedDate":"2023-09-22"},{"lineNumber":118,"author":{"gitId":"000verflow"},"content":"                        throw new DukeException(\"Corrupt data bro..\");","lastModifiedDate":"2023-09-22"},{"lineNumber":119,"author":{"gitId":"000verflow"},"content":"                }","lastModifiedDate":"2023-09-22"},{"lineNumber":120,"author":{"gitId":"000verflow"},"content":"            }","lastModifiedDate":"2023-09-22"},{"lineNumber":121,"author":{"gitId":"000verflow"},"content":"            System.out.println(\"Loaded historical data successfully.\");","lastModifiedDate":"2023-09-22"},{"lineNumber":122,"author":{"gitId":"000verflow"},"content":"        }","lastModifiedDate":"2023-09-22"},{"lineNumber":123,"author":{"gitId":"000verflow"},"content":"        return TASKS;","lastModifiedDate":"2023-09-22"},{"lineNumber":124,"author":{"gitId":"000verflow"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":125,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":126,"author":{"gitId":"000verflow"},"content":"    /**","lastModifiedDate":"2023-09-25"},{"lineNumber":127,"author":{"gitId":"000verflow"},"content":"     * Saves the tasks from the given TaskList to the data file represented by the filePath.","lastModifiedDate":"2023-09-25"},{"lineNumber":128,"author":{"gitId":"000verflow"},"content":"     * This method iterates over each task in the TaskList and converts it to a formatted string representation,","lastModifiedDate":"2023-09-25"},{"lineNumber":129,"author":{"gitId":"000verflow"},"content":"     * which is then written to the data file. The tasks are saved in different formats depending on their type.","lastModifiedDate":"2023-09-25"},{"lineNumber":130,"author":{"gitId":"000verflow"},"content":"     * \u003cul\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":131,"author":{"gitId":"000verflow"},"content":"     *     \u003cli\u003eToDo tasks are saved in the format: \"T | completionStatus | description\"\u003c/li\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":132,"author":{"gitId":"000verflow"},"content":"     *     \u003cli\u003eDeadline tasks are saved in the format: \"D | completionStatus | description | by\"\u003c/li\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":133,"author":{"gitId":"000verflow"},"content":"     *     \u003cli\u003eEvent tasks are saved in the format: \"E | completionStatus | description | start | end\"\u003c/li\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":134,"author":{"gitId":"000verflow"},"content":"     * \u003c/ul\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":135,"author":{"gitId":"000verflow"},"content":"     * After writing all tasks to the file, it closes the FileWriter.","lastModifiedDate":"2023-09-25"},{"lineNumber":136,"author":{"gitId":"000verflow"},"content":"     *","lastModifiedDate":"2023-09-25"},{"lineNumber":137,"author":{"gitId":"000verflow"},"content":"     * @param TASKS The TaskList containing tasks to be saved.","lastModifiedDate":"2023-09-25"},{"lineNumber":138,"author":{"gitId":"000verflow"},"content":"     * @throws IOException If an I/O error occurs writing to the file.","lastModifiedDate":"2023-09-25"},{"lineNumber":139,"author":{"gitId":"000verflow"},"content":"     * @throws DukeException If there is an error in the task saving process due to corrupt data or unexpected input.","lastModifiedDate":"2023-09-25"},{"lineNumber":140,"author":{"gitId":"000verflow"},"content":"     */","lastModifiedDate":"2023-09-25"},{"lineNumber":141,"author":{"gitId":"000verflow"},"content":"    public void save(TaskList TASKS) throws IOException, DukeException{","lastModifiedDate":"2023-09-22"},{"lineNumber":142,"author":{"gitId":"000verflow"},"content":"        FileWriter FW \u003d new FileWriter(this.filePath);","lastModifiedDate":"2023-09-22"},{"lineNumber":143,"author":{"gitId":"000verflow"},"content":"        ArrayList\u003cTask\u003e AL \u003d TASKS.getArrayList();","lastModifiedDate":"2023-09-22"},{"lineNumber":144,"author":{"gitId":"000verflow"},"content":"        for (Task taskToSave : AL){","lastModifiedDate":"2023-09-22"},{"lineNumber":145,"author":{"gitId":"000verflow"},"content":"            String taskSaveFormat \u003d String.format(\"%s | %d | \" , taskToSave.getTaskType(),","lastModifiedDate":"2023-09-22"},{"lineNumber":146,"author":{"gitId":"000verflow"},"content":"                    taskToSave.getCompletionStatus() ? 1:0);","lastModifiedDate":"2023-09-22"},{"lineNumber":147,"author":{"gitId":"000verflow"},"content":"            if (taskToSave.getTaskType().equals(\"T\")){","lastModifiedDate":"2023-09-22"},{"lineNumber":148,"author":{"gitId":"000verflow"},"content":"                ToDo todoToSave \u003d (ToDo) taskToSave;","lastModifiedDate":"2023-09-22"},{"lineNumber":149,"author":{"gitId":"000verflow"},"content":"                taskSaveFormat \u003d  String.format(\"%s%s\\n\",taskSaveFormat,todoToSave.description);","lastModifiedDate":"2023-09-22"},{"lineNumber":150,"author":{"gitId":"000verflow"},"content":"            } else if (taskToSave.getTaskType().equals(\"D\")) {","lastModifiedDate":"2023-09-22"},{"lineNumber":151,"author":{"gitId":"000verflow"},"content":"                Deadline deadlineToSave \u003d (Deadline) taskToSave;","lastModifiedDate":"2023-09-22"},{"lineNumber":152,"author":{"gitId":"000verflow"},"content":"                taskSaveFormat \u003d String.format(\"%s%s | %s\\n\",taskSaveFormat,deadlineToSave.description,","lastModifiedDate":"2023-09-22"},{"lineNumber":153,"author":{"gitId":"000verflow"},"content":"                        deadlineToSave.getBy());","lastModifiedDate":"2023-09-22"},{"lineNumber":154,"author":{"gitId":"000verflow"},"content":"            } else {","lastModifiedDate":"2023-09-22"},{"lineNumber":155,"author":{"gitId":"000verflow"},"content":"                Event eventToSave \u003d (Event) taskToSave;","lastModifiedDate":"2023-09-22"},{"lineNumber":156,"author":{"gitId":"000verflow"},"content":"                taskSaveFormat \u003d String.format(\"%s%s | %s | %s\\n\", taskSaveFormat, eventToSave.description,","lastModifiedDate":"2023-09-22"},{"lineNumber":157,"author":{"gitId":"000verflow"},"content":"                        eventToSave.getStart(), eventToSave.getEnd());","lastModifiedDate":"2023-09-22"},{"lineNumber":158,"author":{"gitId":"000verflow"},"content":"            }","lastModifiedDate":"2023-09-22"},{"lineNumber":159,"author":{"gitId":"000verflow"},"content":"            FW.write(taskSaveFormat);","lastModifiedDate":"2023-09-22"},{"lineNumber":160,"author":{"gitId":"000verflow"},"content":"        }","lastModifiedDate":"2023-09-22"},{"lineNumber":161,"author":{"gitId":"000verflow"},"content":"        FW.close();","lastModifiedDate":"2023-09-22"},{"lineNumber":162,"author":{"gitId":"000verflow"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":163,"author":{"gitId":"000verflow"},"content":"}","lastModifiedDate":"2023-09-22"}],"authorContributionMap":{"000verflow":163}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"000verflow"},"content":"package duke;","lastModifiedDate":"2023-09-10"},{"lineNumber":2,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":3,"author":{"gitId":"000verflow"},"content":"/**","lastModifiedDate":"2023-09-25"},{"lineNumber":4,"author":{"gitId":"000verflow"},"content":" * The {@code Task} class represents a task with a description and a completion status.","lastModifiedDate":"2023-09-25"},{"lineNumber":5,"author":{"gitId":"000verflow"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":6,"author":{"gitId":"000verflow"},"content":" * Each task has a description detailing what the task is about, and a boolean completion status indicating whether the task is done.","lastModifiedDate":"2023-09-25"},{"lineNumber":7,"author":{"gitId":"000verflow"},"content":" * The {@code toString} method provides a string representation of the task, indicating its completion status and description.","lastModifiedDate":"2023-09-25"},{"lineNumber":8,"author":{"gitId":"000verflow"},"content":" * \u003c/p\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":9,"author":{"gitId":"000verflow"},"content":" *","lastModifiedDate":"2023-09-25"},{"lineNumber":10,"author":{"gitId":"000verflow"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":11,"author":{"gitId":"000verflow"},"content":" * This class serves as the base class for different types of tasks that may have additional attributes and behaviors,","lastModifiedDate":"2023-09-25"},{"lineNumber":12,"author":{"gitId":"000verflow"},"content":" * and it is designed to be extended by other specialized task classes.","lastModifiedDate":"2023-09-25"},{"lineNumber":13,"author":{"gitId":"000verflow"},"content":" * \u003c/p\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":14,"author":{"gitId":"000verflow"},"content":" *","lastModifiedDate":"2023-09-25"},{"lineNumber":15,"author":{"gitId":"000verflow"},"content":" * Key Methods Include:","lastModifiedDate":"2023-09-25"},{"lineNumber":16,"author":{"gitId":"000verflow"},"content":" * \u003cul\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":17,"author":{"gitId":"000verflow"},"content":" *     \u003cli\u003e{@link #markAsDone()} - Marks the task as done.\u003c/li\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":18,"author":{"gitId":"000verflow"},"content":" *     \u003cli\u003e{@link #markAsUndone()} - Marks the task as undone.\u003c/li\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":19,"author":{"gitId":"000verflow"},"content":" *     \u003cli\u003e{@link #getCompletionStatus()} - Retrieves the completion status of the task.\u003c/li\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":20,"author":{"gitId":"000verflow"},"content":" *     \u003cli\u003e{@link #getDescription()} - Retrieves the description of the task.\u003c/li\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":21,"author":{"gitId":"000verflow"},"content":" *     \u003cli\u003e{@link #getTaskType()} - (Presumably) Retrieves the type of the task. However, the implementation is not provided here.\u003c/li\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":22,"author":{"gitId":"000verflow"},"content":" *     \u003cli\u003e{@link #toString()} - Provides a string representation of the task.\u003c/li\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":23,"author":{"gitId":"000verflow"},"content":" * \u003c/ul\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":24,"author":{"gitId":"000verflow"},"content":" *","lastModifiedDate":"2023-09-25"},{"lineNumber":25,"author":{"gitId":"000verflow"},"content":" * @author  Ashok Balaji","lastModifiedDate":"2023-09-25"},{"lineNumber":26,"author":{"gitId":"000verflow"},"content":" * @version 1.0","lastModifiedDate":"2023-09-25"},{"lineNumber":27,"author":{"gitId":"000verflow"},"content":" * @since   2023-09-25","lastModifiedDate":"2023-09-25"},{"lineNumber":28,"author":{"gitId":"000verflow"},"content":" */","lastModifiedDate":"2023-09-25"},{"lineNumber":29,"author":{"gitId":"000verflow"},"content":"public class Task {","lastModifiedDate":"2023-08-19"},{"lineNumber":30,"author":{"gitId":"000verflow"},"content":"    protected String description;","lastModifiedDate":"2023-08-19"},{"lineNumber":31,"author":{"gitId":"000verflow"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-08-19"},{"lineNumber":32,"author":{"gitId":"000verflow"},"content":"    protected String taskType;","lastModifiedDate":"2023-09-16"},{"lineNumber":33,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":34,"author":{"gitId":"000verflow"},"content":"    public Task(String description) {","lastModifiedDate":"2023-08-19"},{"lineNumber":35,"author":{"gitId":"000verflow"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-19"},{"lineNumber":36,"author":{"gitId":"000verflow"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-19"},{"lineNumber":37,"author":{"gitId":"000verflow"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":38,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":39,"author":{"gitId":"000verflow"},"content":"    public String getDescription(){","lastModifiedDate":"2023-09-22"},{"lineNumber":40,"author":{"gitId":"000verflow"},"content":"        return this.description;","lastModifiedDate":"2023-09-22"},{"lineNumber":41,"author":{"gitId":"000verflow"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":42,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":43,"author":{"gitId":"000verflow"},"content":"    public void markAsDone(){","lastModifiedDate":"2023-08-19"},{"lineNumber":44,"author":{"gitId":"000verflow"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-08-19"},{"lineNumber":45,"author":{"gitId":"000verflow"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":46,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"000verflow"},"content":"    public void markAsUndone(){","lastModifiedDate":"2023-08-19"},{"lineNumber":48,"author":{"gitId":"000verflow"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-19"},{"lineNumber":49,"author":{"gitId":"000verflow"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":50,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":51,"author":{"gitId":"000verflow"},"content":"    public boolean getCompletionStatus(){","lastModifiedDate":"2023-09-16"},{"lineNumber":52,"author":{"gitId":"000verflow"},"content":"        return this.isDone;","lastModifiedDate":"2023-09-16"},{"lineNumber":53,"author":{"gitId":"000verflow"},"content":"    }","lastModifiedDate":"2023-09-16"},{"lineNumber":54,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":55,"author":{"gitId":"000verflow"},"content":"    public String getTaskType(){","lastModifiedDate":"2023-09-16"},{"lineNumber":56,"author":{"gitId":"000verflow"},"content":"        return this.taskType;","lastModifiedDate":"2023-09-16"},{"lineNumber":57,"author":{"gitId":"000verflow"},"content":"    }","lastModifiedDate":"2023-09-16"},{"lineNumber":58,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":59,"author":{"gitId":"000verflow"},"content":"    @Override","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"000verflow"},"content":"    public String toString(){","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"000verflow"},"content":"        return \"[\" + (isDone ? \"X\" : \" \") + \"] \" + description; // mark done task with X","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"000verflow"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"000verflow"},"content":"}","lastModifiedDate":"2023-08-19"}],"authorContributionMap":{"000verflow":64}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"000verflow"},"content":"package duke;","lastModifiedDate":"2023-09-22"},{"lineNumber":2,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":3,"author":{"gitId":"000verflow"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-22"},{"lineNumber":4,"author":{"gitId":"000verflow"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-09-22"},{"lineNumber":5,"author":{"gitId":"000verflow"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-09-22"},{"lineNumber":6,"author":{"gitId":"000verflow"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-22"},{"lineNumber":7,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":8,"author":{"gitId":"000verflow"},"content":"public class TaskList {","lastModifiedDate":"2023-09-22"},{"lineNumber":9,"author":{"gitId":"000verflow"},"content":"    public static int FIRST_INDEX\u003d0;","lastModifiedDate":"2023-09-22"},{"lineNumber":10,"author":{"gitId":"000verflow"},"content":"    public static int SECOND_INDEX\u003d1;","lastModifiedDate":"2023-09-22"},{"lineNumber":11,"author":{"gitId":"000verflow"},"content":"    protected ArrayList\u003cTask\u003e TASKS;","lastModifiedDate":"2023-09-22"},{"lineNumber":12,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":13,"author":{"gitId":"000verflow"},"content":"    public TaskList() {","lastModifiedDate":"2023-09-22"},{"lineNumber":14,"author":{"gitId":"000verflow"},"content":"        this.TASKS \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-09-22"},{"lineNumber":15,"author":{"gitId":"000verflow"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":16,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":17,"author":{"gitId":"000verflow"},"content":"    public TaskList(ArrayList\u003cTask\u003e AL) {","lastModifiedDate":"2023-09-22"},{"lineNumber":18,"author":{"gitId":"000verflow"},"content":"        this.TASKS \u003d AL;","lastModifiedDate":"2023-09-22"},{"lineNumber":19,"author":{"gitId":"000verflow"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":20,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":21,"author":{"gitId":"000verflow"},"content":"    public ArrayList\u003cTask\u003e getArrayList(){","lastModifiedDate":"2023-09-22"},{"lineNumber":22,"author":{"gitId":"000verflow"},"content":"        return this.TASKS;","lastModifiedDate":"2023-09-22"},{"lineNumber":23,"author":{"gitId":"000verflow"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":24,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":25,"author":{"gitId":"000verflow"},"content":"    /**","lastModifiedDate":"2023-09-25"},{"lineNumber":26,"author":{"gitId":"000verflow"},"content":"     * Adds a new ToDo task to the task list with the specified arguments.","lastModifiedDate":"2023-09-25"},{"lineNumber":27,"author":{"gitId":"000verflow"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":28,"author":{"gitId":"000verflow"},"content":"     * This method creates a new ToDo object with the description provided in the arguments array.","lastModifiedDate":"2023-09-25"},{"lineNumber":29,"author":{"gitId":"000verflow"},"content":"     * If no argument is provided for the description, it throws a DukeException.","lastModifiedDate":"2023-09-25"},{"lineNumber":30,"author":{"gitId":"000verflow"},"content":"     * After the creation of the ToDo object, it is added to the task list, and a remark is printed indicating the task has been added.","lastModifiedDate":"2023-09-25"},{"lineNumber":31,"author":{"gitId":"000verflow"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":32,"author":{"gitId":"000verflow"},"content":"     *","lastModifiedDate":"2023-09-25"},{"lineNumber":33,"author":{"gitId":"000verflow"},"content":"     * @param arguments An array of Strings containing the description for the todo to be added.","lastModifiedDate":"2023-09-25"},{"lineNumber":34,"author":{"gitId":"000verflow"},"content":"     * It can contain multiple elements, which will be joined to form the task description.","lastModifiedDate":"2023-09-25"},{"lineNumber":35,"author":{"gitId":"000verflow"},"content":"     * @throws DukeException If the arguments provided are empty, indicating that no description has been provided for the todo.","lastModifiedDate":"2023-09-25"},{"lineNumber":36,"author":{"gitId":"000verflow"},"content":"     */","lastModifiedDate":"2023-09-25"},{"lineNumber":37,"author":{"gitId":"000verflow"},"content":"    public void addTodoInList(String[] arguments) throws DukeException{","lastModifiedDate":"2023-09-22"},{"lineNumber":38,"author":{"gitId":"000verflow"},"content":"        if (arguments.length \u003d\u003d 0){ // empty argument","lastModifiedDate":"2023-09-22"},{"lineNumber":39,"author":{"gitId":"000verflow"},"content":"            throw new DukeException(\"The description of a todo cannot be empty!\");","lastModifiedDate":"2023-09-22"},{"lineNumber":40,"author":{"gitId":"000verflow"},"content":"        }","lastModifiedDate":"2023-09-22"},{"lineNumber":41,"author":{"gitId":"000verflow"},"content":"        String taskDescription \u003d String.join(\" \", arguments);","lastModifiedDate":"2023-09-22"},{"lineNumber":42,"author":{"gitId":"000verflow"},"content":"        ToDo newToDo \u003d new ToDo(taskDescription);","lastModifiedDate":"2023-09-22"},{"lineNumber":43,"author":{"gitId":"000verflow"},"content":"        this.TASKS.add(newToDo);","lastModifiedDate":"2023-09-22"},{"lineNumber":44,"author":{"gitId":"000verflow"},"content":"        printRemark(newToDo, \"Done, I\u0027ve added this task: \");","lastModifiedDate":"2023-09-22"},{"lineNumber":45,"author":{"gitId":"000verflow"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":46,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":47,"author":{"gitId":"000verflow"},"content":"    /**","lastModifiedDate":"2023-09-25"},{"lineNumber":48,"author":{"gitId":"000verflow"},"content":"     * Adds a new Deadline task to the task list with the specified arguments.","lastModifiedDate":"2023-09-25"},{"lineNumber":49,"author":{"gitId":"000verflow"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":50,"author":{"gitId":"000verflow"},"content":"     * This method creates a new Deadline object with the description and end time provided in the arguments array.","lastModifiedDate":"2023-09-25"},{"lineNumber":51,"author":{"gitId":"000verflow"},"content":"     * The expected format for the arguments is: [deadlineDescription] /by [deadlineEndTime], and the expected","lastModifiedDate":"2023-09-25"},{"lineNumber":52,"author":{"gitId":"000verflow"},"content":"     * datetime format is \"yyyy-MM-dd HHmm\".","lastModifiedDate":"2023-09-25"},{"lineNumber":53,"author":{"gitId":"000verflow"},"content":"     * After the creation of the Deadline object, it is added to the task list, and a remark is printed indicating","lastModifiedDate":"2023-09-25"},{"lineNumber":54,"author":{"gitId":"000verflow"},"content":"     * the task has been added.","lastModifiedDate":"2023-09-25"},{"lineNumber":55,"author":{"gitId":"000verflow"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":56,"author":{"gitId":"000verflow"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":57,"author":{"gitId":"000verflow"},"content":"     * If the arguments are not in the expected format or are insufficient, or if the datetime is not in the expected format,","lastModifiedDate":"2023-09-25"},{"lineNumber":58,"author":{"gitId":"000verflow"},"content":"     * it throws a DukeException with an appropriate message guiding the user to provide input in the correct format.","lastModifiedDate":"2023-09-25"},{"lineNumber":59,"author":{"gitId":"000verflow"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":60,"author":{"gitId":"000verflow"},"content":"     *","lastModifiedDate":"2023-09-25"},{"lineNumber":61,"author":{"gitId":"000verflow"},"content":"     * @param arguments An array of Strings containing the description and end time for the deadline to be added.","lastModifiedDate":"2023-09-25"},{"lineNumber":62,"author":{"gitId":"000verflow"},"content":"     * @throws DukeException If the arguments provided are insufficient, not in the expected format, or if the datetime is in an invalid format.","lastModifiedDate":"2023-09-25"},{"lineNumber":63,"author":{"gitId":"000verflow"},"content":"     */","lastModifiedDate":"2023-09-25"},{"lineNumber":64,"author":{"gitId":"000verflow"},"content":"    public void addDeadlineInList(String[] arguments) throws DukeException{","lastModifiedDate":"2023-09-22"},{"lineNumber":65,"author":{"gitId":"000verflow"},"content":"        try{","lastModifiedDate":"2023-09-22"},{"lineNumber":66,"author":{"gitId":"000verflow"},"content":"            String argumentsString \u003d String.join(\" \", arguments);","lastModifiedDate":"2023-09-22"},{"lineNumber":67,"author":{"gitId":"000verflow"},"content":"            String[] argumentsList \u003d argumentsString.split(\" /by \");","lastModifiedDate":"2023-09-22"},{"lineNumber":68,"author":{"gitId":"000verflow"},"content":"            String deadlineDescription \u003d argumentsList[FIRST_INDEX];","lastModifiedDate":"2023-09-22"},{"lineNumber":69,"author":{"gitId":"000verflow"},"content":"            String deadlineEndTime \u003d argumentsList[SECOND_INDEX];","lastModifiedDate":"2023-09-22"},{"lineNumber":70,"author":{"gitId":"000verflow"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");","lastModifiedDate":"2023-09-22"},{"lineNumber":71,"author":{"gitId":"000verflow"},"content":"            LocalDateTime deadlineEndParsed \u003d LocalDateTime.parse(deadlineEndTime, formatter);","lastModifiedDate":"2023-09-22"},{"lineNumber":72,"author":{"gitId":"000verflow"},"content":"            Deadline newDeadline \u003d new Deadline(deadlineDescription, deadlineEndParsed);","lastModifiedDate":"2023-09-22"},{"lineNumber":73,"author":{"gitId":"000verflow"},"content":"            this.TASKS.add(newDeadline);","lastModifiedDate":"2023-09-22"},{"lineNumber":74,"author":{"gitId":"000verflow"},"content":"            printRemark(newDeadline, \"Done, I\u0027ve added this task: \");","lastModifiedDate":"2023-09-22"},{"lineNumber":75,"author":{"gitId":"000verflow"},"content":"        } catch(ArrayIndexOutOfBoundsException e){","lastModifiedDate":"2023-09-22"},{"lineNumber":76,"author":{"gitId":"000verflow"},"content":"            throw new DukeException(\"Insufficient arguments provided, try this (deadline submission /by 20-10-15 1800)\");","lastModifiedDate":"2023-09-22"},{"lineNumber":77,"author":{"gitId":"000verflow"},"content":"        } catch(DateTimeParseException dtEx) {","lastModifiedDate":"2023-09-22"},{"lineNumber":78,"author":{"gitId":"000verflow"},"content":"            throw new DukeException(\"Invalid datetime format, try this (deadline submission /by 2023-10-15 1800)\");","lastModifiedDate":"2023-09-22"},{"lineNumber":79,"author":{"gitId":"000verflow"},"content":"        }","lastModifiedDate":"2023-09-22"},{"lineNumber":80,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":81,"author":{"gitId":"000verflow"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":82,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":83,"author":{"gitId":"000verflow"},"content":"    /**","lastModifiedDate":"2023-09-25"},{"lineNumber":84,"author":{"gitId":"000verflow"},"content":"     * Adds a new Event task to the task list with the specified arguments.","lastModifiedDate":"2023-09-25"},{"lineNumber":85,"author":{"gitId":"000verflow"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":86,"author":{"gitId":"000verflow"},"content":"     * The method creates a new Event object with description, start time, and end time provided in the arguments array.","lastModifiedDate":"2023-09-25"},{"lineNumber":87,"author":{"gitId":"000verflow"},"content":"     * The expected format for the arguments is: [eventDescription] /from [eventStartTime] /to [eventEndTime].","lastModifiedDate":"2023-09-25"},{"lineNumber":88,"author":{"gitId":"000verflow"},"content":"     * After the creation of the Event object, it is added to the task list and a remark is printed indicating the task has been added.","lastModifiedDate":"2023-09-25"},{"lineNumber":89,"author":{"gitId":"000verflow"},"content":"     * If the arguments are not in the expected format or are insufficient, it throws a DukeException.","lastModifiedDate":"2023-09-25"},{"lineNumber":90,"author":{"gitId":"000verflow"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":91,"author":{"gitId":"000verflow"},"content":"     *","lastModifiedDate":"2023-09-25"},{"lineNumber":92,"author":{"gitId":"000verflow"},"content":"     * @param arguments An array of Strings containing the description, start time, and end time for the event to be added.","lastModifiedDate":"2023-09-25"},{"lineNumber":93,"author":{"gitId":"000verflow"},"content":"     * @throws DukeException If the arguments provided are insufficient or not in the expected format, or if the datetime is in an invalid format.","lastModifiedDate":"2023-10-03"},{"lineNumber":94,"author":{"gitId":"000verflow"},"content":"     */","lastModifiedDate":"2023-09-25"},{"lineNumber":95,"author":{"gitId":"000verflow"},"content":"    public void addEventInList(String[] arguments) throws DukeException{","lastModifiedDate":"2023-09-22"},{"lineNumber":96,"author":{"gitId":"000verflow"},"content":"        try {","lastModifiedDate":"2023-09-22"},{"lineNumber":97,"author":{"gitId":"000verflow"},"content":"            String argumentsString \u003d String.join(\" \", arguments);","lastModifiedDate":"2023-09-22"},{"lineNumber":98,"author":{"gitId":"000verflow"},"content":"            String[] argumentsList \u003d argumentsString.split(\" /from \");","lastModifiedDate":"2023-09-22"},{"lineNumber":99,"author":{"gitId":"000verflow"},"content":"            String eventDescription \u003d argumentsList[FIRST_INDEX];","lastModifiedDate":"2023-09-22"},{"lineNumber":100,"author":{"gitId":"000verflow"},"content":"            argumentsList \u003d argumentsList[SECOND_INDEX].split(\" /to \");","lastModifiedDate":"2023-09-22"},{"lineNumber":101,"author":{"gitId":"000verflow"},"content":"            String eventStartTime \u003d argumentsList[FIRST_INDEX];","lastModifiedDate":"2023-09-22"},{"lineNumber":102,"author":{"gitId":"000verflow"},"content":"            String eventEndTime \u003d argumentsList[SECOND_INDEX];","lastModifiedDate":"2023-09-22"},{"lineNumber":103,"author":{"gitId":"000verflow"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");","lastModifiedDate":"2023-10-03"},{"lineNumber":104,"author":{"gitId":"000verflow"},"content":"            LocalDateTime eventStartParsed \u003d LocalDateTime.parse(eventStartTime, formatter);","lastModifiedDate":"2023-10-03"},{"lineNumber":105,"author":{"gitId":"000verflow"},"content":"            LocalDateTime eventEndParsed \u003d LocalDateTime.parse(eventEndTime, formatter);","lastModifiedDate":"2023-10-03"},{"lineNumber":106,"author":{"gitId":"000verflow"},"content":"            Event newEvent \u003d new Event(eventDescription, eventStartParsed, eventEndParsed);","lastModifiedDate":"2023-10-03"},{"lineNumber":107,"author":{"gitId":"000verflow"},"content":"            this.TASKS.add(newEvent);","lastModifiedDate":"2023-09-22"},{"lineNumber":108,"author":{"gitId":"000verflow"},"content":"            printRemark(newEvent, \"Done, I\u0027ve added this task: \");","lastModifiedDate":"2023-09-22"},{"lineNumber":109,"author":{"gitId":"000verflow"},"content":"        } catch(ArrayIndexOutOfBoundsException e){","lastModifiedDate":"2023-09-22"},{"lineNumber":110,"author":{"gitId":"000verflow"},"content":"            throw new DukeException(\"Insufficient arguments provided, try this (event tiktok hackathon /from DATETIME /to DATETIME)\");","lastModifiedDate":"2023-10-03"},{"lineNumber":111,"author":{"gitId":"000verflow"},"content":"        } catch(DateTimeParseException dtEx) {","lastModifiedDate":"2023-10-03"},{"lineNumber":112,"author":{"gitId":"000verflow"},"content":"            throw new DukeException(\"Invalid datetime format, try this (event tiktok hackathon /from 2023-10-15 1800 /to 2023-10-17 0900)\");","lastModifiedDate":"2023-10-03"},{"lineNumber":113,"author":{"gitId":"000verflow"},"content":"        }","lastModifiedDate":"2023-09-22"},{"lineNumber":114,"author":{"gitId":"000verflow"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":115,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":116,"author":{"gitId":"000verflow"},"content":"    /**","lastModifiedDate":"2023-09-25"},{"lineNumber":117,"author":{"gitId":"000verflow"},"content":"     * Marks a task in the task list as complete based on the provided index.","lastModifiedDate":"2023-09-25"},{"lineNumber":118,"author":{"gitId":"000verflow"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":119,"author":{"gitId":"000verflow"},"content":"     * This method attempts to parse the first element of the provided arguments array as an integer","lastModifiedDate":"2023-09-25"},{"lineNumber":120,"author":{"gitId":"000verflow"},"content":"     * and uses it as an index to access and mark the task at that position in the task list as complete.","lastModifiedDate":"2023-09-25"},{"lineNumber":121,"author":{"gitId":"000verflow"},"content":"     * After marking, it prints a message indicating that the task has been marked as done along with the task details.","lastModifiedDate":"2023-09-25"},{"lineNumber":122,"author":{"gitId":"000verflow"},"content":"     * If the parsed integer is not a valid index, or if the first element is not an integer, it throws a DukeException.","lastModifiedDate":"2023-09-25"},{"lineNumber":123,"author":{"gitId":"000verflow"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":124,"author":{"gitId":"000verflow"},"content":"     *","lastModifiedDate":"2023-09-25"},{"lineNumber":125,"author":{"gitId":"000verflow"},"content":"     * @param arguments An array of Strings containing the index of the task to be marked as its first element.","lastModifiedDate":"2023-09-25"},{"lineNumber":126,"author":{"gitId":"000verflow"},"content":"     * @throws DukeException If the provided index is not a valid integer, or if it\u0027s out of the bounds of the task list.","lastModifiedDate":"2023-09-25"},{"lineNumber":127,"author":{"gitId":"000verflow"},"content":"     */","lastModifiedDate":"2023-09-25"},{"lineNumber":128,"author":{"gitId":"000verflow"},"content":"    public void markTaskComplete(String[] arguments) throws DukeException{","lastModifiedDate":"2023-09-22"},{"lineNumber":129,"author":{"gitId":"000verflow"},"content":"        try{","lastModifiedDate":"2023-09-22"},{"lineNumber":130,"author":{"gitId":"000verflow"},"content":"            int taskIndex \u003d Integer.parseInt(arguments[FIRST_INDEX]);","lastModifiedDate":"2023-09-22"},{"lineNumber":131,"author":{"gitId":"000verflow"},"content":"            Task taskToMark \u003d this.TASKS.get(taskIndex-1);","lastModifiedDate":"2023-09-22"},{"lineNumber":132,"author":{"gitId":"000verflow"},"content":"            taskToMark.markAsDone();","lastModifiedDate":"2023-09-22"},{"lineNumber":133,"author":{"gitId":"000verflow"},"content":"            System.out.println(\"Marked this task as done:\");","lastModifiedDate":"2023-09-22"},{"lineNumber":134,"author":{"gitId":"000verflow"},"content":"            System.out.println(taskToMark);","lastModifiedDate":"2023-09-22"},{"lineNumber":135,"author":{"gitId":"000verflow"},"content":"        } catch(IndexOutOfBoundsException indexEx){","lastModifiedDate":"2023-09-22"},{"lineNumber":136,"author":{"gitId":"000verflow"},"content":"            throw new DukeException(\"Invalid index bro...\");","lastModifiedDate":"2023-09-22"},{"lineNumber":137,"author":{"gitId":"000verflow"},"content":"        } catch(NumberFormatException numEx){","lastModifiedDate":"2023-09-22"},{"lineNumber":138,"author":{"gitId":"000verflow"},"content":"            throw new DukeException(\"That\u0027s not an index bro..\");","lastModifiedDate":"2023-09-22"},{"lineNumber":139,"author":{"gitId":"000verflow"},"content":"        }","lastModifiedDate":"2023-09-22"},{"lineNumber":140,"author":{"gitId":"000verflow"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":141,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":142,"author":{"gitId":"000verflow"},"content":"    /**","lastModifiedDate":"2023-09-25"},{"lineNumber":143,"author":{"gitId":"000verflow"},"content":"     * Marks a task in the task list as incomplete based on the provided index.","lastModifiedDate":"2023-09-25"},{"lineNumber":144,"author":{"gitId":"000verflow"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":145,"author":{"gitId":"000verflow"},"content":"     * This method attempts to parse the first element of the provided arguments array as an integer","lastModifiedDate":"2023-09-25"},{"lineNumber":146,"author":{"gitId":"000verflow"},"content":"     * and uses it as an index to access and unmark the task at that position in the task list. After unmarking,","lastModifiedDate":"2023-09-25"},{"lineNumber":147,"author":{"gitId":"000verflow"},"content":"     * it prints a message indicating that the task has been marked as undone along with the task details.","lastModifiedDate":"2023-09-25"},{"lineNumber":148,"author":{"gitId":"000verflow"},"content":"     * If the parsed integer is not a valid index, or if the first element is not an integer, it throws a DukeException.","lastModifiedDate":"2023-09-25"},{"lineNumber":149,"author":{"gitId":"000verflow"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":150,"author":{"gitId":"000verflow"},"content":"     *","lastModifiedDate":"2023-09-25"},{"lineNumber":151,"author":{"gitId":"000verflow"},"content":"     * @param arguments An array of Strings containing the index of the task to be unmarked as its first element.","lastModifiedDate":"2023-09-25"},{"lineNumber":152,"author":{"gitId":"000verflow"},"content":"     * @throws DukeException If the provided index is not a valid integer, or if it\u0027s out of the bounds of the task list.","lastModifiedDate":"2023-09-25"},{"lineNumber":153,"author":{"gitId":"000verflow"},"content":"     */","lastModifiedDate":"2023-09-25"},{"lineNumber":154,"author":{"gitId":"000verflow"},"content":"    public void markTaskIncomplete(String[] arguments) throws DukeException{","lastModifiedDate":"2023-09-25"},{"lineNumber":155,"author":{"gitId":"000verflow"},"content":"        try{","lastModifiedDate":"2023-09-22"},{"lineNumber":156,"author":{"gitId":"000verflow"},"content":"            int taskIndex \u003d Integer.parseInt(arguments[FIRST_INDEX]);","lastModifiedDate":"2023-09-22"},{"lineNumber":157,"author":{"gitId":"000verflow"},"content":"            Task taskToUnmark \u003d this.TASKS.get(taskIndex-1);","lastModifiedDate":"2023-09-22"},{"lineNumber":158,"author":{"gitId":"000verflow"},"content":"            taskToUnmark.markAsUndone();","lastModifiedDate":"2023-09-22"},{"lineNumber":159,"author":{"gitId":"000verflow"},"content":"            System.out.println(\"Marked this task as undone:\");","lastModifiedDate":"2023-09-22"},{"lineNumber":160,"author":{"gitId":"000verflow"},"content":"            System.out.println(taskToUnmark);","lastModifiedDate":"2023-09-22"},{"lineNumber":161,"author":{"gitId":"000verflow"},"content":"        } catch(IndexOutOfBoundsException indexEx){","lastModifiedDate":"2023-09-22"},{"lineNumber":162,"author":{"gitId":"000verflow"},"content":"            throw new DukeException(\"Invalid index bro...\");","lastModifiedDate":"2023-09-22"},{"lineNumber":163,"author":{"gitId":"000verflow"},"content":"        } catch(NumberFormatException numEx){","lastModifiedDate":"2023-09-22"},{"lineNumber":164,"author":{"gitId":"000verflow"},"content":"            throw new DukeException(\"That\u0027s not an index bro..\");","lastModifiedDate":"2023-09-22"},{"lineNumber":165,"author":{"gitId":"000verflow"},"content":"        }","lastModifiedDate":"2023-09-22"},{"lineNumber":166,"author":{"gitId":"000verflow"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":167,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":168,"author":{"gitId":"000verflow"},"content":"    /**","lastModifiedDate":"2023-09-25"},{"lineNumber":169,"author":{"gitId":"000verflow"},"content":"     * Deletes a task from the task list based on the provided index.","lastModifiedDate":"2023-09-25"},{"lineNumber":170,"author":{"gitId":"000verflow"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":171,"author":{"gitId":"000verflow"},"content":"     * This method attempts to parse the first element of the provided arguments array as an integer to use it as an index to delete","lastModifiedDate":"2023-09-25"},{"lineNumber":172,"author":{"gitId":"000verflow"},"content":"     * the task at that position in the task list. After deletion, it prints a remark with the deleted task.","lastModifiedDate":"2023-09-25"},{"lineNumber":173,"author":{"gitId":"000verflow"},"content":"     * If the parsed integer is not a valid index or if the first element is not an integer, it throws a DukeException.","lastModifiedDate":"2023-09-25"},{"lineNumber":174,"author":{"gitId":"000verflow"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":175,"author":{"gitId":"000verflow"},"content":"     *","lastModifiedDate":"2023-09-25"},{"lineNumber":176,"author":{"gitId":"000verflow"},"content":"     * @param arguments An array of Strings containing the index of the task to be deleted as its first element.","lastModifiedDate":"2023-09-25"},{"lineNumber":177,"author":{"gitId":"000verflow"},"content":"     * @throws DukeException If the provided index is not a valid integer, or if it\u0027s out of the bounds of the task list.","lastModifiedDate":"2023-09-25"},{"lineNumber":178,"author":{"gitId":"000verflow"},"content":"     */","lastModifiedDate":"2023-09-25"},{"lineNumber":179,"author":{"gitId":"000verflow"},"content":"    public void deleteTaskInList(String[] arguments) throws DukeException{","lastModifiedDate":"2023-09-22"},{"lineNumber":180,"author":{"gitId":"000verflow"},"content":"        try {","lastModifiedDate":"2023-09-22"},{"lineNumber":181,"author":{"gitId":"000verflow"},"content":"            int taskIndex \u003d Integer.parseInt(arguments[FIRST_INDEX]);","lastModifiedDate":"2023-09-22"},{"lineNumber":182,"author":{"gitId":"000verflow"},"content":"            Task taskToDelete \u003d this.TASKS.get(taskIndex-1);","lastModifiedDate":"2023-09-22"},{"lineNumber":183,"author":{"gitId":"000verflow"},"content":"            this.TASKS.remove(taskToDelete);","lastModifiedDate":"2023-09-22"},{"lineNumber":184,"author":{"gitId":"000verflow"},"content":"            printRemark(taskToDelete, \"Done, I\u0027ve deleted this task: \");","lastModifiedDate":"2023-09-22"},{"lineNumber":185,"author":{"gitId":"000verflow"},"content":"        } catch(IndexOutOfBoundsException indexEx){","lastModifiedDate":"2023-09-22"},{"lineNumber":186,"author":{"gitId":"000verflow"},"content":"            throw new DukeException(\"Invalid index bro...\");","lastModifiedDate":"2023-09-22"},{"lineNumber":187,"author":{"gitId":"000verflow"},"content":"        } catch(NumberFormatException numEx){","lastModifiedDate":"2023-09-22"},{"lineNumber":188,"author":{"gitId":"000verflow"},"content":"            throw new DukeException(\"That\u0027s not an index bro..\");","lastModifiedDate":"2023-09-22"},{"lineNumber":189,"author":{"gitId":"000verflow"},"content":"        }","lastModifiedDate":"2023-09-22"},{"lineNumber":190,"author":{"gitId":"000verflow"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":191,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":192,"author":{"gitId":"000verflow"},"content":"    /**","lastModifiedDate":"2023-09-25"},{"lineNumber":193,"author":{"gitId":"000verflow"},"content":"     * Searches and prints the tasks in the task list that contain the provided search term.","lastModifiedDate":"2023-09-25"},{"lineNumber":194,"author":{"gitId":"000verflow"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":195,"author":{"gitId":"000verflow"},"content":"     * The method prints the matching tasks line by line with their index in the task list.","lastModifiedDate":"2023-09-25"},{"lineNumber":196,"author":{"gitId":"000verflow"},"content":"     * The search is case-insensitive and looks for the search term in the task descriptions.","lastModifiedDate":"2023-09-25"},{"lineNumber":197,"author":{"gitId":"000verflow"},"content":"     * If no arguments are provided, it throws a DukeException indicating that a term to find is required.","lastModifiedDate":"2023-09-25"},{"lineNumber":198,"author":{"gitId":"000verflow"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":199,"author":{"gitId":"000verflow"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":200,"author":{"gitId":"000verflow"},"content":"     * The search term is constructed by joining the elements of the provided arguments array with a space.","lastModifiedDate":"2023-09-25"},{"lineNumber":201,"author":{"gitId":"000verflow"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":202,"author":{"gitId":"000verflow"},"content":"     *","lastModifiedDate":"2023-09-25"},{"lineNumber":203,"author":{"gitId":"000verflow"},"content":"     * @param arguments An array of Strings containing the words of the search term.","lastModifiedDate":"2023-09-25"},{"lineNumber":204,"author":{"gitId":"000verflow"},"content":"     * @throws DukeException If no arguments are provided to form a search term.","lastModifiedDate":"2023-09-25"},{"lineNumber":205,"author":{"gitId":"000verflow"},"content":"     */","lastModifiedDate":"2023-09-25"},{"lineNumber":206,"author":{"gitId":"000verflow"},"content":"    public void findTasksInList(String[] arguments) throws DukeException{","lastModifiedDate":"2023-09-22"},{"lineNumber":207,"author":{"gitId":"000verflow"},"content":"        if (arguments.length \u003d\u003d 0){ // empty argument","lastModifiedDate":"2023-09-22"},{"lineNumber":208,"author":{"gitId":"000verflow"},"content":"            throw new DukeException(\"Provide a term to find bro....\");","lastModifiedDate":"2023-09-22"},{"lineNumber":209,"author":{"gitId":"000verflow"},"content":"        }","lastModifiedDate":"2023-09-22"},{"lineNumber":210,"author":{"gitId":"000verflow"},"content":"        System.out.println(\"Here are the matching tasks in the list: \");","lastModifiedDate":"2023-09-22"},{"lineNumber":211,"author":{"gitId":"000verflow"},"content":"        String descriptionSubstring \u003d String.join(\" \", arguments);","lastModifiedDate":"2023-09-22"},{"lineNumber":212,"author":{"gitId":"000verflow"},"content":"        for (int i\u003d0;i\u003cthis.TASKS.size();i++){","lastModifiedDate":"2023-09-22"},{"lineNumber":213,"author":{"gitId":"000verflow"},"content":"            Task task \u003d TASKS.get(i);","lastModifiedDate":"2023-09-22"},{"lineNumber":214,"author":{"gitId":"000verflow"},"content":"            String taskDescription \u003d task.getDescription().toLowerCase();","lastModifiedDate":"2023-09-22"},{"lineNumber":215,"author":{"gitId":"000verflow"},"content":"            if (taskDescription.contains(descriptionSubstring.toLowerCase())){","lastModifiedDate":"2023-09-22"},{"lineNumber":216,"author":{"gitId":"000verflow"},"content":"                System.out.println(i+1 + \".\" + task.toString());","lastModifiedDate":"2023-09-22"},{"lineNumber":217,"author":{"gitId":"000verflow"},"content":"            }","lastModifiedDate":"2023-09-22"},{"lineNumber":218,"author":{"gitId":"000verflow"},"content":"        }","lastModifiedDate":"2023-09-22"},{"lineNumber":219,"author":{"gitId":"000verflow"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":220,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":221,"author":{"gitId":"000verflow"},"content":"    public void printList(){","lastModifiedDate":"2023-09-22"},{"lineNumber":222,"author":{"gitId":"000verflow"},"content":"        if (!TASKS.isEmpty()){","lastModifiedDate":"2023-09-22"},{"lineNumber":223,"author":{"gitId":"000verflow"},"content":"            for (int i \u003d 0; i \u003c TASKS.size(); i++) {","lastModifiedDate":"2023-09-22"},{"lineNumber":224,"author":{"gitId":"000verflow"},"content":"                Task task \u003d TASKS.get(i);","lastModifiedDate":"2023-09-22"},{"lineNumber":225,"author":{"gitId":"000verflow"},"content":"                System.out.println(i+1 + \".\" + task.toString());","lastModifiedDate":"2023-09-22"},{"lineNumber":226,"author":{"gitId":"000verflow"},"content":"            }","lastModifiedDate":"2023-09-22"},{"lineNumber":227,"author":{"gitId":"000verflow"},"content":"        }else{","lastModifiedDate":"2023-09-22"},{"lineNumber":228,"author":{"gitId":"000verflow"},"content":"            System.out.println(\"No data here bro...\");","lastModifiedDate":"2023-09-22"},{"lineNumber":229,"author":{"gitId":"000verflow"},"content":"        }","lastModifiedDate":"2023-09-22"},{"lineNumber":230,"author":{"gitId":"000verflow"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":231,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":232,"author":{"gitId":"000verflow"},"content":"    public void printRemark(Task task, String remark){","lastModifiedDate":"2023-09-22"},{"lineNumber":233,"author":{"gitId":"000verflow"},"content":"        System.out.println(remark);","lastModifiedDate":"2023-09-22"},{"lineNumber":234,"author":{"gitId":"000verflow"},"content":"        System.out.println(task);","lastModifiedDate":"2023-09-22"},{"lineNumber":235,"author":{"gitId":"000verflow"},"content":"        System.out.println(\"Now you have \" + TASKS.size() + \" tasks in the list\");","lastModifiedDate":"2023-09-22"},{"lineNumber":236,"author":{"gitId":"000verflow"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":237,"author":{"gitId":"000verflow"},"content":"}","lastModifiedDate":"2023-09-22"}],"authorContributionMap":{"000verflow":237}},{"path":"src/main/java/duke/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"000verflow"},"content":"package duke;","lastModifiedDate":"2023-09-10"},{"lineNumber":2,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":3,"author":{"gitId":"000verflow"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"000verflow"},"content":"    public ToDo(String description) {","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"000verflow"},"content":"        super(description);","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"000verflow"},"content":"        this.taskType \u003d \"T\";","lastModifiedDate":"2023-09-16"},{"lineNumber":8,"author":{"gitId":"000verflow"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"000verflow"},"content":"    @Override","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"000verflow"},"content":"    public String toString(){","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"000verflow"},"content":"        return String.format(\"[%s]%s\", this.taskType, super.toString());","lastModifiedDate":"2023-09-16"},{"lineNumber":13,"author":{"gitId":"000verflow"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"000verflow"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"000verflow":14}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"000verflow"},"content":"package duke;","lastModifiedDate":"2023-09-22"},{"lineNumber":2,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":3,"author":{"gitId":"000verflow"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-09-22"},{"lineNumber":4,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":5,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-25"},{"lineNumber":6,"author":{"gitId":"000verflow"},"content":"/**","lastModifiedDate":"2023-09-25"},{"lineNumber":7,"author":{"gitId":"000verflow"},"content":" * The {@code Ui} class is responsible for interactions with the user.","lastModifiedDate":"2023-09-25"},{"lineNumber":8,"author":{"gitId":"000verflow"},"content":" * It handles user inputs and application outputs, including displaying welcome, exit messages,","lastModifiedDate":"2023-09-25"},{"lineNumber":9,"author":{"gitId":"000verflow"},"content":" * errors, and other information that the user should see.","lastModifiedDate":"2023-09-25"},{"lineNumber":10,"author":{"gitId":"000verflow"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":11,"author":{"gitId":"000verflow"},"content":" * It utilizes a {@code Scanner} object to read commands entered by the user.","lastModifiedDate":"2023-09-25"},{"lineNumber":12,"author":{"gitId":"000verflow"},"content":" * Various methods in this class print information, errors, and decorative lines to the console,","lastModifiedDate":"2023-09-25"},{"lineNumber":13,"author":{"gitId":"000verflow"},"content":" * following the format and conventions of the application\u0027s user interface.","lastModifiedDate":"2023-09-25"},{"lineNumber":14,"author":{"gitId":"000verflow"},"content":" * \u003c/p\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":15,"author":{"gitId":"000verflow"},"content":" *","lastModifiedDate":"2023-09-25"},{"lineNumber":16,"author":{"gitId":"000verflow"},"content":" * Key Methods Include:","lastModifiedDate":"2023-09-25"},{"lineNumber":17,"author":{"gitId":"000verflow"},"content":" * \u003cul\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":18,"author":{"gitId":"000verflow"},"content":" *     \u003cli\u003e{@link #readCommand()} - Reads the user input and returns it as a string.\u003c/li\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":19,"author":{"gitId":"000verflow"},"content":" *     \u003cli\u003e{@link #showError(Exception)} - Prints the error message of a given exception to the console.\u003c/li\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":20,"author":{"gitId":"000verflow"},"content":" *     \u003cli\u003e{@link #showLoadingError(String)} - Informs the user of a file loading error at a given file path.\u003c/li\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":21,"author":{"gitId":"000verflow"},"content":" *     \u003cli\u003e{@link #showWelcomeMessage()} - Displays a welcome message to the user.\u003c/li\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":22,"author":{"gitId":"000verflow"},"content":" *     \u003cli\u003e{@link #showExitMessage()} - Displays an exit message to the user.\u003c/li\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":23,"author":{"gitId":"000verflow"},"content":" *     \u003cli\u003e{@link #showLine()} - Prints a line divider to the console, used to separate different sections of output.\u003c/li\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":24,"author":{"gitId":"000verflow"},"content":" * \u003c/ul\u003e","lastModifiedDate":"2023-09-25"},{"lineNumber":25,"author":{"gitId":"000verflow"},"content":" *","lastModifiedDate":"2023-09-25"},{"lineNumber":26,"author":{"gitId":"000verflow"},"content":" * @see Scanner","lastModifiedDate":"2023-09-25"},{"lineNumber":27,"author":{"gitId":"000verflow"},"content":" *","lastModifiedDate":"2023-09-25"},{"lineNumber":28,"author":{"gitId":"000verflow"},"content":" * @author  Ashok Balaji","lastModifiedDate":"2023-09-25"},{"lineNumber":29,"author":{"gitId":"000verflow"},"content":" * @version 1.0","lastModifiedDate":"2023-09-25"},{"lineNumber":30,"author":{"gitId":"000verflow"},"content":" * @since   2023-09-25","lastModifiedDate":"2023-09-25"},{"lineNumber":31,"author":{"gitId":"000verflow"},"content":" */","lastModifiedDate":"2023-09-25"},{"lineNumber":32,"author":{"gitId":"000verflow"},"content":"public class Ui {","lastModifiedDate":"2023-09-22"},{"lineNumber":33,"author":{"gitId":"000verflow"},"content":"    protected static String CHATBOTNAME \u003d \"Andrew Tate\";","lastModifiedDate":"2023-09-22"},{"lineNumber":34,"author":{"gitId":"000verflow"},"content":"    protected static String LINE_DIVIDER \u003d \"____________________________________________________________\";","lastModifiedDate":"2023-09-22"},{"lineNumber":35,"author":{"gitId":"000verflow"},"content":"    protected Scanner myScanner;","lastModifiedDate":"2023-09-22"},{"lineNumber":36,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":37,"author":{"gitId":"000verflow"},"content":"    public Ui(){","lastModifiedDate":"2023-09-22"},{"lineNumber":38,"author":{"gitId":"000verflow"},"content":"        this.myScanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-09-22"},{"lineNumber":39,"author":{"gitId":"000verflow"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":40,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":41,"author":{"gitId":"000verflow"},"content":"    public void showWelcomeMessage(){","lastModifiedDate":"2023-09-22"},{"lineNumber":42,"author":{"gitId":"000verflow"},"content":"        showLine();","lastModifiedDate":"2023-09-22"},{"lineNumber":43,"author":{"gitId":"000verflow"},"content":"        System.out.println(\"Hello! I\u0027m the top G \" + CHATBOTNAME);","lastModifiedDate":"2023-09-22"},{"lineNumber":44,"author":{"gitId":"000verflow"},"content":"        System.out.println(\"What can I do for you?\");","lastModifiedDate":"2023-09-22"},{"lineNumber":45,"author":{"gitId":"000verflow"},"content":"        showLine();","lastModifiedDate":"2023-09-22"},{"lineNumber":46,"author":{"gitId":"000verflow"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":47,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":48,"author":{"gitId":"000verflow"},"content":"    public void showLoadingError(String filePath){","lastModifiedDate":"2023-09-22"},{"lineNumber":49,"author":{"gitId":"000verflow"},"content":"        System.out.println(\"Unable to create file @ \" + filePath);","lastModifiedDate":"2023-09-22"},{"lineNumber":50,"author":{"gitId":"000verflow"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":51,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":52,"author":{"gitId":"000verflow"},"content":"    public void showExitMessage(){","lastModifiedDate":"2023-09-22"},{"lineNumber":53,"author":{"gitId":"000verflow"},"content":"        System.out.println(\"Bye, hope to see you again soon!\");","lastModifiedDate":"2023-09-22"},{"lineNumber":54,"author":{"gitId":"000verflow"},"content":"        showLine();","lastModifiedDate":"2023-09-22"},{"lineNumber":55,"author":{"gitId":"000verflow"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":56,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":57,"author":{"gitId":"000verflow"},"content":"    public void showError(Exception e){","lastModifiedDate":"2023-09-22"},{"lineNumber":58,"author":{"gitId":"000verflow"},"content":"        System.out.println(e);","lastModifiedDate":"2023-09-22"},{"lineNumber":59,"author":{"gitId":"000verflow"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":60,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":61,"author":{"gitId":"000verflow"},"content":"    public String readCommand(){","lastModifiedDate":"2023-09-22"},{"lineNumber":62,"author":{"gitId":"000verflow"},"content":"        System.out.print(\"\u003e \");","lastModifiedDate":"2023-09-22"},{"lineNumber":63,"author":{"gitId":"000verflow"},"content":"        return myScanner.nextLine();","lastModifiedDate":"2023-09-22"},{"lineNumber":64,"author":{"gitId":"000verflow"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":65,"author":{"gitId":"000verflow"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":66,"author":{"gitId":"000verflow"},"content":"    public void showLine(){","lastModifiedDate":"2023-09-22"},{"lineNumber":67,"author":{"gitId":"000verflow"},"content":"        System.out.println(LINE_DIVIDER);","lastModifiedDate":"2023-09-22"},{"lineNumber":68,"author":{"gitId":"000verflow"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":69,"author":{"gitId":"000verflow"},"content":"}","lastModifiedDate":"2023-09-22"}],"authorContributionMap":{"000verflow":69}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"000verflow"},"content":"asdf","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"000verflow"},"content":"mark 1","lastModifiedDate":"2023-09-10"},{"lineNumber":3,"author":{"gitId":"000verflow"},"content":"unmark 1","lastModifiedDate":"2023-09-10"},{"lineNumber":4,"author":{"gitId":"000verflow"},"content":"todo","lastModifiedDate":"2023-09-10"},{"lineNumber":5,"author":{"gitId":"000verflow"},"content":"deadline 1234","lastModifiedDate":"2023-09-10"},{"lineNumber":6,"author":{"gitId":"000verflow"},"content":"event 1234 /from","lastModifiedDate":"2023-09-10"},{"lineNumber":7,"author":{"gitId":"000verflow"},"content":"todo borrow book","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"000verflow"},"content":"deadline return book /by Sunday","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"000verflow"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"000verflow"},"content":"mark 1","lastModifiedDate":"2023-09-10"},{"lineNumber":11,"author":{"gitId":"000verflow"},"content":"list","lastModifiedDate":"2023-09-10"},{"lineNumber":12,"author":{"gitId":"000verflow"},"content":"unmark 1","lastModifiedDate":"2023-09-10"},{"lineNumber":13,"author":{"gitId":"000verflow"},"content":"list","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"000verflow"},"content":"bye","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"000verflow":14}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"000verflow"},"content":"javac  -cp ..\\src\\main\\java\\duke -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java","lastModifiedDate":"2023-09-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"000verflow":1,"-":20}}]
