[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"Barbaracwx"},"content":"# Duke project template  :)","lastModifiedDate":"2023-10-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"Barbaracwx"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it. :)","lastModifiedDate":"2023-10-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":"3. After that, locate the `src/main/java/Duke.java` file, right-click it, and choose `Run Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2021-07-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Barbaracwx":2,"-":22}},{"path":"caraData.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Barbaracwx"},"content":"T | true | mark 1","lastModifiedDate":"2023-10-03"},{"lineNumber":2,"author":{"gitId":"Barbaracwx"},"content":"T | false | buy book","lastModifiedDate":"2023-10-03"},{"lineNumber":3,"author":{"gitId":"Barbaracwx"},"content":"E | false | meet caleb /from 4 to /9 | No Start Date | No End Date","lastModifiedDate":"2023-10-03"},{"lineNumber":4,"author":{"gitId":"Barbaracwx"},"content":"E | false | meet caleb /from 8 nov /to 9 | 8 nov | 9","lastModifiedDate":"2023-10-03"},{"lineNumber":5,"author":{"gitId":"Barbaracwx"},"content":"D | false | ksfgb /by kjsdbf | kjsdbf","lastModifiedDate":"2023-10-03"},{"lineNumber":6,"author":{"gitId":"Barbaracwx"},"content":"E | true | skjfbg /from kfjgb /to | kfjgb | ","lastModifiedDate":"2023-10-03"}],"authorContributionMap":{"Barbaracwx":6}},{"path":"src/main/java/Cara/Cara.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Barbaracwx"},"content":"package Cara;","lastModifiedDate":"2023-10-03"},{"lineNumber":2,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":3,"author":{"gitId":"Barbaracwx"},"content":"import Commands.Command;","lastModifiedDate":"2023-10-03"},{"lineNumber":4,"author":{"gitId":"Barbaracwx"},"content":"import Tasks.TaskList;","lastModifiedDate":"2023-10-03"},{"lineNumber":5,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":6,"author":{"gitId":"Barbaracwx"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-22"},{"lineNumber":7,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":8,"author":{"gitId":"Barbaracwx"},"content":"/**","lastModifiedDate":"2023-10-03"},{"lineNumber":9,"author":{"gitId":"Barbaracwx"},"content":" * Duke is a task management program that allows users to manage their tasks.","lastModifiedDate":"2023-10-03"},{"lineNumber":10,"author":{"gitId":"Barbaracwx"},"content":" * It provides functionality for adding, deleting, and listing tasks.","lastModifiedDate":"2023-10-03"},{"lineNumber":11,"author":{"gitId":"Barbaracwx"},"content":" */","lastModifiedDate":"2023-10-03"},{"lineNumber":12,"author":{"gitId":"Barbaracwx"},"content":"public class Cara {","lastModifiedDate":"2023-10-03"},{"lineNumber":13,"author":{"gitId":"Barbaracwx"},"content":"    private Ui ui;","lastModifiedDate":"2023-10-02"},{"lineNumber":14,"author":{"gitId":"Barbaracwx"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-10-02"},{"lineNumber":15,"author":{"gitId":"Barbaracwx"},"content":"    private Storage storage;","lastModifiedDate":"2023-10-02"},{"lineNumber":16,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":17,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":18,"author":{"gitId":"Barbaracwx"},"content":"     * Constructs a Duke instance with the specified file path.","lastModifiedDate":"2023-10-03"},{"lineNumber":19,"author":{"gitId":"Barbaracwx"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":20,"author":{"gitId":"Barbaracwx"},"content":"     * @param filePath The path to the file used for task storage.","lastModifiedDate":"2023-10-03"},{"lineNumber":21,"author":{"gitId":"Barbaracwx"},"content":"     * @throws CaraException If there is an issue initializing Duke.","lastModifiedDate":"2023-10-03"},{"lineNumber":22,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":23,"author":{"gitId":"Barbaracwx"},"content":"    public Cara(String filePath) throws CaraException {","lastModifiedDate":"2023-10-03"},{"lineNumber":24,"author":{"gitId":"Barbaracwx"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-10-02"},{"lineNumber":25,"author":{"gitId":"Barbaracwx"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2023-10-02"},{"lineNumber":26,"author":{"gitId":"Barbaracwx"},"content":"        try {","lastModifiedDate":"2023-09-22"},{"lineNumber":27,"author":{"gitId":"Barbaracwx"},"content":"            tasks \u003d new TaskList(storage.loadTasks());","lastModifiedDate":"2023-10-02"},{"lineNumber":28,"author":{"gitId":"Barbaracwx"},"content":"        } catch (CaraException | IOException e) {","lastModifiedDate":"2023-10-03"},{"lineNumber":29,"author":{"gitId":"Barbaracwx"},"content":"            ui.showLoadingError();","lastModifiedDate":"2023-10-02"},{"lineNumber":30,"author":{"gitId":"Barbaracwx"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2023-10-02"},{"lineNumber":31,"author":{"gitId":"Barbaracwx"},"content":"        }","lastModifiedDate":"2023-10-02"},{"lineNumber":32,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":33,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":34,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":35,"author":{"gitId":"Barbaracwx"},"content":"     * Runs the Duke program, handling user input and executing commands.","lastModifiedDate":"2023-10-03"},{"lineNumber":36,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":37,"author":{"gitId":"Barbaracwx"},"content":"    public void run() {","lastModifiedDate":"2023-10-02"},{"lineNumber":38,"author":{"gitId":"Barbaracwx"},"content":"        ui.printWelcomeMessage();","lastModifiedDate":"2023-10-02"},{"lineNumber":39,"author":{"gitId":"Barbaracwx"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2023-10-02"},{"lineNumber":40,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":41,"author":{"gitId":"Barbaracwx"},"content":"        while (!isExit) {","lastModifiedDate":"2023-10-02"},{"lineNumber":42,"author":{"gitId":"Barbaracwx"},"content":"            try {","lastModifiedDate":"2023-09-15"},{"lineNumber":43,"author":{"gitId":"Barbaracwx"},"content":"                String fullCommand \u003d ui.readCommand();","lastModifiedDate":"2023-10-02"},{"lineNumber":44,"author":{"gitId":"Barbaracwx"},"content":"                ui.showLine();","lastModifiedDate":"2023-10-02"},{"lineNumber":45,"author":{"gitId":"Barbaracwx"},"content":"                Command c \u003d Parser.parse(fullCommand);","lastModifiedDate":"2023-10-02"},{"lineNumber":46,"author":{"gitId":"Barbaracwx"},"content":"                c.execute(tasks.getTasks(), ui, storage);","lastModifiedDate":"2023-10-03"},{"lineNumber":47,"author":{"gitId":"Barbaracwx"},"content":"                isExit \u003d c.isExit();","lastModifiedDate":"2023-10-02"},{"lineNumber":48,"author":{"gitId":"Barbaracwx"},"content":"                Storage.saveTasks(tasks.getTasks());","lastModifiedDate":"2023-10-03"},{"lineNumber":49,"author":{"gitId":"Barbaracwx"},"content":"            } catch (IOException | CaraException e) {","lastModifiedDate":"2023-10-03"},{"lineNumber":50,"author":{"gitId":"Barbaracwx"},"content":"                ui.showError(e.getMessage());","lastModifiedDate":"2023-10-02"},{"lineNumber":51,"author":{"gitId":"Barbaracwx"},"content":"            } finally {","lastModifiedDate":"2023-10-02"},{"lineNumber":52,"author":{"gitId":"Barbaracwx"},"content":"                ui.showLine();","lastModifiedDate":"2023-10-02"},{"lineNumber":53,"author":{"gitId":"Barbaracwx"},"content":"            }","lastModifiedDate":"2023-09-20"},{"lineNumber":54,"author":{"gitId":"Barbaracwx"},"content":"        }","lastModifiedDate":"2023-09-08"},{"lineNumber":55,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":56,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":57,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":58,"author":{"gitId":"Barbaracwx"},"content":"     * The main entry point for running the Duke program.","lastModifiedDate":"2023-10-03"},{"lineNumber":59,"author":{"gitId":"Barbaracwx"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":60,"author":{"gitId":"Barbaracwx"},"content":"     * @param args The command-line arguments (not used in this program).","lastModifiedDate":"2023-10-03"},{"lineNumber":61,"author":{"gitId":"Barbaracwx"},"content":"     * @throws IOException   If an I/O error occurs.","lastModifiedDate":"2023-10-03"},{"lineNumber":62,"author":{"gitId":"Barbaracwx"},"content":"     * @throws CaraException If there is an issue with Duke initialization.","lastModifiedDate":"2023-10-03"},{"lineNumber":63,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":64,"author":{"gitId":"Barbaracwx"},"content":"    public static void main(String[] args) throws IOException, CaraException {","lastModifiedDate":"2023-10-03"},{"lineNumber":65,"author":{"gitId":"Barbaracwx"},"content":"        new Cara(\"data/tasks.txt\").run();","lastModifiedDate":"2023-10-03"},{"lineNumber":66,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"Barbaracwx":66,"-":1}},{"path":"src/main/java/Cara/CaraException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Barbaracwx"},"content":"package Cara;","lastModifiedDate":"2023-10-03"},{"lineNumber":2,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":3,"author":{"gitId":"Barbaracwx"},"content":"/**","lastModifiedDate":"2023-10-03"},{"lineNumber":4,"author":{"gitId":"Barbaracwx"},"content":" * DukeException is a custom exception class used to represent exceptions specific to the Duke program.","lastModifiedDate":"2023-10-03"},{"lineNumber":5,"author":{"gitId":"Barbaracwx"},"content":" */","lastModifiedDate":"2023-10-03"},{"lineNumber":6,"author":{"gitId":"Barbaracwx"},"content":"public class CaraException extends Exception {","lastModifiedDate":"2023-10-03"},{"lineNumber":7,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":8,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":9,"author":{"gitId":"Barbaracwx"},"content":"     * Constructs a DukeException with the specified error message.","lastModifiedDate":"2023-10-03"},{"lineNumber":10,"author":{"gitId":"Barbaracwx"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":11,"author":{"gitId":"Barbaracwx"},"content":"     * @param message The error message associated with the exception.","lastModifiedDate":"2023-10-03"},{"lineNumber":12,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":13,"author":{"gitId":"Barbaracwx"},"content":"    public CaraException(String message) {","lastModifiedDate":"2023-10-03"},{"lineNumber":14,"author":{"gitId":"Barbaracwx"},"content":"        super(message);","lastModifiedDate":"2023-09-15"},{"lineNumber":15,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":16,"author":{"gitId":"Barbaracwx"},"content":"}","lastModifiedDate":"2023-09-15"}],"authorContributionMap":{"Barbaracwx":16}},{"path":"src/main/java/Cara/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Barbaracwx"},"content":"package Cara;","lastModifiedDate":"2023-10-03"},{"lineNumber":2,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":3,"author":{"gitId":"Barbaracwx"},"content":"import Commands.*;","lastModifiedDate":"2023-10-03"},{"lineNumber":4,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":5,"author":{"gitId":"Barbaracwx"},"content":"/**","lastModifiedDate":"2023-10-03"},{"lineNumber":6,"author":{"gitId":"Barbaracwx"},"content":" * The Parser class is responsible for parsing user input and generating corresponding commands.","lastModifiedDate":"2023-10-03"},{"lineNumber":7,"author":{"gitId":"Barbaracwx"},"content":" */","lastModifiedDate":"2023-10-03"},{"lineNumber":8,"author":{"gitId":"Barbaracwx"},"content":"public class Parser {","lastModifiedDate":"2023-10-02"},{"lineNumber":9,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":10,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":11,"author":{"gitId":"Barbaracwx"},"content":"     * Parses the user input and returns the corresponding command.","lastModifiedDate":"2023-10-03"},{"lineNumber":12,"author":{"gitId":"Barbaracwx"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":13,"author":{"gitId":"Barbaracwx"},"content":"     * @param input The user input to be parsed.","lastModifiedDate":"2023-10-03"},{"lineNumber":14,"author":{"gitId":"Barbaracwx"},"content":"     * @return A Command object based on the parsed input.","lastModifiedDate":"2023-10-03"},{"lineNumber":15,"author":{"gitId":"Barbaracwx"},"content":"     * @throws CaraException If there is an issue with parsing the input.","lastModifiedDate":"2023-10-03"},{"lineNumber":16,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":17,"author":{"gitId":"Barbaracwx"},"content":"    public static Command parse(String input) throws CaraException {","lastModifiedDate":"2023-10-03"},{"lineNumber":18,"author":{"gitId":"Barbaracwx"},"content":"        // Split the input into words","lastModifiedDate":"2023-10-02"},{"lineNumber":19,"author":{"gitId":"Barbaracwx"},"content":"        String[] words \u003d input.split(\" \");","lastModifiedDate":"2023-10-02"},{"lineNumber":20,"author":{"gitId":"Barbaracwx"},"content":"        String command \u003d words[0].toLowerCase(); // Extract the first word as the command","lastModifiedDate":"2023-10-02"},{"lineNumber":21,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":22,"author":{"gitId":"Barbaracwx"},"content":"        switch (command) {","lastModifiedDate":"2023-10-02"},{"lineNumber":23,"author":{"gitId":"Barbaracwx"},"content":"        case \"bye\":","lastModifiedDate":"2023-10-02"},{"lineNumber":24,"author":{"gitId":"Barbaracwx"},"content":"            return new ExitCommand(); // Create an ExitCommand","lastModifiedDate":"2023-10-02"},{"lineNumber":25,"author":{"gitId":"Barbaracwx"},"content":"        case \"list\":","lastModifiedDate":"2023-10-02"},{"lineNumber":26,"author":{"gitId":"Barbaracwx"},"content":"            return new ListCommand(); // Create a ListCommand","lastModifiedDate":"2023-10-02"},{"lineNumber":27,"author":{"gitId":"Barbaracwx"},"content":"        case \"mark\":","lastModifiedDate":"2023-10-02"},{"lineNumber":28,"author":{"gitId":"Barbaracwx"},"content":"            return new MarkCommand(input); // Create a MarkCommand with the input as a parameter","lastModifiedDate":"2023-10-02"},{"lineNumber":29,"author":{"gitId":"Barbaracwx"},"content":"        case \"unmark\":","lastModifiedDate":"2023-10-02"},{"lineNumber":30,"author":{"gitId":"Barbaracwx"},"content":"            return new UnmarkCommand(input); // Create an UnmarkCommand with the input as a parameter","lastModifiedDate":"2023-10-02"},{"lineNumber":31,"author":{"gitId":"Barbaracwx"},"content":"        case \"delete\":","lastModifiedDate":"2023-10-02"},{"lineNumber":32,"author":{"gitId":"Barbaracwx"},"content":"            return new DeleteCommand(input); // Create a DeleteCommand with the input as a parameter","lastModifiedDate":"2023-10-02"},{"lineNumber":33,"author":{"gitId":"Barbaracwx"},"content":"        case \"find\":","lastModifiedDate":"2023-10-03"},{"lineNumber":34,"author":{"gitId":"Barbaracwx"},"content":"            return new FindCommand(input); // Create a FindCommand with the input as a parameter","lastModifiedDate":"2023-10-03"},{"lineNumber":35,"author":{"gitId":"Barbaracwx"},"content":"        case \"todo\":","lastModifiedDate":"2023-10-02"},{"lineNumber":36,"author":{"gitId":"Barbaracwx"},"content":"        case \"event\":","lastModifiedDate":"2023-10-02"},{"lineNumber":37,"author":{"gitId":"Barbaracwx"},"content":"        case \"deadline\":","lastModifiedDate":"2023-10-02"},{"lineNumber":38,"author":{"gitId":"Barbaracwx"},"content":"            return new AddCommand(input); //Create a AddCommand with the input as a parameter","lastModifiedDate":"2023-10-03"},{"lineNumber":39,"author":{"gitId":"Barbaracwx"},"content":"        default:","lastModifiedDate":"2023-10-02"},{"lineNumber":40,"author":{"gitId":"Barbaracwx"},"content":"            throw new CaraException(\" ☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-10-03"},{"lineNumber":41,"author":{"gitId":"Barbaracwx"},"content":"        }","lastModifiedDate":"2023-10-02"},{"lineNumber":42,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-10-02"},{"lineNumber":43,"author":{"gitId":"Barbaracwx"},"content":"}","lastModifiedDate":"2023-10-02"}],"authorContributionMap":{"Barbaracwx":43}},{"path":"src/main/java/Cara/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Barbaracwx"},"content":"package Cara;","lastModifiedDate":"2023-10-03"},{"lineNumber":2,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":3,"author":{"gitId":"Barbaracwx"},"content":"import Tasks.Task;","lastModifiedDate":"2023-10-03"},{"lineNumber":4,"author":{"gitId":"Barbaracwx"},"content":"import Tasks.TasksHandler;","lastModifiedDate":"2023-10-03"},{"lineNumber":5,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":6,"author":{"gitId":"Barbaracwx"},"content":"import java.io.*;","lastModifiedDate":"2023-10-02"},{"lineNumber":7,"author":{"gitId":"Barbaracwx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-02"},{"lineNumber":8,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":9,"author":{"gitId":"Barbaracwx"},"content":"/**","lastModifiedDate":"2023-10-03"},{"lineNumber":10,"author":{"gitId":"Barbaracwx"},"content":" * The Storage class is responsible for loading and saving tasks from/to a file.","lastModifiedDate":"2023-10-03"},{"lineNumber":11,"author":{"gitId":"Barbaracwx"},"content":" */","lastModifiedDate":"2023-10-03"},{"lineNumber":12,"author":{"gitId":"Barbaracwx"},"content":"public class Storage {","lastModifiedDate":"2023-10-02"},{"lineNumber":13,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":14,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":15,"author":{"gitId":"Barbaracwx"},"content":"     * Constructs a Storage instance with the specified file path (ignored).","lastModifiedDate":"2023-10-03"},{"lineNumber":16,"author":{"gitId":"Barbaracwx"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":17,"author":{"gitId":"Barbaracwx"},"content":"     * @param ignoredFilePath The path to the file (ignored).","lastModifiedDate":"2023-10-03"},{"lineNumber":18,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":19,"author":{"gitId":"Barbaracwx"},"content":"    public Storage(String ignoredFilePath) {","lastModifiedDate":"2023-10-02"},{"lineNumber":20,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-10-02"},{"lineNumber":21,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":22,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":23,"author":{"gitId":"Barbaracwx"},"content":"     * Loads tasks from a file and returns them as an ArrayList.","lastModifiedDate":"2023-10-03"},{"lineNumber":24,"author":{"gitId":"Barbaracwx"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":25,"author":{"gitId":"Barbaracwx"},"content":"     * @return An ArrayList of tasks loaded from the file.","lastModifiedDate":"2023-10-03"},{"lineNumber":26,"author":{"gitId":"Barbaracwx"},"content":"     * @throws IOException   If an I/O error occurs during file reading.","lastModifiedDate":"2023-10-03"},{"lineNumber":27,"author":{"gitId":"Barbaracwx"},"content":"     * @throws CaraException If there is an issue with Duke while reading the file.","lastModifiedDate":"2023-10-03"},{"lineNumber":28,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":29,"author":{"gitId":"Barbaracwx"},"content":"    public ArrayList\u003cTask\u003e loadTasks() throws IOException, CaraException {","lastModifiedDate":"2023-10-03"},{"lineNumber":30,"author":{"gitId":"Barbaracwx"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-02"},{"lineNumber":31,"author":{"gitId":"Barbaracwx"},"content":"        TasksHandler.readFromFile(tasks); // Pass an ArrayList\u003cTask\u003e to the readFromFile() method","lastModifiedDate":"2023-10-02"},{"lineNumber":32,"author":{"gitId":"Barbaracwx"},"content":"        return tasks;","lastModifiedDate":"2023-10-02"},{"lineNumber":33,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-10-02"},{"lineNumber":34,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":35,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":36,"author":{"gitId":"Barbaracwx"},"content":"     * Saves tasks to a file.","lastModifiedDate":"2023-10-03"},{"lineNumber":37,"author":{"gitId":"Barbaracwx"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":38,"author":{"gitId":"Barbaracwx"},"content":"     * @param tasks The ArrayList of tasks to be saved to the file.","lastModifiedDate":"2023-10-03"},{"lineNumber":39,"author":{"gitId":"Barbaracwx"},"content":"     * @throws IOException If an I/O error occurs during file writing.","lastModifiedDate":"2023-10-03"},{"lineNumber":40,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":41,"author":{"gitId":"Barbaracwx"},"content":"    public static void saveTasks(ArrayList\u003cTask\u003e tasks) throws IOException {","lastModifiedDate":"2023-10-02"},{"lineNumber":42,"author":{"gitId":"Barbaracwx"},"content":"        TasksHandler.writeToFile(tasks); // Pass the provided ArrayList\u003cTask\u003e to the writeToFile method","lastModifiedDate":"2023-10-02"},{"lineNumber":43,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-10-02"},{"lineNumber":44,"author":{"gitId":"Barbaracwx"},"content":"}","lastModifiedDate":"2023-10-02"}],"authorContributionMap":{"Barbaracwx":44}},{"path":"src/main/java/Cara/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Barbaracwx"},"content":"package Cara;","lastModifiedDate":"2023-10-03"},{"lineNumber":2,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":3,"author":{"gitId":"Barbaracwx"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-10-02"},{"lineNumber":4,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":5,"author":{"gitId":"Barbaracwx"},"content":"/**","lastModifiedDate":"2023-10-03"},{"lineNumber":6,"author":{"gitId":"Barbaracwx"},"content":" * The Ui class is responsible for handling user interaction.","lastModifiedDate":"2023-10-03"},{"lineNumber":7,"author":{"gitId":"Barbaracwx"},"content":" * It provides methods to read user input and display messages.","lastModifiedDate":"2023-10-03"},{"lineNumber":8,"author":{"gitId":"Barbaracwx"},"content":" */","lastModifiedDate":"2023-10-03"},{"lineNumber":9,"author":{"gitId":"Barbaracwx"},"content":"public class Ui {","lastModifiedDate":"2023-10-02"},{"lineNumber":10,"author":{"gitId":"Barbaracwx"},"content":"    private final Scanner scanner;","lastModifiedDate":"2023-10-02"},{"lineNumber":11,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":12,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":13,"author":{"gitId":"Barbaracwx"},"content":"     * Constructs an Ui object with a Scanner for reading user input.","lastModifiedDate":"2023-10-03"},{"lineNumber":14,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":15,"author":{"gitId":"Barbaracwx"},"content":"    public Ui() {","lastModifiedDate":"2023-10-02"},{"lineNumber":16,"author":{"gitId":"Barbaracwx"},"content":"        this.scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-10-02"},{"lineNumber":17,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-10-02"},{"lineNumber":18,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":19,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":20,"author":{"gitId":"Barbaracwx"},"content":"     * Reads a command entered by the user.","lastModifiedDate":"2023-10-03"},{"lineNumber":21,"author":{"gitId":"Barbaracwx"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":22,"author":{"gitId":"Barbaracwx"},"content":"     * @return The command entered by the user as a string.","lastModifiedDate":"2023-10-03"},{"lineNumber":23,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":24,"author":{"gitId":"Barbaracwx"},"content":"    public String readCommand() {","lastModifiedDate":"2023-10-02"},{"lineNumber":25,"author":{"gitId":"Barbaracwx"},"content":"        return scanner.nextLine();","lastModifiedDate":"2023-10-02"},{"lineNumber":26,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-10-02"},{"lineNumber":27,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":28,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":29,"author":{"gitId":"Barbaracwx"},"content":"     * Prints a welcome message when the program starts.","lastModifiedDate":"2023-10-03"},{"lineNumber":30,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":31,"author":{"gitId":"Barbaracwx"},"content":"    public void printWelcomeMessage() {","lastModifiedDate":"2023-10-02"},{"lineNumber":32,"author":{"gitId":"Barbaracwx"},"content":"        System.out.println(\"____________________________________________________________\");","lastModifiedDate":"2023-10-02"},{"lineNumber":33,"author":{"gitId":"Barbaracwx"},"content":"        System.out.println(\"Hello! I\u0027m\");","lastModifiedDate":"2023-10-02"},{"lineNumber":34,"author":{"gitId":"Barbaracwx"},"content":"        System.out.println(\" ________  ________  ________  ________     \\n\" +","lastModifiedDate":"2023-10-02"},{"lineNumber":35,"author":{"gitId":"Barbaracwx"},"content":"                \"|\\\\   ____\\\\|\\\\   __  \\\\|\\\\   __  \\\\|\\\\   __  \\\\    \\n\" +","lastModifiedDate":"2023-10-02"},{"lineNumber":36,"author":{"gitId":"Barbaracwx"},"content":"                \"\\\\ \\\\  \\\\___|\\\\ \\\\  \\\\|\\\\  \\\\ \\\\  \\\\|\\\\  \\\\ \\\\  \\\\|\\\\  \\\\   \\n\" +","lastModifiedDate":"2023-10-02"},{"lineNumber":37,"author":{"gitId":"Barbaracwx"},"content":"                \" \\\\ \\\\  \\\\    \\\\ \\\\   __  \\\\ \\\\   _  _\\\\ \\\\   __  \\\\  \\n\" +","lastModifiedDate":"2023-10-02"},{"lineNumber":38,"author":{"gitId":"Barbaracwx"},"content":"                \"  \\\\ \\\\  \\\\____\\\\ \\\\  \\\\ \\\\  \\\\ \\\\  \\\\\\\\  \\\\\\\\ \\\\  \\\\ \\\\  \\\\ \\n\" +","lastModifiedDate":"2023-10-02"},{"lineNumber":39,"author":{"gitId":"Barbaracwx"},"content":"                \"   \\\\ \\\\_______\\\\ \\\\__\\\\ \\\\__\\\\ \\\\__\\\\\\\\ _\\\\\\\\ \\\\__\\\\ \\\\__\\\\\\n\" +","lastModifiedDate":"2023-10-02"},{"lineNumber":40,"author":{"gitId":"Barbaracwx"},"content":"                \"    \\\\|_______|\\\\|__|\\\\|__|\\\\|__|\\\\|__|\\\\|__|\\\\|__|\\n\" +","lastModifiedDate":"2023-10-02"},{"lineNumber":41,"author":{"gitId":"Barbaracwx"},"content":"                \"                                            \");","lastModifiedDate":"2023-10-02"},{"lineNumber":42,"author":{"gitId":"Barbaracwx"},"content":"        System.out.println(\"What can I do for you?\");","lastModifiedDate":"2023-10-02"},{"lineNumber":43,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-10-02"},{"lineNumber":44,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":45,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":46,"author":{"gitId":"Barbaracwx"},"content":"     * Prints a goodbye message when the program exits.","lastModifiedDate":"2023-10-03"},{"lineNumber":47,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":48,"author":{"gitId":"Barbaracwx"},"content":"    public void printByeMessage() {","lastModifiedDate":"2023-10-02"},{"lineNumber":49,"author":{"gitId":"Barbaracwx"},"content":"        System.out.println(\"Bye! Hope to see you again soon!\");","lastModifiedDate":"2023-10-02"},{"lineNumber":50,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-10-02"},{"lineNumber":51,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":52,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":53,"author":{"gitId":"Barbaracwx"},"content":"     * Throws a DukeException with an error message for loading errors.","lastModifiedDate":"2023-10-03"},{"lineNumber":54,"author":{"gitId":"Barbaracwx"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":55,"author":{"gitId":"Barbaracwx"},"content":"     * @throws CaraException If there is an error loading tasks from a file.","lastModifiedDate":"2023-10-03"},{"lineNumber":56,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":57,"author":{"gitId":"Barbaracwx"},"content":"    public void showLoadingError() throws CaraException {","lastModifiedDate":"2023-10-03"},{"lineNumber":58,"author":{"gitId":"Barbaracwx"},"content":"        throw new CaraException(\"Error reading from file. Unable to load tasks.\");","lastModifiedDate":"2023-10-03"},{"lineNumber":59,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-10-02"},{"lineNumber":60,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":61,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":62,"author":{"gitId":"Barbaracwx"},"content":"     * Prints a horizontal line separator.","lastModifiedDate":"2023-10-03"},{"lineNumber":63,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":64,"author":{"gitId":"Barbaracwx"},"content":"    public void showLine() {","lastModifiedDate":"2023-10-02"},{"lineNumber":65,"author":{"gitId":"Barbaracwx"},"content":"        System.out.println(\"____________________________________________________________\");","lastModifiedDate":"2023-10-02"},{"lineNumber":66,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-10-02"},{"lineNumber":67,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":68,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":69,"author":{"gitId":"Barbaracwx"},"content":"     * Displays an error message to the user.","lastModifiedDate":"2023-10-03"},{"lineNumber":70,"author":{"gitId":"Barbaracwx"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":71,"author":{"gitId":"Barbaracwx"},"content":"     * @param errorMessage The error message to be displayed.","lastModifiedDate":"2023-10-03"},{"lineNumber":72,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":73,"author":{"gitId":"Barbaracwx"},"content":"    public void showError(String errorMessage) {","lastModifiedDate":"2023-10-02"},{"lineNumber":74,"author":{"gitId":"Barbaracwx"},"content":"        System.out.println(errorMessage);","lastModifiedDate":"2023-10-03"},{"lineNumber":75,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-10-02"},{"lineNumber":76,"author":{"gitId":"Barbaracwx"},"content":"}","lastModifiedDate":"2023-10-02"}],"authorContributionMap":{"Barbaracwx":76}},{"path":"src/main/java/Commands/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Barbaracwx"},"content":"package Commands;","lastModifiedDate":"2023-10-03"},{"lineNumber":2,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":3,"author":{"gitId":"Barbaracwx"},"content":"import Cara.*;","lastModifiedDate":"2023-10-03"},{"lineNumber":4,"author":{"gitId":"Barbaracwx"},"content":"import Tasks.Task;","lastModifiedDate":"2023-10-03"},{"lineNumber":5,"author":{"gitId":"Barbaracwx"},"content":"import Tasks.TaskList;","lastModifiedDate":"2023-10-03"},{"lineNumber":6,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":7,"author":{"gitId":"Barbaracwx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-03"},{"lineNumber":8,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":9,"author":{"gitId":"Barbaracwx"},"content":"/**","lastModifiedDate":"2023-10-03"},{"lineNumber":10,"author":{"gitId":"Barbaracwx"},"content":" * Represents a command to add a task to the task list.","lastModifiedDate":"2023-10-03"},{"lineNumber":11,"author":{"gitId":"Barbaracwx"},"content":" */","lastModifiedDate":"2023-10-03"},{"lineNumber":12,"author":{"gitId":"Barbaracwx"},"content":"public class AddCommand implements Command {","lastModifiedDate":"2023-10-02"},{"lineNumber":13,"author":{"gitId":"Barbaracwx"},"content":"    private final String input;","lastModifiedDate":"2023-10-02"},{"lineNumber":14,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":15,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":16,"author":{"gitId":"Barbaracwx"},"content":"     * Constructs an AddCommand with the given input.","lastModifiedDate":"2023-10-03"},{"lineNumber":17,"author":{"gitId":"Barbaracwx"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":18,"author":{"gitId":"Barbaracwx"},"content":"     * @param input The input string representing the task to be added.","lastModifiedDate":"2023-10-03"},{"lineNumber":19,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":20,"author":{"gitId":"Barbaracwx"},"content":"    public AddCommand(String input) {","lastModifiedDate":"2023-10-02"},{"lineNumber":21,"author":{"gitId":"Barbaracwx"},"content":"        this.input \u003d input;","lastModifiedDate":"2023-10-02"},{"lineNumber":22,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-10-02"},{"lineNumber":23,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":24,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":25,"author":{"gitId":"Barbaracwx"},"content":"     * Executes the AddCommand by adding the task to the task list.","lastModifiedDate":"2023-10-03"},{"lineNumber":26,"author":{"gitId":"Barbaracwx"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":27,"author":{"gitId":"Barbaracwx"},"content":"     * @param tasks   The list of tasks.","lastModifiedDate":"2023-10-03"},{"lineNumber":28,"author":{"gitId":"Barbaracwx"},"content":"     * @param ui      The user interface.","lastModifiedDate":"2023-10-03"},{"lineNumber":29,"author":{"gitId":"Barbaracwx"},"content":"     * @param storage The storage manager.","lastModifiedDate":"2023-10-03"},{"lineNumber":30,"author":{"gitId":"Barbaracwx"},"content":"     * @throws CaraException If an error occurs during task addition.","lastModifiedDate":"2023-10-03"},{"lineNumber":31,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":32,"author":{"gitId":"Barbaracwx"},"content":"    @Override","lastModifiedDate":"2023-10-02"},{"lineNumber":33,"author":{"gitId":"Barbaracwx"},"content":"    public void execute(ArrayList\u003cTask\u003e tasks, Ui ui, Storage storage) throws CaraException {","lastModifiedDate":"2023-10-03"},{"lineNumber":34,"author":{"gitId":"Barbaracwx"},"content":"        TaskList.addTaskToList(input, tasks);","lastModifiedDate":"2023-10-02"},{"lineNumber":35,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-10-02"},{"lineNumber":36,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":37,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":38,"author":{"gitId":"Barbaracwx"},"content":"     * Indicates whether this command triggers program exit.","lastModifiedDate":"2023-10-03"},{"lineNumber":39,"author":{"gitId":"Barbaracwx"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":40,"author":{"gitId":"Barbaracwx"},"content":"     * @return False because this command does not indicate program exit.","lastModifiedDate":"2023-10-03"},{"lineNumber":41,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":42,"author":{"gitId":"Barbaracwx"},"content":"    @Override","lastModifiedDate":"2023-10-02"},{"lineNumber":43,"author":{"gitId":"Barbaracwx"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-10-02"},{"lineNumber":44,"author":{"gitId":"Barbaracwx"},"content":"        return false;","lastModifiedDate":"2023-10-03"},{"lineNumber":45,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-10-02"},{"lineNumber":46,"author":{"gitId":"Barbaracwx"},"content":"}","lastModifiedDate":"2023-10-02"}],"authorContributionMap":{"Barbaracwx":46}},{"path":"src/main/java/Commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Barbaracwx"},"content":"package Commands;","lastModifiedDate":"2023-10-03"},{"lineNumber":2,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":3,"author":{"gitId":"Barbaracwx"},"content":"import Cara.CaraException;","lastModifiedDate":"2023-10-03"},{"lineNumber":4,"author":{"gitId":"Barbaracwx"},"content":"import Cara.Storage;","lastModifiedDate":"2023-10-03"},{"lineNumber":5,"author":{"gitId":"Barbaracwx"},"content":"import Tasks.Task;","lastModifiedDate":"2023-10-03"},{"lineNumber":6,"author":{"gitId":"Barbaracwx"},"content":"import Cara.Ui;","lastModifiedDate":"2023-10-03"},{"lineNumber":7,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":8,"author":{"gitId":"Barbaracwx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-03"},{"lineNumber":9,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":10,"author":{"gitId":"Barbaracwx"},"content":"/**","lastModifiedDate":"2023-10-03"},{"lineNumber":11,"author":{"gitId":"Barbaracwx"},"content":" * The Command interface represents an action that can be executed by Duke.","lastModifiedDate":"2023-10-03"},{"lineNumber":12,"author":{"gitId":"Barbaracwx"},"content":" * Implementing classes should define the behavior of the execute method.","lastModifiedDate":"2023-10-03"},{"lineNumber":13,"author":{"gitId":"Barbaracwx"},"content":" */","lastModifiedDate":"2023-10-03"},{"lineNumber":14,"author":{"gitId":"Barbaracwx"},"content":"public interface Command {","lastModifiedDate":"2023-10-02"},{"lineNumber":15,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":16,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":17,"author":{"gitId":"Barbaracwx"},"content":"     * Executes the command with the given parameters.","lastModifiedDate":"2023-10-03"},{"lineNumber":18,"author":{"gitId":"Barbaracwx"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":19,"author":{"gitId":"Barbaracwx"},"content":"     * @param tasks   The list of tasks.","lastModifiedDate":"2023-10-03"},{"lineNumber":20,"author":{"gitId":"Barbaracwx"},"content":"     * @param ui      The user interface.","lastModifiedDate":"2023-10-03"},{"lineNumber":21,"author":{"gitId":"Barbaracwx"},"content":"     * @param storage The storage manager.","lastModifiedDate":"2023-10-03"},{"lineNumber":22,"author":{"gitId":"Barbaracwx"},"content":"     * @throws CaraException If an error occurs during command execution.","lastModifiedDate":"2023-10-03"},{"lineNumber":23,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":24,"author":{"gitId":"Barbaracwx"},"content":"    void execute(ArrayList\u003cTask\u003e tasks, Ui ui, Storage storage) throws CaraException;","lastModifiedDate":"2023-10-03"},{"lineNumber":25,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":26,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":27,"author":{"gitId":"Barbaracwx"},"content":"     * Checks if this command indicates program exit.","lastModifiedDate":"2023-10-03"},{"lineNumber":28,"author":{"gitId":"Barbaracwx"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":29,"author":{"gitId":"Barbaracwx"},"content":"     * @return True if the command indicates program exit, false otherwise.","lastModifiedDate":"2023-10-03"},{"lineNumber":30,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":31,"author":{"gitId":"Barbaracwx"},"content":"    boolean isExit();","lastModifiedDate":"2023-10-02"},{"lineNumber":32,"author":{"gitId":"Barbaracwx"},"content":"}","lastModifiedDate":"2023-10-02"}],"authorContributionMap":{"Barbaracwx":32}},{"path":"src/main/java/Commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Barbaracwx"},"content":"package Commands;","lastModifiedDate":"2023-10-03"},{"lineNumber":2,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":3,"author":{"gitId":"Barbaracwx"},"content":"import Cara.*;","lastModifiedDate":"2023-10-03"},{"lineNumber":4,"author":{"gitId":"Barbaracwx"},"content":"import Tasks.Task;","lastModifiedDate":"2023-10-03"},{"lineNumber":5,"author":{"gitId":"Barbaracwx"},"content":"import Tasks.TaskList;","lastModifiedDate":"2023-10-03"},{"lineNumber":6,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":7,"author":{"gitId":"Barbaracwx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-03"},{"lineNumber":8,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":9,"author":{"gitId":"Barbaracwx"},"content":"/**","lastModifiedDate":"2023-10-03"},{"lineNumber":10,"author":{"gitId":"Barbaracwx"},"content":" * Represents a command to delete a task from the task list.","lastModifiedDate":"2023-10-03"},{"lineNumber":11,"author":{"gitId":"Barbaracwx"},"content":" */","lastModifiedDate":"2023-10-03"},{"lineNumber":12,"author":{"gitId":"Barbaracwx"},"content":"public class DeleteCommand implements Command {","lastModifiedDate":"2023-10-02"},{"lineNumber":13,"author":{"gitId":"Barbaracwx"},"content":"    private final String input;","lastModifiedDate":"2023-10-02"},{"lineNumber":14,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":15,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":16,"author":{"gitId":"Barbaracwx"},"content":"     * Constructs a DeleteCommand with the given input.","lastModifiedDate":"2023-10-03"},{"lineNumber":17,"author":{"gitId":"Barbaracwx"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":18,"author":{"gitId":"Barbaracwx"},"content":"     * @param input The input string representing the task to be deleted.","lastModifiedDate":"2023-10-03"},{"lineNumber":19,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":20,"author":{"gitId":"Barbaracwx"},"content":"    public DeleteCommand(String input) {","lastModifiedDate":"2023-10-02"},{"lineNumber":21,"author":{"gitId":"Barbaracwx"},"content":"        this.input \u003d input;","lastModifiedDate":"2023-10-02"},{"lineNumber":22,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-10-02"},{"lineNumber":23,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":24,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":25,"author":{"gitId":"Barbaracwx"},"content":"     * Executes the DeleteCommand by deleting the task from the task list.","lastModifiedDate":"2023-10-03"},{"lineNumber":26,"author":{"gitId":"Barbaracwx"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":27,"author":{"gitId":"Barbaracwx"},"content":"     * @param tasks   The list of tasks.","lastModifiedDate":"2023-10-03"},{"lineNumber":28,"author":{"gitId":"Barbaracwx"},"content":"     * @param ui      The user interface.","lastModifiedDate":"2023-10-03"},{"lineNumber":29,"author":{"gitId":"Barbaracwx"},"content":"     * @param storage The storage manager.","lastModifiedDate":"2023-10-03"},{"lineNumber":30,"author":{"gitId":"Barbaracwx"},"content":"     * @throws CaraException If an error occurs during task deletion.","lastModifiedDate":"2023-10-03"},{"lineNumber":31,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":32,"author":{"gitId":"Barbaracwx"},"content":"    @Override","lastModifiedDate":"2023-10-02"},{"lineNumber":33,"author":{"gitId":"Barbaracwx"},"content":"    public void execute(ArrayList\u003cTask\u003e tasks, Ui ui, Storage storage) throws CaraException {","lastModifiedDate":"2023-10-03"},{"lineNumber":34,"author":{"gitId":"Barbaracwx"},"content":"        TaskList.deleteTask(input, tasks);","lastModifiedDate":"2023-10-03"},{"lineNumber":35,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-10-02"},{"lineNumber":36,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":37,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":38,"author":{"gitId":"Barbaracwx"},"content":"     * Indicates whether this command triggers program exit.","lastModifiedDate":"2023-10-03"},{"lineNumber":39,"author":{"gitId":"Barbaracwx"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":40,"author":{"gitId":"Barbaracwx"},"content":"     * @return False because this command does not indicate program exit.","lastModifiedDate":"2023-10-03"},{"lineNumber":41,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":42,"author":{"gitId":"Barbaracwx"},"content":"    @Override","lastModifiedDate":"2023-10-02"},{"lineNumber":43,"author":{"gitId":"Barbaracwx"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-10-02"},{"lineNumber":44,"author":{"gitId":"Barbaracwx"},"content":"        return false;","lastModifiedDate":"2023-10-03"},{"lineNumber":45,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-10-02"},{"lineNumber":46,"author":{"gitId":"Barbaracwx"},"content":"}","lastModifiedDate":"2023-10-02"}],"authorContributionMap":{"Barbaracwx":46}},{"path":"src/main/java/Commands/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Barbaracwx"},"content":"package Commands;","lastModifiedDate":"2023-10-03"},{"lineNumber":2,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":3,"author":{"gitId":"Barbaracwx"},"content":"import Cara.Storage;","lastModifiedDate":"2023-10-03"},{"lineNumber":4,"author":{"gitId":"Barbaracwx"},"content":"import Tasks.Task;","lastModifiedDate":"2023-10-03"},{"lineNumber":5,"author":{"gitId":"Barbaracwx"},"content":"import Cara.Ui;","lastModifiedDate":"2023-10-03"},{"lineNumber":6,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":7,"author":{"gitId":"Barbaracwx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-03"},{"lineNumber":8,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":9,"author":{"gitId":"Barbaracwx"},"content":"/**","lastModifiedDate":"2023-10-03"},{"lineNumber":10,"author":{"gitId":"Barbaracwx"},"content":" * Represents a command to exit the Duke program.","lastModifiedDate":"2023-10-03"},{"lineNumber":11,"author":{"gitId":"Barbaracwx"},"content":" * The \"bye\" command is used to terminate the program.","lastModifiedDate":"2023-10-03"},{"lineNumber":12,"author":{"gitId":"Barbaracwx"},"content":" */","lastModifiedDate":"2023-10-03"},{"lineNumber":13,"author":{"gitId":"Barbaracwx"},"content":"public class ExitCommand implements Command {","lastModifiedDate":"2023-10-02"},{"lineNumber":14,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":15,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":16,"author":{"gitId":"Barbaracwx"},"content":"     * Executes the ExitCommand by displaying a farewell message.","lastModifiedDate":"2023-10-03"},{"lineNumber":17,"author":{"gitId":"Barbaracwx"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":18,"author":{"gitId":"Barbaracwx"},"content":"     * @param tasks   The list of tasks (not used in this command).","lastModifiedDate":"2023-10-03"},{"lineNumber":19,"author":{"gitId":"Barbaracwx"},"content":"     * @param ui      The user interface.","lastModifiedDate":"2023-10-03"},{"lineNumber":20,"author":{"gitId":"Barbaracwx"},"content":"     * @param storage The storage manager (not used in this command).","lastModifiedDate":"2023-10-03"},{"lineNumber":21,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":22,"author":{"gitId":"Barbaracwx"},"content":"    @Override","lastModifiedDate":"2023-10-02"},{"lineNumber":23,"author":{"gitId":"Barbaracwx"},"content":"    public void execute(ArrayList\u003cTask\u003e tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-10-03"},{"lineNumber":24,"author":{"gitId":"Barbaracwx"},"content":"        ui.printByeMessage();","lastModifiedDate":"2023-10-02"},{"lineNumber":25,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-10-02"},{"lineNumber":26,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":27,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":28,"author":{"gitId":"Barbaracwx"},"content":"     * Checks if this command indicates program exit.","lastModifiedDate":"2023-10-03"},{"lineNumber":29,"author":{"gitId":"Barbaracwx"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":30,"author":{"gitId":"Barbaracwx"},"content":"     * @return True because this command indicates program exit.","lastModifiedDate":"2023-10-03"},{"lineNumber":31,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":32,"author":{"gitId":"Barbaracwx"},"content":"    @Override","lastModifiedDate":"2023-10-02"},{"lineNumber":33,"author":{"gitId":"Barbaracwx"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-10-02"},{"lineNumber":34,"author":{"gitId":"Barbaracwx"},"content":"        return true;","lastModifiedDate":"2023-10-03"},{"lineNumber":35,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-10-02"},{"lineNumber":36,"author":{"gitId":"Barbaracwx"},"content":"}","lastModifiedDate":"2023-10-02"}],"authorContributionMap":{"Barbaracwx":36}},{"path":"src/main/java/Commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Barbaracwx"},"content":"package Commands;","lastModifiedDate":"2023-10-03"},{"lineNumber":2,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":3,"author":{"gitId":"Barbaracwx"},"content":"import Cara.*;","lastModifiedDate":"2023-10-03"},{"lineNumber":4,"author":{"gitId":"Barbaracwx"},"content":"import Tasks.Task;","lastModifiedDate":"2023-10-03"},{"lineNumber":5,"author":{"gitId":"Barbaracwx"},"content":"import Tasks.TaskList;","lastModifiedDate":"2023-10-03"},{"lineNumber":6,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":7,"author":{"gitId":"Barbaracwx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-03"},{"lineNumber":8,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":9,"author":{"gitId":"Barbaracwx"},"content":"/**","lastModifiedDate":"2023-10-03"},{"lineNumber":10,"author":{"gitId":"Barbaracwx"},"content":" * Represents a command to find tasks in the task list that match a specific keyword.","lastModifiedDate":"2023-10-03"},{"lineNumber":11,"author":{"gitId":"Barbaracwx"},"content":" */","lastModifiedDate":"2023-10-03"},{"lineNumber":12,"author":{"gitId":"Barbaracwx"},"content":"public class FindCommand implements Command {","lastModifiedDate":"2023-10-03"},{"lineNumber":13,"author":{"gitId":"Barbaracwx"},"content":"    private final String input;","lastModifiedDate":"2023-10-03"},{"lineNumber":14,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":15,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":16,"author":{"gitId":"Barbaracwx"},"content":"     * Constructs a FindCommand with the given keyword to search for.","lastModifiedDate":"2023-10-03"},{"lineNumber":17,"author":{"gitId":"Barbaracwx"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":18,"author":{"gitId":"Barbaracwx"},"content":"     * @param input The keyword to search for in the task list.","lastModifiedDate":"2023-10-03"},{"lineNumber":19,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":20,"author":{"gitId":"Barbaracwx"},"content":"    public FindCommand(String input) {","lastModifiedDate":"2023-10-03"},{"lineNumber":21,"author":{"gitId":"Barbaracwx"},"content":"        this.input \u003d input;","lastModifiedDate":"2023-10-03"},{"lineNumber":22,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-10-03"},{"lineNumber":23,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":24,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":25,"author":{"gitId":"Barbaracwx"},"content":"     * Executes the FindCommand by searching for tasks that match the keyword.","lastModifiedDate":"2023-10-03"},{"lineNumber":26,"author":{"gitId":"Barbaracwx"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":27,"author":{"gitId":"Barbaracwx"},"content":"     * @param tasks   The list of tasks.","lastModifiedDate":"2023-10-03"},{"lineNumber":28,"author":{"gitId":"Barbaracwx"},"content":"     * @param ui      The user interface.","lastModifiedDate":"2023-10-03"},{"lineNumber":29,"author":{"gitId":"Barbaracwx"},"content":"     * @param storage The storage manager (not used in this command).","lastModifiedDate":"2023-10-03"},{"lineNumber":30,"author":{"gitId":"Barbaracwx"},"content":"     * @throws CaraException If an error occurs during the task search.","lastModifiedDate":"2023-10-03"},{"lineNumber":31,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":32,"author":{"gitId":"Barbaracwx"},"content":"    @Override","lastModifiedDate":"2023-10-03"},{"lineNumber":33,"author":{"gitId":"Barbaracwx"},"content":"    public void execute(ArrayList\u003cTask\u003e tasks, Ui ui, Storage storage) throws CaraException {","lastModifiedDate":"2023-10-03"},{"lineNumber":34,"author":{"gitId":"Barbaracwx"},"content":"        TaskList.findTask(input, tasks);","lastModifiedDate":"2023-10-03"},{"lineNumber":35,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-10-03"},{"lineNumber":36,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":37,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":38,"author":{"gitId":"Barbaracwx"},"content":"     * Checks if this command indicates program exit.","lastModifiedDate":"2023-10-03"},{"lineNumber":39,"author":{"gitId":"Barbaracwx"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":40,"author":{"gitId":"Barbaracwx"},"content":"     * @return False because this command does not indicate program exit.","lastModifiedDate":"2023-10-03"},{"lineNumber":41,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":42,"author":{"gitId":"Barbaracwx"},"content":"    @Override","lastModifiedDate":"2023-10-03"},{"lineNumber":43,"author":{"gitId":"Barbaracwx"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-10-03"},{"lineNumber":44,"author":{"gitId":"Barbaracwx"},"content":"        return false;","lastModifiedDate":"2023-10-03"},{"lineNumber":45,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-10-03"},{"lineNumber":46,"author":{"gitId":"Barbaracwx"},"content":"}","lastModifiedDate":"2023-10-03"}],"authorContributionMap":{"Barbaracwx":46}},{"path":"src/main/java/Commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Barbaracwx"},"content":"package Commands;","lastModifiedDate":"2023-10-03"},{"lineNumber":2,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":3,"author":{"gitId":"Barbaracwx"},"content":"import Cara.Storage;","lastModifiedDate":"2023-10-03"},{"lineNumber":4,"author":{"gitId":"Barbaracwx"},"content":"import Tasks.Task;","lastModifiedDate":"2023-10-03"},{"lineNumber":5,"author":{"gitId":"Barbaracwx"},"content":"import Tasks.TaskList;","lastModifiedDate":"2023-10-03"},{"lineNumber":6,"author":{"gitId":"Barbaracwx"},"content":"import Cara.Ui;","lastModifiedDate":"2023-10-03"},{"lineNumber":7,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":8,"author":{"gitId":"Barbaracwx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-03"},{"lineNumber":9,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":10,"author":{"gitId":"Barbaracwx"},"content":"/**","lastModifiedDate":"2023-10-03"},{"lineNumber":11,"author":{"gitId":"Barbaracwx"},"content":" * Represents a command to list all tasks in the task list.","lastModifiedDate":"2023-10-03"},{"lineNumber":12,"author":{"gitId":"Barbaracwx"},"content":" */","lastModifiedDate":"2023-10-03"},{"lineNumber":13,"author":{"gitId":"Barbaracwx"},"content":"public class ListCommand implements Command {","lastModifiedDate":"2023-10-02"},{"lineNumber":14,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":15,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":16,"author":{"gitId":"Barbaracwx"},"content":"     * Executes the ListCommand by displaying the list of tasks.","lastModifiedDate":"2023-10-03"},{"lineNumber":17,"author":{"gitId":"Barbaracwx"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":18,"author":{"gitId":"Barbaracwx"},"content":"     * @param tasks   The list of tasks to be displayed.","lastModifiedDate":"2023-10-03"},{"lineNumber":19,"author":{"gitId":"Barbaracwx"},"content":"     * @param ui      The user interface.","lastModifiedDate":"2023-10-03"},{"lineNumber":20,"author":{"gitId":"Barbaracwx"},"content":"     * @param storage The storage manager (not used in this command).","lastModifiedDate":"2023-10-03"},{"lineNumber":21,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":22,"author":{"gitId":"Barbaracwx"},"content":"    @Override","lastModifiedDate":"2023-10-02"},{"lineNumber":23,"author":{"gitId":"Barbaracwx"},"content":"    public void execute(ArrayList\u003cTask\u003e tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-10-03"},{"lineNumber":24,"author":{"gitId":"Barbaracwx"},"content":"        TaskList.printList(tasks); // Display the list of tasks using TaskList.printList","lastModifiedDate":"2023-10-03"},{"lineNumber":25,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-10-02"},{"lineNumber":26,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":27,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":28,"author":{"gitId":"Barbaracwx"},"content":"     * Checks if this command indicates program exit.","lastModifiedDate":"2023-10-03"},{"lineNumber":29,"author":{"gitId":"Barbaracwx"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":30,"author":{"gitId":"Barbaracwx"},"content":"     * @return False because this command does not indicate program exit.","lastModifiedDate":"2023-10-03"},{"lineNumber":31,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":32,"author":{"gitId":"Barbaracwx"},"content":"    @Override","lastModifiedDate":"2023-10-02"},{"lineNumber":33,"author":{"gitId":"Barbaracwx"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-10-02"},{"lineNumber":34,"author":{"gitId":"Barbaracwx"},"content":"        return false;","lastModifiedDate":"2023-10-03"},{"lineNumber":35,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-10-02"},{"lineNumber":36,"author":{"gitId":"Barbaracwx"},"content":"}","lastModifiedDate":"2023-10-02"}],"authorContributionMap":{"Barbaracwx":36}},{"path":"src/main/java/Commands/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Barbaracwx"},"content":"package Commands;","lastModifiedDate":"2023-10-03"},{"lineNumber":2,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":3,"author":{"gitId":"Barbaracwx"},"content":"import Cara.*;","lastModifiedDate":"2023-10-03"},{"lineNumber":4,"author":{"gitId":"Barbaracwx"},"content":"import Tasks.Task;","lastModifiedDate":"2023-10-03"},{"lineNumber":5,"author":{"gitId":"Barbaracwx"},"content":"import Tasks.TaskList;","lastModifiedDate":"2023-10-03"},{"lineNumber":6,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":7,"author":{"gitId":"Barbaracwx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-03"},{"lineNumber":8,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":9,"author":{"gitId":"Barbaracwx"},"content":"/**","lastModifiedDate":"2023-10-03"},{"lineNumber":10,"author":{"gitId":"Barbaracwx"},"content":" * Represents a command to mark a task as completed in the task list.","lastModifiedDate":"2023-10-03"},{"lineNumber":11,"author":{"gitId":"Barbaracwx"},"content":" */","lastModifiedDate":"2023-10-03"},{"lineNumber":12,"author":{"gitId":"Barbaracwx"},"content":"public class MarkCommand implements Command {","lastModifiedDate":"2023-10-02"},{"lineNumber":13,"author":{"gitId":"Barbaracwx"},"content":"    private final String input;","lastModifiedDate":"2023-10-02"},{"lineNumber":14,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":15,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":16,"author":{"gitId":"Barbaracwx"},"content":"     * Constructs a MarkCommand with the given input.","lastModifiedDate":"2023-10-03"},{"lineNumber":17,"author":{"gitId":"Barbaracwx"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":18,"author":{"gitId":"Barbaracwx"},"content":"     * @param input The input string representing the task to be marked as completed.","lastModifiedDate":"2023-10-03"},{"lineNumber":19,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":20,"author":{"gitId":"Barbaracwx"},"content":"    public MarkCommand(String input) {","lastModifiedDate":"2023-10-02"},{"lineNumber":21,"author":{"gitId":"Barbaracwx"},"content":"        this.input \u003d input;","lastModifiedDate":"2023-10-02"},{"lineNumber":22,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-10-02"},{"lineNumber":23,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":24,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":25,"author":{"gitId":"Barbaracwx"},"content":"     * Executes the MarkCommand by marking the specified task as completed.","lastModifiedDate":"2023-10-03"},{"lineNumber":26,"author":{"gitId":"Barbaracwx"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":27,"author":{"gitId":"Barbaracwx"},"content":"     * @param tasks   The list of tasks.","lastModifiedDate":"2023-10-03"},{"lineNumber":28,"author":{"gitId":"Barbaracwx"},"content":"     * @param ui      The user interface.","lastModifiedDate":"2023-10-03"},{"lineNumber":29,"author":{"gitId":"Barbaracwx"},"content":"     * @param storage The storage manager (not used in this command).","lastModifiedDate":"2023-10-03"},{"lineNumber":30,"author":{"gitId":"Barbaracwx"},"content":"     * @throws CaraException If an error occurs during task marking.","lastModifiedDate":"2023-10-03"},{"lineNumber":31,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":32,"author":{"gitId":"Barbaracwx"},"content":"    @Override","lastModifiedDate":"2023-10-02"},{"lineNumber":33,"author":{"gitId":"Barbaracwx"},"content":"    public void execute(ArrayList\u003cTask\u003e tasks, Ui ui, Storage storage) throws CaraException {","lastModifiedDate":"2023-10-03"},{"lineNumber":34,"author":{"gitId":"Barbaracwx"},"content":"        TaskList.markTask(input, tasks);","lastModifiedDate":"2023-10-02"},{"lineNumber":35,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-10-02"},{"lineNumber":36,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":37,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":38,"author":{"gitId":"Barbaracwx"},"content":"     * Checks if this command indicates program exit.","lastModifiedDate":"2023-10-03"},{"lineNumber":39,"author":{"gitId":"Barbaracwx"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":40,"author":{"gitId":"Barbaracwx"},"content":"     * @return False because this command does not indicate program exit.","lastModifiedDate":"2023-10-03"},{"lineNumber":41,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":42,"author":{"gitId":"Barbaracwx"},"content":"    @Override","lastModifiedDate":"2023-10-02"},{"lineNumber":43,"author":{"gitId":"Barbaracwx"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-10-02"},{"lineNumber":44,"author":{"gitId":"Barbaracwx"},"content":"        return false;","lastModifiedDate":"2023-10-03"},{"lineNumber":45,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-10-02"},{"lineNumber":46,"author":{"gitId":"Barbaracwx"},"content":"}","lastModifiedDate":"2023-10-02"}],"authorContributionMap":{"Barbaracwx":46}},{"path":"src/main/java/Commands/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Barbaracwx"},"content":"package Commands;","lastModifiedDate":"2023-10-03"},{"lineNumber":2,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":3,"author":{"gitId":"Barbaracwx"},"content":"import Cara.*;","lastModifiedDate":"2023-10-03"},{"lineNumber":4,"author":{"gitId":"Barbaracwx"},"content":"import Tasks.Task;","lastModifiedDate":"2023-10-03"},{"lineNumber":5,"author":{"gitId":"Barbaracwx"},"content":"import Tasks.TaskList;","lastModifiedDate":"2023-10-03"},{"lineNumber":6,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":7,"author":{"gitId":"Barbaracwx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-03"},{"lineNumber":8,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":9,"author":{"gitId":"Barbaracwx"},"content":"/**","lastModifiedDate":"2023-10-03"},{"lineNumber":10,"author":{"gitId":"Barbaracwx"},"content":" * The UnmarkCommand class represents a command to unmark a task as done.","lastModifiedDate":"2023-10-03"},{"lineNumber":11,"author":{"gitId":"Barbaracwx"},"content":" * It implements the Command interface.","lastModifiedDate":"2023-10-03"},{"lineNumber":12,"author":{"gitId":"Barbaracwx"},"content":" */","lastModifiedDate":"2023-10-03"},{"lineNumber":13,"author":{"gitId":"Barbaracwx"},"content":"public class UnmarkCommand implements Command {","lastModifiedDate":"2023-10-02"},{"lineNumber":14,"author":{"gitId":"Barbaracwx"},"content":"    private final String input;","lastModifiedDate":"2023-10-02"},{"lineNumber":15,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":16,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":17,"author":{"gitId":"Barbaracwx"},"content":"     * Constructs an UnmarkCommand with the specified input.","lastModifiedDate":"2023-10-03"},{"lineNumber":18,"author":{"gitId":"Barbaracwx"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":19,"author":{"gitId":"Barbaracwx"},"content":"     * @param input The input string that specifies the task to be unmarked.","lastModifiedDate":"2023-10-03"},{"lineNumber":20,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":21,"author":{"gitId":"Barbaracwx"},"content":"    public UnmarkCommand(String input) {","lastModifiedDate":"2023-10-02"},{"lineNumber":22,"author":{"gitId":"Barbaracwx"},"content":"        this.input \u003d input;","lastModifiedDate":"2023-10-02"},{"lineNumber":23,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-10-02"},{"lineNumber":24,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":25,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":26,"author":{"gitId":"Barbaracwx"},"content":"     * Executes the UnmarkCommand to unmark a task as done.","lastModifiedDate":"2023-10-03"},{"lineNumber":27,"author":{"gitId":"Barbaracwx"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":28,"author":{"gitId":"Barbaracwx"},"content":"     * @param tasks   The list of tasks to be operated on.","lastModifiedDate":"2023-10-03"},{"lineNumber":29,"author":{"gitId":"Barbaracwx"},"content":"     * @param ui      The user interface for displaying messages.","lastModifiedDate":"2023-10-03"},{"lineNumber":30,"author":{"gitId":"Barbaracwx"},"content":"     * @param storage The storage for saving tasks to a file.","lastModifiedDate":"2023-10-03"},{"lineNumber":31,"author":{"gitId":"Barbaracwx"},"content":"     * @throws CaraException If there is an error during the unmarking process.","lastModifiedDate":"2023-10-03"},{"lineNumber":32,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":33,"author":{"gitId":"Barbaracwx"},"content":"    @Override","lastModifiedDate":"2023-10-02"},{"lineNumber":34,"author":{"gitId":"Barbaracwx"},"content":"    public void execute(ArrayList\u003cTask\u003e tasks, Ui ui, Storage storage) throws CaraException {","lastModifiedDate":"2023-10-03"},{"lineNumber":35,"author":{"gitId":"Barbaracwx"},"content":"        TaskList.unmarkTask(input, tasks);","lastModifiedDate":"2023-10-02"},{"lineNumber":36,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-10-02"},{"lineNumber":37,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":38,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":39,"author":{"gitId":"Barbaracwx"},"content":"     * Indicates whether this command represents a program exit.","lastModifiedDate":"2023-10-03"},{"lineNumber":40,"author":{"gitId":"Barbaracwx"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":41,"author":{"gitId":"Barbaracwx"},"content":"     * @return False, as this command does not indicate program exit.","lastModifiedDate":"2023-10-03"},{"lineNumber":42,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":43,"author":{"gitId":"Barbaracwx"},"content":"    @Override","lastModifiedDate":"2023-10-02"},{"lineNumber":44,"author":{"gitId":"Barbaracwx"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-10-02"},{"lineNumber":45,"author":{"gitId":"Barbaracwx"},"content":"        return false;","lastModifiedDate":"2023-10-03"},{"lineNumber":46,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-10-02"},{"lineNumber":47,"author":{"gitId":"Barbaracwx"},"content":"}","lastModifiedDate":"2023-10-02"}],"authorContributionMap":{"Barbaracwx":47}},{"path":"src/main/java/Tasks/DeadlineTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Barbaracwx"},"content":"package Tasks;","lastModifiedDate":"2023-10-03"},{"lineNumber":2,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":3,"author":{"gitId":"Barbaracwx"},"content":"/**","lastModifiedDate":"2023-10-03"},{"lineNumber":4,"author":{"gitId":"Barbaracwx"},"content":" * Represents a task with a deadline, which is a subclass of Task.","lastModifiedDate":"2023-10-03"},{"lineNumber":5,"author":{"gitId":"Barbaracwx"},"content":" */","lastModifiedDate":"2023-10-03"},{"lineNumber":6,"author":{"gitId":"Barbaracwx"},"content":"public class DeadlineTask extends Task {","lastModifiedDate":"2023-09-22"},{"lineNumber":7,"author":{"gitId":"Barbaracwx"},"content":"    private final String by;","lastModifiedDate":"2023-09-15"},{"lineNumber":8,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":9,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":10,"author":{"gitId":"Barbaracwx"},"content":"     * Constructs a DeadlineTask with the given description.","lastModifiedDate":"2023-10-03"},{"lineNumber":11,"author":{"gitId":"Barbaracwx"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":12,"author":{"gitId":"Barbaracwx"},"content":"     * @param description The description of the task, including the deadline (if provided).","lastModifiedDate":"2023-10-03"},{"lineNumber":13,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":14,"author":{"gitId":"Barbaracwx"},"content":"    public DeadlineTask(String description) {","lastModifiedDate":"2023-09-22"},{"lineNumber":15,"author":{"gitId":"Barbaracwx"},"content":"        super(description);","lastModifiedDate":"2023-09-22"},{"lineNumber":16,"author":{"gitId":"Barbaracwx"},"content":"        this.by \u003d this.extractDeadline(description);","lastModifiedDate":"2023-09-22"},{"lineNumber":17,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":18,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":19,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":20,"author":{"gitId":"Barbaracwx"},"content":"     * Extracts the deadline from the task description.","lastModifiedDate":"2023-10-03"},{"lineNumber":21,"author":{"gitId":"Barbaracwx"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":22,"author":{"gitId":"Barbaracwx"},"content":"     * @param description The description of the task.","lastModifiedDate":"2023-10-03"},{"lineNumber":23,"author":{"gitId":"Barbaracwx"},"content":"     * @return The extracted deadline or \"No Deadline\" if not found.","lastModifiedDate":"2023-10-03"},{"lineNumber":24,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":25,"author":{"gitId":"Barbaracwx"},"content":"    private String extractDeadline(String description) {","lastModifiedDate":"2023-10-03"},{"lineNumber":26,"author":{"gitId":"Barbaracwx"},"content":"        int index \u003d description.indexOf(\"/by\");","lastModifiedDate":"2023-10-03"},{"lineNumber":27,"author":{"gitId":"Barbaracwx"},"content":"        return index !\u003d -1 ? description.substring(index + 3).trim() : \"No Deadline\";","lastModifiedDate":"2023-10-03"},{"lineNumber":28,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":29,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":30,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":31,"author":{"gitId":"Barbaracwx"},"content":"     * Gets the deadline associated with this task.","lastModifiedDate":"2023-10-03"},{"lineNumber":32,"author":{"gitId":"Barbaracwx"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":33,"author":{"gitId":"Barbaracwx"},"content":"     * @return The deadline string.","lastModifiedDate":"2023-10-03"},{"lineNumber":34,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":35,"author":{"gitId":"Barbaracwx"},"content":"    public String getBy() {","lastModifiedDate":"2023-09-22"},{"lineNumber":36,"author":{"gitId":"Barbaracwx"},"content":"        return by;","lastModifiedDate":"2023-09-22"},{"lineNumber":37,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":38,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":39,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":40,"author":{"gitId":"Barbaracwx"},"content":"     * Returns a string representation of the DeadlineTask.","lastModifiedDate":"2023-10-03"},{"lineNumber":41,"author":{"gitId":"Barbaracwx"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":42,"author":{"gitId":"Barbaracwx"},"content":"     * @return A string representation in the format: \"[D][TaskDescription] (by: [Deadline])\".","lastModifiedDate":"2023-10-03"},{"lineNumber":43,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":44,"author":{"gitId":"Barbaracwx"},"content":"    public String toString() {","lastModifiedDate":"2023-09-15"},{"lineNumber":45,"author":{"gitId":"Barbaracwx"},"content":"        String superString \u003d super.toString();","lastModifiedDate":"2023-10-03"},{"lineNumber":46,"author":{"gitId":"Barbaracwx"},"content":"        return \"[D]\" + superString + \" (by: \" + this.by + \")\";","lastModifiedDate":"2023-10-03"},{"lineNumber":47,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":48,"author":{"gitId":"Barbaracwx"},"content":"}","lastModifiedDate":"2023-09-15"}],"authorContributionMap":{"Barbaracwx":48}},{"path":"src/main/java/Tasks/EventTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Barbaracwx"},"content":"package Tasks;","lastModifiedDate":"2023-10-03"},{"lineNumber":2,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":3,"author":{"gitId":"Barbaracwx"},"content":"/**","lastModifiedDate":"2023-10-03"},{"lineNumber":4,"author":{"gitId":"Barbaracwx"},"content":" * Represents a task that is an event, which is a subclass of Task.","lastModifiedDate":"2023-10-03"},{"lineNumber":5,"author":{"gitId":"Barbaracwx"},"content":" */","lastModifiedDate":"2023-10-03"},{"lineNumber":6,"author":{"gitId":"Barbaracwx"},"content":"public class EventTask extends Task {","lastModifiedDate":"2023-09-22"},{"lineNumber":7,"author":{"gitId":"Barbaracwx"},"content":"    private final String from;","lastModifiedDate":"2023-09-15"},{"lineNumber":8,"author":{"gitId":"Barbaracwx"},"content":"    private final String to;","lastModifiedDate":"2023-09-15"},{"lineNumber":9,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":10,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":11,"author":{"gitId":"Barbaracwx"},"content":"     * Constructs an EventTask with the given description.","lastModifiedDate":"2023-10-03"},{"lineNumber":12,"author":{"gitId":"Barbaracwx"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":13,"author":{"gitId":"Barbaracwx"},"content":"     * @param description The description of the event task, including start and end dates (if provided).","lastModifiedDate":"2023-10-03"},{"lineNumber":14,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":15,"author":{"gitId":"Barbaracwx"},"content":"    public EventTask(String description) {","lastModifiedDate":"2023-09-15"},{"lineNumber":16,"author":{"gitId":"Barbaracwx"},"content":"        super(description);","lastModifiedDate":"2023-09-15"},{"lineNumber":17,"author":{"gitId":"Barbaracwx"},"content":"        this.from \u003d this.extractFromDate(description);","lastModifiedDate":"2023-09-15"},{"lineNumber":18,"author":{"gitId":"Barbaracwx"},"content":"        this.to \u003d this.extractToDate(description);","lastModifiedDate":"2023-09-15"},{"lineNumber":19,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":20,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":21,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":22,"author":{"gitId":"Barbaracwx"},"content":"     * Extracts the start date from the task description.","lastModifiedDate":"2023-10-03"},{"lineNumber":23,"author":{"gitId":"Barbaracwx"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":24,"author":{"gitId":"Barbaracwx"},"content":"     * @param description The description of the event task.","lastModifiedDate":"2023-10-03"},{"lineNumber":25,"author":{"gitId":"Barbaracwx"},"content":"     * @return The extracted start date or \"No Start Date\" if not found.","lastModifiedDate":"2023-10-03"},{"lineNumber":26,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":27,"author":{"gitId":"Barbaracwx"},"content":"    private String extractFromDate(String description) {","lastModifiedDate":"2023-09-15"},{"lineNumber":28,"author":{"gitId":"Barbaracwx"},"content":"        int fromIndex \u003d description.indexOf(\"/from\");","lastModifiedDate":"2023-09-15"},{"lineNumber":29,"author":{"gitId":"Barbaracwx"},"content":"        if (fromIndex !\u003d -1) {","lastModifiedDate":"2023-09-15"},{"lineNumber":30,"author":{"gitId":"Barbaracwx"},"content":"            int toIndex \u003d description.indexOf(\"/to\");","lastModifiedDate":"2023-10-03"},{"lineNumber":31,"author":{"gitId":"Barbaracwx"},"content":"            if (toIndex !\u003d -1 \u0026\u0026 toIndex \u003e fromIndex) {","lastModifiedDate":"2023-10-03"},{"lineNumber":32,"author":{"gitId":"Barbaracwx"},"content":"                return description.substring(fromIndex + 5, toIndex).trim();","lastModifiedDate":"2023-10-03"},{"lineNumber":33,"author":{"gitId":"Barbaracwx"},"content":"            }","lastModifiedDate":"2023-09-15"},{"lineNumber":34,"author":{"gitId":"Barbaracwx"},"content":"        }","lastModifiedDate":"2023-09-15"},{"lineNumber":35,"author":{"gitId":"Barbaracwx"},"content":"        return \"No Start Date\";","lastModifiedDate":"2023-09-15"},{"lineNumber":36,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":37,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":38,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":39,"author":{"gitId":"Barbaracwx"},"content":"     * Extracts the end date from the task description.","lastModifiedDate":"2023-10-03"},{"lineNumber":40,"author":{"gitId":"Barbaracwx"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":41,"author":{"gitId":"Barbaracwx"},"content":"     * @param description The description of the event task.","lastModifiedDate":"2023-10-03"},{"lineNumber":42,"author":{"gitId":"Barbaracwx"},"content":"     * @return The extracted end date or \"No End Date\" if not found.","lastModifiedDate":"2023-10-03"},{"lineNumber":43,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":44,"author":{"gitId":"Barbaracwx"},"content":"    private String extractToDate(String description) {","lastModifiedDate":"2023-09-15"},{"lineNumber":45,"author":{"gitId":"Barbaracwx"},"content":"        int toIndex \u003d description.indexOf(\"/to\");","lastModifiedDate":"2023-09-15"},{"lineNumber":46,"author":{"gitId":"Barbaracwx"},"content":"        return toIndex !\u003d -1 ? description.substring(toIndex + 3).trim() : \"No End Date\";","lastModifiedDate":"2023-09-15"},{"lineNumber":47,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":48,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":49,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":50,"author":{"gitId":"Barbaracwx"},"content":"     * Gets the start date of the event.","lastModifiedDate":"2023-10-03"},{"lineNumber":51,"author":{"gitId":"Barbaracwx"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":52,"author":{"gitId":"Barbaracwx"},"content":"     * @return The start date string.","lastModifiedDate":"2023-10-03"},{"lineNumber":53,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":54,"author":{"gitId":"Barbaracwx"},"content":"    public String getFrom() {","lastModifiedDate":"2023-09-22"},{"lineNumber":55,"author":{"gitId":"Barbaracwx"},"content":"        return from;","lastModifiedDate":"2023-09-22"},{"lineNumber":56,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":57,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":58,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":59,"author":{"gitId":"Barbaracwx"},"content":"     * Gets the end date of the event.","lastModifiedDate":"2023-10-03"},{"lineNumber":60,"author":{"gitId":"Barbaracwx"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":61,"author":{"gitId":"Barbaracwx"},"content":"     * @return The end date string.","lastModifiedDate":"2023-10-03"},{"lineNumber":62,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":63,"author":{"gitId":"Barbaracwx"},"content":"    public String getTo() {","lastModifiedDate":"2023-09-22"},{"lineNumber":64,"author":{"gitId":"Barbaracwx"},"content":"        return to;","lastModifiedDate":"2023-09-22"},{"lineNumber":65,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":66,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":67,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":68,"author":{"gitId":"Barbaracwx"},"content":"     * Returns a string representation of the EventTask.","lastModifiedDate":"2023-10-03"},{"lineNumber":69,"author":{"gitId":"Barbaracwx"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":70,"author":{"gitId":"Barbaracwx"},"content":"     * @return A string representation in the format: \"[E][TaskDescription] (from: [Start Date] to: [End Date])\".","lastModifiedDate":"2023-10-03"},{"lineNumber":71,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":72,"author":{"gitId":"Barbaracwx"},"content":"    public String toString() {","lastModifiedDate":"2023-09-15"},{"lineNumber":73,"author":{"gitId":"Barbaracwx"},"content":"        String superString \u003d super.toString();","lastModifiedDate":"2023-10-03"},{"lineNumber":74,"author":{"gitId":"Barbaracwx"},"content":"        return \"[E]\" + superString + \" (from: \" + this.from + \" to: \" + this.to + \")\";","lastModifiedDate":"2023-10-03"},{"lineNumber":75,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":76,"author":{"gitId":"Barbaracwx"},"content":"}","lastModifiedDate":"2023-09-06"}],"authorContributionMap":{"Barbaracwx":76}},{"path":"src/main/java/Tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Barbaracwx"},"content":"package Tasks;","lastModifiedDate":"2023-10-03"},{"lineNumber":2,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":3,"author":{"gitId":"Barbaracwx"},"content":"/**","lastModifiedDate":"2023-10-03"},{"lineNumber":4,"author":{"gitId":"Barbaracwx"},"content":" * The Task class represents a task with a description and completion status.","lastModifiedDate":"2023-10-03"},{"lineNumber":5,"author":{"gitId":"Barbaracwx"},"content":" */","lastModifiedDate":"2023-10-03"},{"lineNumber":6,"author":{"gitId":"Barbaracwx"},"content":"public class Task {","lastModifiedDate":"2023-09-22"},{"lineNumber":7,"author":{"gitId":"Barbaracwx"},"content":"    private final String description;","lastModifiedDate":"2023-10-03"},{"lineNumber":8,"author":{"gitId":"Barbaracwx"},"content":"    private boolean isDone;","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":11,"author":{"gitId":"Barbaracwx"},"content":"     * Constructs a Task with the specified description.","lastModifiedDate":"2023-10-03"},{"lineNumber":12,"author":{"gitId":"Barbaracwx"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":13,"author":{"gitId":"Barbaracwx"},"content":"     * @param description The description of the task.","lastModifiedDate":"2023-10-03"},{"lineNumber":14,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":15,"author":{"gitId":"Barbaracwx"},"content":"    public Task(String description) {","lastModifiedDate":"2023-09-05"},{"lineNumber":16,"author":{"gitId":"Barbaracwx"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"Barbaracwx"},"content":"        this.isDone \u003d false; // Set initial completion to false","lastModifiedDate":"2023-10-03"},{"lineNumber":18,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":21,"author":{"gitId":"Barbaracwx"},"content":"     * Marks the task as done.","lastModifiedDate":"2023-10-03"},{"lineNumber":22,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":23,"author":{"gitId":"Barbaracwx"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-09-05"},{"lineNumber":24,"author":{"gitId":"Barbaracwx"},"content":"        isDone \u003d true;","lastModifiedDate":"2023-09-22"},{"lineNumber":25,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":26,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":27,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":28,"author":{"gitId":"Barbaracwx"},"content":"     * Marks the task as not done.","lastModifiedDate":"2023-10-03"},{"lineNumber":29,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":30,"author":{"gitId":"Barbaracwx"},"content":"    public void markAsNotDone() {","lastModifiedDate":"2023-09-05"},{"lineNumber":31,"author":{"gitId":"Barbaracwx"},"content":"        isDone \u003d false;","lastModifiedDate":"2023-09-22"},{"lineNumber":32,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":33,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":34,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":35,"author":{"gitId":"Barbaracwx"},"content":"     * Gets the description of the task.","lastModifiedDate":"2023-10-03"},{"lineNumber":36,"author":{"gitId":"Barbaracwx"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":37,"author":{"gitId":"Barbaracwx"},"content":"     * @return The description of the task.","lastModifiedDate":"2023-10-03"},{"lineNumber":38,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":39,"author":{"gitId":"Barbaracwx"},"content":"    public String getDescription() {","lastModifiedDate":"2023-09-05"},{"lineNumber":40,"author":{"gitId":"Barbaracwx"},"content":"        return description;","lastModifiedDate":"2023-09-22"},{"lineNumber":41,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":42,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":43,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":44,"author":{"gitId":"Barbaracwx"},"content":"     * Checks if the task is done.","lastModifiedDate":"2023-10-03"},{"lineNumber":45,"author":{"gitId":"Barbaracwx"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":46,"author":{"gitId":"Barbaracwx"},"content":"     * @return True if the task is done, false otherwise.","lastModifiedDate":"2023-10-03"},{"lineNumber":47,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":48,"author":{"gitId":"Barbaracwx"},"content":"    public boolean isDone() {","lastModifiedDate":"2023-10-03"},{"lineNumber":49,"author":{"gitId":"Barbaracwx"},"content":"        return isDone;","lastModifiedDate":"2023-09-22"},{"lineNumber":50,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":51,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":52,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":53,"author":{"gitId":"Barbaracwx"},"content":"     * Gets the status icon for the task.","lastModifiedDate":"2023-10-03"},{"lineNumber":54,"author":{"gitId":"Barbaracwx"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":55,"author":{"gitId":"Barbaracwx"},"content":"     * @return \"X\" if the task is done, \" \" (a space) if the task is not done.","lastModifiedDate":"2023-10-03"},{"lineNumber":56,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":57,"author":{"gitId":"Barbaracwx"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-09-05"},{"lineNumber":58,"author":{"gitId":"Barbaracwx"},"content":"        return (isDone ? \"X\" : \" \");","lastModifiedDate":"2023-09-22"},{"lineNumber":59,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":60,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":61,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":62,"author":{"gitId":"Barbaracwx"},"content":"     * Returns a string representation of the task.","lastModifiedDate":"2023-10-03"},{"lineNumber":63,"author":{"gitId":"Barbaracwx"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":64,"author":{"gitId":"Barbaracwx"},"content":"     * @return A string in the format: \"[status icon] description\".","lastModifiedDate":"2023-10-03"},{"lineNumber":65,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":66,"author":{"gitId":"Barbaracwx"},"content":"    @Override","lastModifiedDate":"2023-09-22"},{"lineNumber":67,"author":{"gitId":"Barbaracwx"},"content":"    public String toString() {","lastModifiedDate":"2023-09-05"},{"lineNumber":68,"author":{"gitId":"Barbaracwx"},"content":"        return \"[\" + getStatusIcon() + \"] \" + description;","lastModifiedDate":"2023-09-22"},{"lineNumber":69,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":70,"author":{"gitId":"Barbaracwx"},"content":"}","lastModifiedDate":"2023-09-05"}],"authorContributionMap":{"Barbaracwx":70}},{"path":"src/main/java/Tasks/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Barbaracwx"},"content":"package Tasks;","lastModifiedDate":"2023-10-03"},{"lineNumber":2,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":3,"author":{"gitId":"Barbaracwx"},"content":"import Cara.CaraException;","lastModifiedDate":"2023-10-03"},{"lineNumber":4,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":5,"author":{"gitId":"Barbaracwx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-02"},{"lineNumber":6,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":7,"author":{"gitId":"Barbaracwx"},"content":"/**","lastModifiedDate":"2023-10-03"},{"lineNumber":8,"author":{"gitId":"Barbaracwx"},"content":" * The TaskList class extends ArrayList and represents a list of tasks.","lastModifiedDate":"2023-10-03"},{"lineNumber":9,"author":{"gitId":"Barbaracwx"},"content":" */","lastModifiedDate":"2023-10-03"},{"lineNumber":10,"author":{"gitId":"Barbaracwx"},"content":"public class TaskList extends ArrayList\u003cTask\u003e {","lastModifiedDate":"2023-10-02"},{"lineNumber":11,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":12,"author":{"gitId":"Barbaracwx"},"content":"    private final ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2023-10-02"},{"lineNumber":13,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":14,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":15,"author":{"gitId":"Barbaracwx"},"content":"     * Constructs an empty TaskList.","lastModifiedDate":"2023-10-03"},{"lineNumber":16,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":17,"author":{"gitId":"Barbaracwx"},"content":"    public TaskList() {","lastModifiedDate":"2023-10-02"},{"lineNumber":18,"author":{"gitId":"Barbaracwx"},"content":"        tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-02"},{"lineNumber":19,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-10-02"},{"lineNumber":20,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":21,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":22,"author":{"gitId":"Barbaracwx"},"content":"     * Constructs a TaskList with the specified list of tasks.","lastModifiedDate":"2023-10-03"},{"lineNumber":23,"author":{"gitId":"Barbaracwx"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":24,"author":{"gitId":"Barbaracwx"},"content":"     * @param tasks The list of tasks to initialize the TaskList.","lastModifiedDate":"2023-10-03"},{"lineNumber":25,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":26,"author":{"gitId":"Barbaracwx"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-10-02"},{"lineNumber":27,"author":{"gitId":"Barbaracwx"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2023-10-02"},{"lineNumber":28,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-10-02"},{"lineNumber":29,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":30,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":31,"author":{"gitId":"Barbaracwx"},"content":"     * Adds a task to the task list based on the given input.","lastModifiedDate":"2023-10-03"},{"lineNumber":32,"author":{"gitId":"Barbaracwx"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":33,"author":{"gitId":"Barbaracwx"},"content":"     * @param line  The input string representing the task to be added.","lastModifiedDate":"2023-10-03"},{"lineNumber":34,"author":{"gitId":"Barbaracwx"},"content":"     * @param tasks The list of tasks to which the new task is added.","lastModifiedDate":"2023-10-03"},{"lineNumber":35,"author":{"gitId":"Barbaracwx"},"content":"     * @throws CaraException If there is an issue with adding the task.","lastModifiedDate":"2023-10-03"},{"lineNumber":36,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":37,"author":{"gitId":"Barbaracwx"},"content":"    public static void addTaskToList(String line, ArrayList\u003cTask\u003e tasks) throws CaraException {","lastModifiedDate":"2023-10-03"},{"lineNumber":38,"author":{"gitId":"Barbaracwx"},"content":"        String[] parts \u003d line.split(\" \", 2);","lastModifiedDate":"2023-10-02"},{"lineNumber":39,"author":{"gitId":"Barbaracwx"},"content":"        String command \u003d parts[0];","lastModifiedDate":"2023-10-02"},{"lineNumber":40,"author":{"gitId":"Barbaracwx"},"content":"        String taskDescription \u003d parts.length \u003e 1 ? parts[1] : \"\";","lastModifiedDate":"2023-10-02"},{"lineNumber":41,"author":{"gitId":"Barbaracwx"},"content":"        switch (command) {","lastModifiedDate":"2023-10-02"},{"lineNumber":42,"author":{"gitId":"Barbaracwx"},"content":"        case \"todo\":","lastModifiedDate":"2023-10-02"},{"lineNumber":43,"author":{"gitId":"Barbaracwx"},"content":"            if (taskDescription.isEmpty()) {","lastModifiedDate":"2023-10-02"},{"lineNumber":44,"author":{"gitId":"Barbaracwx"},"content":"                throw new CaraException(\"☹ OOPS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2023-10-03"},{"lineNumber":45,"author":{"gitId":"Barbaracwx"},"content":"            }","lastModifiedDate":"2023-10-02"},{"lineNumber":46,"author":{"gitId":"Barbaracwx"},"content":"            tasks.add(new TodoTask(taskDescription));","lastModifiedDate":"2023-10-02"},{"lineNumber":47,"author":{"gitId":"Barbaracwx"},"content":"            break;","lastModifiedDate":"2023-10-02"},{"lineNumber":48,"author":{"gitId":"Barbaracwx"},"content":"        case \"deadline\":","lastModifiedDate":"2023-10-02"},{"lineNumber":49,"author":{"gitId":"Barbaracwx"},"content":"            if (taskDescription.isEmpty()) {","lastModifiedDate":"2023-10-02"},{"lineNumber":50,"author":{"gitId":"Barbaracwx"},"content":"                throw new CaraException(\"☹ OOPS!!! The description of a deadline cannot be empty.\");","lastModifiedDate":"2023-10-03"},{"lineNumber":51,"author":{"gitId":"Barbaracwx"},"content":"            }","lastModifiedDate":"2023-10-02"},{"lineNumber":52,"author":{"gitId":"Barbaracwx"},"content":"            tasks.add(new DeadlineTask(taskDescription));","lastModifiedDate":"2023-10-02"},{"lineNumber":53,"author":{"gitId":"Barbaracwx"},"content":"            break;","lastModifiedDate":"2023-10-02"},{"lineNumber":54,"author":{"gitId":"Barbaracwx"},"content":"        case \"event\":","lastModifiedDate":"2023-10-02"},{"lineNumber":55,"author":{"gitId":"Barbaracwx"},"content":"            if (taskDescription.isEmpty()) {","lastModifiedDate":"2023-10-02"},{"lineNumber":56,"author":{"gitId":"Barbaracwx"},"content":"                throw new CaraException(\"☹ OOPS!!! The description of an event cannot be empty.\");","lastModifiedDate":"2023-10-03"},{"lineNumber":57,"author":{"gitId":"Barbaracwx"},"content":"            }","lastModifiedDate":"2023-10-02"},{"lineNumber":58,"author":{"gitId":"Barbaracwx"},"content":"            tasks.add(new EventTask(taskDescription));","lastModifiedDate":"2023-10-02"},{"lineNumber":59,"author":{"gitId":"Barbaracwx"},"content":"            break;","lastModifiedDate":"2023-10-02"},{"lineNumber":60,"author":{"gitId":"Barbaracwx"},"content":"        default:","lastModifiedDate":"2023-10-02"},{"lineNumber":61,"author":{"gitId":"Barbaracwx"},"content":"            throw new CaraException(\" ☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-10-03"},{"lineNumber":62,"author":{"gitId":"Barbaracwx"},"content":"        }","lastModifiedDate":"2023-10-02"},{"lineNumber":63,"author":{"gitId":"Barbaracwx"},"content":"        System.out.println(\"Got it. I\u0027ve added this task: \");","lastModifiedDate":"2023-10-02"},{"lineNumber":64,"author":{"gitId":"Barbaracwx"},"content":"        System.out.println(tasks.get(tasks.size() - 1));","lastModifiedDate":"2023-10-02"},{"lineNumber":65,"author":{"gitId":"Barbaracwx"},"content":"        System.out.println(\"Now you have \" + tasks.size() + \" tasks in the list.\");","lastModifiedDate":"2023-10-02"},{"lineNumber":66,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-10-02"},{"lineNumber":67,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":68,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":69,"author":{"gitId":"Barbaracwx"},"content":"     * Deletes a task from the task list based on the given input.","lastModifiedDate":"2023-10-03"},{"lineNumber":70,"author":{"gitId":"Barbaracwx"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":71,"author":{"gitId":"Barbaracwx"},"content":"     * @param line  The input string representing the task to be deleted.","lastModifiedDate":"2023-10-03"},{"lineNumber":72,"author":{"gitId":"Barbaracwx"},"content":"     * @param tasks The list of tasks from which the task is deleted.","lastModifiedDate":"2023-10-03"},{"lineNumber":73,"author":{"gitId":"Barbaracwx"},"content":"     * @throws CaraException If there is an issue with deleting the task.","lastModifiedDate":"2023-10-03"},{"lineNumber":74,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":75,"author":{"gitId":"Barbaracwx"},"content":"    public static void deleteTask(String line, ArrayList\u003cTask\u003e tasks) throws CaraException {","lastModifiedDate":"2023-10-03"},{"lineNumber":76,"author":{"gitId":"Barbaracwx"},"content":"        if (line.length() \u003c 8) {","lastModifiedDate":"2023-10-03"},{"lineNumber":77,"author":{"gitId":"Barbaracwx"},"content":"            throw new CaraException(\"Task not found. Please provide a valid task number.\");","lastModifiedDate":"2023-10-03"},{"lineNumber":78,"author":{"gitId":"Barbaracwx"},"content":"        }","lastModifiedDate":"2023-10-03"},{"lineNumber":79,"author":{"gitId":"Barbaracwx"},"content":"        int taskIndex \u003d Integer.parseInt(line.substring(7)) - 1;","lastModifiedDate":"2023-10-02"},{"lineNumber":80,"author":{"gitId":"Barbaracwx"},"content":"        if (taskIndex \u003e\u003d 0 \u0026\u0026 taskIndex \u003c tasks.size()) {","lastModifiedDate":"2023-10-02"},{"lineNumber":81,"author":{"gitId":"Barbaracwx"},"content":"            Task removedTask \u003d tasks.remove(taskIndex);","lastModifiedDate":"2023-10-02"},{"lineNumber":82,"author":{"gitId":"Barbaracwx"},"content":"            System.out.println(\"Noted. I\u0027ve removed this task:\\n\" + removedTask);","lastModifiedDate":"2023-10-02"},{"lineNumber":83,"author":{"gitId":"Barbaracwx"},"content":"            System.out.println(\"Now you have \" + tasks.size() + \" tasks in the list.\");","lastModifiedDate":"2023-10-02"},{"lineNumber":84,"author":{"gitId":"Barbaracwx"},"content":"        } else {","lastModifiedDate":"2023-10-02"},{"lineNumber":85,"author":{"gitId":"Barbaracwx"},"content":"            throw new CaraException(\"Task not found. Please provide a valid task number.\");","lastModifiedDate":"2023-10-03"},{"lineNumber":86,"author":{"gitId":"Barbaracwx"},"content":"        }","lastModifiedDate":"2023-10-02"},{"lineNumber":87,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-10-02"},{"lineNumber":88,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":89,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":90,"author":{"gitId":"Barbaracwx"},"content":"     * Unmark a task as done based on the given input.","lastModifiedDate":"2023-10-03"},{"lineNumber":91,"author":{"gitId":"Barbaracwx"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":92,"author":{"gitId":"Barbaracwx"},"content":"     * @param line  The input string representing the task to be unmarked.","lastModifiedDate":"2023-10-03"},{"lineNumber":93,"author":{"gitId":"Barbaracwx"},"content":"     * @param tasks The list of tasks in which the task is unmarked.","lastModifiedDate":"2023-10-03"},{"lineNumber":94,"author":{"gitId":"Barbaracwx"},"content":"     * @throws CaraException If there is an issue with unmarking the task.","lastModifiedDate":"2023-10-03"},{"lineNumber":95,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":96,"author":{"gitId":"Barbaracwx"},"content":"    public static void unmarkTask(String line, ArrayList\u003cTask\u003e tasks) throws CaraException {","lastModifiedDate":"2023-10-03"},{"lineNumber":97,"author":{"gitId":"Barbaracwx"},"content":"        if (line.length() \u003c 8) {","lastModifiedDate":"2023-10-03"},{"lineNumber":98,"author":{"gitId":"Barbaracwx"},"content":"            throw new CaraException(\"Task not found. Please provide a valid task number.\");","lastModifiedDate":"2023-10-03"},{"lineNumber":99,"author":{"gitId":"Barbaracwx"},"content":"        }","lastModifiedDate":"2023-10-03"},{"lineNumber":100,"author":{"gitId":"Barbaracwx"},"content":"        int taskIndex \u003d Integer.parseInt(line.substring(7)) - 1;","lastModifiedDate":"2023-10-02"},{"lineNumber":101,"author":{"gitId":"Barbaracwx"},"content":"        if (taskIndex \u003e\u003d 0 \u0026\u0026 taskIndex \u003c tasks.size()) {","lastModifiedDate":"2023-10-02"},{"lineNumber":102,"author":{"gitId":"Barbaracwx"},"content":"            Task task \u003d tasks.get(taskIndex);","lastModifiedDate":"2023-10-02"},{"lineNumber":103,"author":{"gitId":"Barbaracwx"},"content":"            task.markAsNotDone();","lastModifiedDate":"2023-10-02"},{"lineNumber":104,"author":{"gitId":"Barbaracwx"},"content":"            System.out.println(\"OK, I\u0027ve marked this task as not done yet:\\n\" + task);","lastModifiedDate":"2023-10-02"},{"lineNumber":105,"author":{"gitId":"Barbaracwx"},"content":"        }","lastModifiedDate":"2023-10-02"},{"lineNumber":106,"author":{"gitId":"Barbaracwx"},"content":"        else {","lastModifiedDate":"2023-10-03"},{"lineNumber":107,"author":{"gitId":"Barbaracwx"},"content":"            throw new CaraException(\"Task not found. Please provide a valid task number.\");","lastModifiedDate":"2023-10-03"},{"lineNumber":108,"author":{"gitId":"Barbaracwx"},"content":"        }","lastModifiedDate":"2023-10-03"},{"lineNumber":109,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-10-02"},{"lineNumber":110,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":111,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":112,"author":{"gitId":"Barbaracwx"},"content":"     * Marks a task as done based on the given input.","lastModifiedDate":"2023-10-03"},{"lineNumber":113,"author":{"gitId":"Barbaracwx"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":114,"author":{"gitId":"Barbaracwx"},"content":"     * @param line  The input string representing the task to be marked.","lastModifiedDate":"2023-10-03"},{"lineNumber":115,"author":{"gitId":"Barbaracwx"},"content":"     * @param tasks The list of tasks in which the task is marked.","lastModifiedDate":"2023-10-03"},{"lineNumber":116,"author":{"gitId":"Barbaracwx"},"content":"     * @throws CaraException If there is an issue with marking the task.","lastModifiedDate":"2023-10-03"},{"lineNumber":117,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":118,"author":{"gitId":"Barbaracwx"},"content":"    public static void markTask(String line, ArrayList\u003cTask\u003e tasks) throws CaraException {","lastModifiedDate":"2023-10-03"},{"lineNumber":119,"author":{"gitId":"Barbaracwx"},"content":"        if (line.length() \u003c 6) {","lastModifiedDate":"2023-10-03"},{"lineNumber":120,"author":{"gitId":"Barbaracwx"},"content":"            throw new CaraException(\"Task not found. Please provide a valid task number.\");","lastModifiedDate":"2023-10-03"},{"lineNumber":121,"author":{"gitId":"Barbaracwx"},"content":"        }","lastModifiedDate":"2023-10-03"},{"lineNumber":122,"author":{"gitId":"Barbaracwx"},"content":"        int taskIndex \u003d Integer.parseInt(line.substring(5)) - 1; //in the array is 0-based","lastModifiedDate":"2023-10-03"},{"lineNumber":123,"author":{"gitId":"Barbaracwx"},"content":"        if (taskIndex \u003e\u003d 0 \u0026\u0026 taskIndex \u003c tasks.size()) {","lastModifiedDate":"2023-10-02"},{"lineNumber":124,"author":{"gitId":"Barbaracwx"},"content":"            Task task \u003d tasks.get(taskIndex);","lastModifiedDate":"2023-10-02"},{"lineNumber":125,"author":{"gitId":"Barbaracwx"},"content":"            task.markAsDone();","lastModifiedDate":"2023-10-02"},{"lineNumber":126,"author":{"gitId":"Barbaracwx"},"content":"            System.out.println(\"Nice! I\u0027ve marked this task as done:\\n\" + task);","lastModifiedDate":"2023-10-02"},{"lineNumber":127,"author":{"gitId":"Barbaracwx"},"content":"        }","lastModifiedDate":"2023-10-02"},{"lineNumber":128,"author":{"gitId":"Barbaracwx"},"content":"        else {","lastModifiedDate":"2023-10-03"},{"lineNumber":129,"author":{"gitId":"Barbaracwx"},"content":"            throw new CaraException(\"Task not found. Please provide a valid task number.\");","lastModifiedDate":"2023-10-03"},{"lineNumber":130,"author":{"gitId":"Barbaracwx"},"content":"        }","lastModifiedDate":"2023-10-03"},{"lineNumber":131,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-10-02"},{"lineNumber":132,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":133,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":134,"author":{"gitId":"Barbaracwx"},"content":"     * Prints the list of tasks.","lastModifiedDate":"2023-10-03"},{"lineNumber":135,"author":{"gitId":"Barbaracwx"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":136,"author":{"gitId":"Barbaracwx"},"content":"     * @param tasks The list of tasks to be printed.","lastModifiedDate":"2023-10-03"},{"lineNumber":137,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":138,"author":{"gitId":"Barbaracwx"},"content":"    public static void printList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-10-02"},{"lineNumber":139,"author":{"gitId":"Barbaracwx"},"content":"        System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2023-10-02"},{"lineNumber":140,"author":{"gitId":"Barbaracwx"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-10-02"},{"lineNumber":141,"author":{"gitId":"Barbaracwx"},"content":"            System.out.println(i + 1 + \". \" + tasks.get(i));","lastModifiedDate":"2023-10-02"},{"lineNumber":142,"author":{"gitId":"Barbaracwx"},"content":"        }","lastModifiedDate":"2023-10-02"},{"lineNumber":143,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-10-02"},{"lineNumber":144,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":145,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":146,"author":{"gitId":"Barbaracwx"},"content":"     * Finds tasks in the list based on the given keyword and prints them.","lastModifiedDate":"2023-10-03"},{"lineNumber":147,"author":{"gitId":"Barbaracwx"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":148,"author":{"gitId":"Barbaracwx"},"content":"     * @param line    The input string representing the keyword to search for.","lastModifiedDate":"2023-10-03"},{"lineNumber":149,"author":{"gitId":"Barbaracwx"},"content":"     * @param tasks   The list of tasks to search within.","lastModifiedDate":"2023-10-03"},{"lineNumber":150,"author":{"gitId":"Barbaracwx"},"content":"     * @throws CaraException If there is an issue with finding tasks.","lastModifiedDate":"2023-10-03"},{"lineNumber":151,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":152,"author":{"gitId":"Barbaracwx"},"content":"    public static void findTask(String line, ArrayList\u003cTask\u003e tasks) throws CaraException {","lastModifiedDate":"2023-10-03"},{"lineNumber":153,"author":{"gitId":"Barbaracwx"},"content":"        if (line.length() \u003c 6) {","lastModifiedDate":"2023-10-03"},{"lineNumber":154,"author":{"gitId":"Barbaracwx"},"content":"            throw new CaraException(\"Keyword not found. Please provide a valid keyword.\");","lastModifiedDate":"2023-10-03"},{"lineNumber":155,"author":{"gitId":"Barbaracwx"},"content":"        }","lastModifiedDate":"2023-10-03"},{"lineNumber":156,"author":{"gitId":"Barbaracwx"},"content":"        System.out.println(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2023-10-03"},{"lineNumber":157,"author":{"gitId":"Barbaracwx"},"content":"        String keyword \u003d line.substring(5).trim().toLowerCase();","lastModifiedDate":"2023-10-03"},{"lineNumber":158,"author":{"gitId":"Barbaracwx"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-10-03"},{"lineNumber":159,"author":{"gitId":"Barbaracwx"},"content":"            Task task \u003d tasks.get(i); //the task object that I want","lastModifiedDate":"2023-10-03"},{"lineNumber":160,"author":{"gitId":"Barbaracwx"},"content":"            String taskDescription \u003d task.getDescription().toLowerCase();","lastModifiedDate":"2023-10-03"},{"lineNumber":161,"author":{"gitId":"Barbaracwx"},"content":"            if (taskDescription.contains(keyword)) {","lastModifiedDate":"2023-10-03"},{"lineNumber":162,"author":{"gitId":"Barbaracwx"},"content":"                System.out.println(i + 1 + \". \" + task);","lastModifiedDate":"2023-10-03"},{"lineNumber":163,"author":{"gitId":"Barbaracwx"},"content":"            }","lastModifiedDate":"2023-10-03"},{"lineNumber":164,"author":{"gitId":"Barbaracwx"},"content":"        }","lastModifiedDate":"2023-10-03"},{"lineNumber":165,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-10-03"},{"lineNumber":166,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":167,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":168,"author":{"gitId":"Barbaracwx"},"content":"     * Gets the list of tasks contained within the TaskList.","lastModifiedDate":"2023-10-03"},{"lineNumber":169,"author":{"gitId":"Barbaracwx"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":170,"author":{"gitId":"Barbaracwx"},"content":"     * @return The list of tasks.","lastModifiedDate":"2023-10-03"},{"lineNumber":171,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":172,"author":{"gitId":"Barbaracwx"},"content":"    public ArrayList\u003cTask\u003e getTasks() {","lastModifiedDate":"2023-10-02"},{"lineNumber":173,"author":{"gitId":"Barbaracwx"},"content":"        return tasks;","lastModifiedDate":"2023-10-02"},{"lineNumber":174,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-10-03"},{"lineNumber":175,"author":{"gitId":"Barbaracwx"},"content":"}","lastModifiedDate":"2023-10-02"},{"lineNumber":176,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-02"}],"authorContributionMap":{"Barbaracwx":176}},{"path":"src/main/java/Tasks/TasksHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Barbaracwx"},"content":"package Tasks;","lastModifiedDate":"2023-10-03"},{"lineNumber":2,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":3,"author":{"gitId":"Barbaracwx"},"content":"import java.io.File;","lastModifiedDate":"2023-09-22"},{"lineNumber":4,"author":{"gitId":"Barbaracwx"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-09-22"},{"lineNumber":5,"author":{"gitId":"Barbaracwx"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-22"},{"lineNumber":6,"author":{"gitId":"Barbaracwx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-22"},{"lineNumber":7,"author":{"gitId":"Barbaracwx"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-09-22"},{"lineNumber":8,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":9,"author":{"gitId":"Barbaracwx"},"content":"/**","lastModifiedDate":"2023-10-03"},{"lineNumber":10,"author":{"gitId":"Barbaracwx"},"content":" * The TasksHandler class is responsible for reading and writing tasks to a file.","lastModifiedDate":"2023-10-03"},{"lineNumber":11,"author":{"gitId":"Barbaracwx"},"content":" */","lastModifiedDate":"2023-10-03"},{"lineNumber":12,"author":{"gitId":"Barbaracwx"},"content":"public class TasksHandler {","lastModifiedDate":"2023-09-22"},{"lineNumber":13,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":14,"author":{"gitId":"Barbaracwx"},"content":"    private static final String FILE_PATH \u003d \"caraData.txt\";","lastModifiedDate":"2023-10-03"},{"lineNumber":15,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":16,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":17,"author":{"gitId":"Barbaracwx"},"content":"     * Writes tasks to a file.","lastModifiedDate":"2023-10-03"},{"lineNumber":18,"author":{"gitId":"Barbaracwx"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":19,"author":{"gitId":"Barbaracwx"},"content":"     * @param tasks The list of tasks to be written to the file.","lastModifiedDate":"2023-10-03"},{"lineNumber":20,"author":{"gitId":"Barbaracwx"},"content":"     * @throws IOException If an I/O error occurs during file writing.","lastModifiedDate":"2023-10-03"},{"lineNumber":21,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":22,"author":{"gitId":"Barbaracwx"},"content":"    public static void writeToFile(ArrayList\u003cTask\u003e tasks) throws IOException {","lastModifiedDate":"2023-09-22"},{"lineNumber":23,"author":{"gitId":"Barbaracwx"},"content":"        FileWriter fileWriter \u003d new FileWriter(FILE_PATH);","lastModifiedDate":"2023-09-22"},{"lineNumber":24,"author":{"gitId":"Barbaracwx"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2023-09-22"},{"lineNumber":25,"author":{"gitId":"Barbaracwx"},"content":"            if (task instanceof TodoTask) {","lastModifiedDate":"2023-09-22"},{"lineNumber":26,"author":{"gitId":"Barbaracwx"},"content":"                fileWriter.write(\"T | \" + task.isDone() + \" | \"","lastModifiedDate":"2023-09-22"},{"lineNumber":27,"author":{"gitId":"Barbaracwx"},"content":"                        + task.getDescription() + System.lineSeparator());","lastModifiedDate":"2023-09-22"},{"lineNumber":28,"author":{"gitId":"Barbaracwx"},"content":"            } else if (task instanceof DeadlineTask) {","lastModifiedDate":"2023-09-22"},{"lineNumber":29,"author":{"gitId":"Barbaracwx"},"content":"                DeadlineTask deadlineTask \u003d (DeadlineTask) task; // Cast to DeadlineTask","lastModifiedDate":"2023-09-22"},{"lineNumber":30,"author":{"gitId":"Barbaracwx"},"content":"                fileWriter.write(\"D | \" + task.isDone() + \" | \"","lastModifiedDate":"2023-09-22"},{"lineNumber":31,"author":{"gitId":"Barbaracwx"},"content":"                        + task.getDescription() + \" | \" + deadlineTask.getBy() + System.lineSeparator());","lastModifiedDate":"2023-09-22"},{"lineNumber":32,"author":{"gitId":"Barbaracwx"},"content":"            } else if (task instanceof EventTask) {","lastModifiedDate":"2023-09-22"},{"lineNumber":33,"author":{"gitId":"Barbaracwx"},"content":"                EventTask eventTask \u003d (EventTask) task; // Cast to EventTask","lastModifiedDate":"2023-09-22"},{"lineNumber":34,"author":{"gitId":"Barbaracwx"},"content":"                fileWriter.write(\"E | \" + task.isDone() + \" | \" + task.getDescription() + \" | \"","lastModifiedDate":"2023-09-22"},{"lineNumber":35,"author":{"gitId":"Barbaracwx"},"content":"                        + eventTask.getFrom() + \" | \" + eventTask.getTo() + System.lineSeparator());","lastModifiedDate":"2023-09-22"},{"lineNumber":36,"author":{"gitId":"Barbaracwx"},"content":"            }","lastModifiedDate":"2023-09-22"},{"lineNumber":37,"author":{"gitId":"Barbaracwx"},"content":"        }","lastModifiedDate":"2023-09-22"},{"lineNumber":38,"author":{"gitId":"Barbaracwx"},"content":"        fileWriter.close();","lastModifiedDate":"2023-09-22"},{"lineNumber":39,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":40,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":41,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":42,"author":{"gitId":"Barbaracwx"},"content":"     * Reads tasks from a file and populates the tasks list.","lastModifiedDate":"2023-10-03"},{"lineNumber":43,"author":{"gitId":"Barbaracwx"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":44,"author":{"gitId":"Barbaracwx"},"content":"     * @param tasks The list of tasks to be populated with tasks from the file.","lastModifiedDate":"2023-10-03"},{"lineNumber":45,"author":{"gitId":"Barbaracwx"},"content":"     * @throws IOException If an I/O error occurs during file reading.","lastModifiedDate":"2023-10-03"},{"lineNumber":46,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":47,"author":{"gitId":"Barbaracwx"},"content":"    public static void readFromFile(ArrayList\u003cTask\u003e tasks) throws IOException {","lastModifiedDate":"2023-09-22"},{"lineNumber":48,"author":{"gitId":"Barbaracwx"},"content":"        File file \u003d new File(FILE_PATH);","lastModifiedDate":"2023-09-22"},{"lineNumber":49,"author":{"gitId":"Barbaracwx"},"content":"        boolean fileCreated \u003d false;","lastModifiedDate":"2023-09-22"},{"lineNumber":50,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":51,"author":{"gitId":"Barbaracwx"},"content":"        if (!file.exists()) {","lastModifiedDate":"2023-09-22"},{"lineNumber":52,"author":{"gitId":"Barbaracwx"},"content":"            fileCreated \u003d file.createNewFile();","lastModifiedDate":"2023-09-22"},{"lineNumber":53,"author":{"gitId":"Barbaracwx"},"content":"        }","lastModifiedDate":"2023-09-22"},{"lineNumber":54,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":55,"author":{"gitId":"Barbaracwx"},"content":"        if (fileCreated || file.exists()) {","lastModifiedDate":"2023-09-22"},{"lineNumber":56,"author":{"gitId":"Barbaracwx"},"content":"            Scanner scanner \u003d new Scanner(file); // Initialize the scanner","lastModifiedDate":"2023-09-22"},{"lineNumber":57,"author":{"gitId":"Barbaracwx"},"content":"            while (scanner.hasNext()) {","lastModifiedDate":"2023-09-22"},{"lineNumber":58,"author":{"gitId":"Barbaracwx"},"content":"                String line \u003d scanner.nextLine();","lastModifiedDate":"2023-09-22"},{"lineNumber":59,"author":{"gitId":"Barbaracwx"},"content":"                String[] lineArray \u003d line.split(\"\\\\|\");","lastModifiedDate":"2023-09-22"},{"lineNumber":60,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":61,"author":{"gitId":"Barbaracwx"},"content":"                Task task \u003d null;","lastModifiedDate":"2023-09-22"},{"lineNumber":62,"author":{"gitId":"Barbaracwx"},"content":"                switch (lineArray[0].trim()) {","lastModifiedDate":"2023-09-22"},{"lineNumber":63,"author":{"gitId":"Barbaracwx"},"content":"                case \"T\":","lastModifiedDate":"2023-09-22"},{"lineNumber":64,"author":{"gitId":"Barbaracwx"},"content":"                    task \u003d new TodoTask(lineArray[2].trim());","lastModifiedDate":"2023-09-22"},{"lineNumber":65,"author":{"gitId":"Barbaracwx"},"content":"                    break;","lastModifiedDate":"2023-09-22"},{"lineNumber":66,"author":{"gitId":"Barbaracwx"},"content":"                case \"D\":","lastModifiedDate":"2023-09-22"},{"lineNumber":67,"author":{"gitId":"Barbaracwx"},"content":"                    task \u003d new DeadlineTask(lineArray[2].trim());","lastModifiedDate":"2023-09-22"},{"lineNumber":68,"author":{"gitId":"Barbaracwx"},"content":"                    break;","lastModifiedDate":"2023-09-22"},{"lineNumber":69,"author":{"gitId":"Barbaracwx"},"content":"                case \"E\":","lastModifiedDate":"2023-09-22"},{"lineNumber":70,"author":{"gitId":"Barbaracwx"},"content":"                    task \u003d new EventTask(lineArray[2].trim());","lastModifiedDate":"2023-09-22"},{"lineNumber":71,"author":{"gitId":"Barbaracwx"},"content":"                    break;","lastModifiedDate":"2023-09-22"},{"lineNumber":72,"author":{"gitId":"Barbaracwx"},"content":"                }","lastModifiedDate":"2023-09-22"},{"lineNumber":73,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":74,"author":{"gitId":"Barbaracwx"},"content":"                if (task !\u003d null) {","lastModifiedDate":"2023-09-22"},{"lineNumber":75,"author":{"gitId":"Barbaracwx"},"content":"                    // Parse the \"done\" status as a boolean","lastModifiedDate":"2023-10-02"},{"lineNumber":76,"author":{"gitId":"Barbaracwx"},"content":"                    boolean isDone \u003d lineArray[1].trim().equals(\"true\");","lastModifiedDate":"2023-10-02"},{"lineNumber":77,"author":{"gitId":"Barbaracwx"},"content":"                    if (isDone) {","lastModifiedDate":"2023-10-02"},{"lineNumber":78,"author":{"gitId":"Barbaracwx"},"content":"                        task.markAsDone();","lastModifiedDate":"2023-09-22"},{"lineNumber":79,"author":{"gitId":"Barbaracwx"},"content":"                    }","lastModifiedDate":"2023-09-22"},{"lineNumber":80,"author":{"gitId":"Barbaracwx"},"content":"                    tasks.add(task);","lastModifiedDate":"2023-09-22"},{"lineNumber":81,"author":{"gitId":"Barbaracwx"},"content":"                } else {","lastModifiedDate":"2023-09-22"},{"lineNumber":82,"author":{"gitId":"Barbaracwx"},"content":"                    // Handle the case where there was an issue creating the task","lastModifiedDate":"2023-09-22"},{"lineNumber":83,"author":{"gitId":"Barbaracwx"},"content":"                    System.err.println(\"Error: Unable to create a task from input line: \" + line);","lastModifiedDate":"2023-09-22"},{"lineNumber":84,"author":{"gitId":"Barbaracwx"},"content":"                }","lastModifiedDate":"2023-09-22"},{"lineNumber":85,"author":{"gitId":"Barbaracwx"},"content":"            }","lastModifiedDate":"2023-09-22"},{"lineNumber":86,"author":{"gitId":"Barbaracwx"},"content":"            scanner.close(); // Close the scanner","lastModifiedDate":"2023-09-22"},{"lineNumber":87,"author":{"gitId":"Barbaracwx"},"content":"        } else {","lastModifiedDate":"2023-09-22"},{"lineNumber":88,"author":{"gitId":"Barbaracwx"},"content":"            // Handle the case where the file couldn\u0027t be created or opened.","lastModifiedDate":"2023-09-22"},{"lineNumber":89,"author":{"gitId":"Barbaracwx"},"content":"            System.err.println(\"Error: Unable to create or access the file.\");","lastModifiedDate":"2023-09-22"},{"lineNumber":90,"author":{"gitId":"Barbaracwx"},"content":"        }","lastModifiedDate":"2023-09-22"},{"lineNumber":91,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":92,"author":{"gitId":"Barbaracwx"},"content":"}","lastModifiedDate":"2023-09-22"}],"authorContributionMap":{"Barbaracwx":92}},{"path":"src/main/java/Tasks/TodoTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Barbaracwx"},"content":"package Tasks;","lastModifiedDate":"2023-10-03"},{"lineNumber":2,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":3,"author":{"gitId":"Barbaracwx"},"content":"import Tasks.Task;","lastModifiedDate":"2023-10-03"},{"lineNumber":4,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":5,"author":{"gitId":"Barbaracwx"},"content":"/**","lastModifiedDate":"2023-10-03"},{"lineNumber":6,"author":{"gitId":"Barbaracwx"},"content":" * The TodoTask class represents a task of type \"Todo.\"","lastModifiedDate":"2023-10-03"},{"lineNumber":7,"author":{"gitId":"Barbaracwx"},"content":" * It extends the Task class and inherits its properties and methods.","lastModifiedDate":"2023-10-03"},{"lineNumber":8,"author":{"gitId":"Barbaracwx"},"content":" */","lastModifiedDate":"2023-10-03"},{"lineNumber":9,"author":{"gitId":"Barbaracwx"},"content":"public class TodoTask extends Task {","lastModifiedDate":"2023-09-22"},{"lineNumber":10,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":11,"author":{"gitId":"Barbaracwx"},"content":"     * Constructs a TodoTask with the specified description.","lastModifiedDate":"2023-10-03"},{"lineNumber":12,"author":{"gitId":"Barbaracwx"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":13,"author":{"gitId":"Barbaracwx"},"content":"     * @param description The description of the task.","lastModifiedDate":"2023-10-03"},{"lineNumber":14,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":15,"author":{"gitId":"Barbaracwx"},"content":"    public TodoTask(String description) {","lastModifiedDate":"2023-09-15"},{"lineNumber":16,"author":{"gitId":"Barbaracwx"},"content":"        super(description);","lastModifiedDate":"2023-09-15"},{"lineNumber":17,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":18,"author":{"gitId":"Barbaracwx"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":19,"author":{"gitId":"Barbaracwx"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":20,"author":{"gitId":"Barbaracwx"},"content":"     * Returns a string representation of the TodoTask.","lastModifiedDate":"2023-10-03"},{"lineNumber":21,"author":{"gitId":"Barbaracwx"},"content":"     * The format is \"[T] [status icon] description.\"","lastModifiedDate":"2023-10-03"},{"lineNumber":22,"author":{"gitId":"Barbaracwx"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":23,"author":{"gitId":"Barbaracwx"},"content":"     * @return A string representing the TodoTask.","lastModifiedDate":"2023-10-03"},{"lineNumber":24,"author":{"gitId":"Barbaracwx"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":25,"author":{"gitId":"Barbaracwx"},"content":"    @Override","lastModifiedDate":"2023-10-03"},{"lineNumber":26,"author":{"gitId":"Barbaracwx"},"content":"    public String toString() {","lastModifiedDate":"2023-09-15"},{"lineNumber":27,"author":{"gitId":"Barbaracwx"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-09-15"},{"lineNumber":28,"author":{"gitId":"Barbaracwx"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":29,"author":{"gitId":"Barbaracwx"},"content":"}","lastModifiedDate":"2023-09-06"}],"authorContributionMap":{"Barbaracwx":29}}]
