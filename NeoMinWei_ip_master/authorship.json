[{"path":"src/main/java/Neo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NeoMinWei"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-16"},{"lineNumber":2,"author":{"gitId":"NeoMinWei"},"content":"import neo.task.Task;","lastModifiedDate":"2023-09-23"},{"lineNumber":3,"author":{"gitId":"NeoMinWei"},"content":"import neo.util.Parser;","lastModifiedDate":"2023-09-23"},{"lineNumber":4,"author":{"gitId":"NeoMinWei"},"content":"import neo.util.Storage;","lastModifiedDate":"2023-09-23"},{"lineNumber":5,"author":{"gitId":"NeoMinWei"},"content":"import neo.task.TaskList;","lastModifiedDate":"2023-09-23"},{"lineNumber":6,"author":{"gitId":"NeoMinWei"},"content":"import neo.util.Ui;","lastModifiedDate":"2023-09-23"},{"lineNumber":7,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-23"},{"lineNumber":8,"author":{"gitId":"NeoMinWei"},"content":"/**","lastModifiedDate":"2023-09-25"},{"lineNumber":9,"author":{"gitId":"NeoMinWei"},"content":" * This is the main class of Neo chatbot.","lastModifiedDate":"2023-09-25"},{"lineNumber":10,"author":{"gitId":"NeoMinWei"},"content":" */","lastModifiedDate":"2023-09-25"},{"lineNumber":11,"author":{"gitId":"NeoMinWei"},"content":"public class Neo {","lastModifiedDate":"2023-08-20"},{"lineNumber":12,"author":{"gitId":"NeoMinWei"},"content":"    /**","lastModifiedDate":"2023-09-25"},{"lineNumber":13,"author":{"gitId":"NeoMinWei"},"content":"     * Main method where data.txt file is loaded or generated, along with creating","lastModifiedDate":"2023-09-25"},{"lineNumber":14,"author":{"gitId":"NeoMinWei"},"content":"     * the list for storing the tasks.","lastModifiedDate":"2023-09-25"},{"lineNumber":15,"author":{"gitId":"NeoMinWei"},"content":"     *","lastModifiedDate":"2023-09-25"},{"lineNumber":16,"author":{"gitId":"NeoMinWei"},"content":"     * @param args Unused.","lastModifiedDate":"2023-09-25"},{"lineNumber":17,"author":{"gitId":"NeoMinWei"},"content":"     */","lastModifiedDate":"2023-09-25"},{"lineNumber":18,"author":{"gitId":"NeoMinWei"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-09-23"},{"lineNumber":19,"author":{"gitId":"NeoMinWei"},"content":"        Storage.findFile(TaskList.getList());","lastModifiedDate":"2023-09-23"},{"lineNumber":20,"author":{"gitId":"NeoMinWei"},"content":"        Ui.welcomeMessage();","lastModifiedDate":"2023-09-23"},{"lineNumber":21,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-23"},{"lineNumber":22,"author":{"gitId":"NeoMinWei"},"content":"        String input \u003d Ui.readInput();","lastModifiedDate":"2023-09-23"},{"lineNumber":23,"author":{"gitId":"NeoMinWei"},"content":"        ArrayList\u003cTask\u003e list \u003d TaskList.getList();","lastModifiedDate":"2023-09-23"},{"lineNumber":24,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-23"},{"lineNumber":25,"author":{"gitId":"NeoMinWei"},"content":"        Parser.handleInput(input, list);","lastModifiedDate":"2023-09-23"},{"lineNumber":26,"author":{"gitId":"NeoMinWei"},"content":"        Ui.byeMessage();","lastModifiedDate":"2023-09-23"},{"lineNumber":27,"author":{"gitId":"NeoMinWei"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":28,"author":{"gitId":"NeoMinWei"},"content":"}","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"NeoMinWei":28}},{"path":"src/main/java/neo/exception/NeoTaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NeoMinWei"},"content":"package neo.exception;","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":3,"author":{"gitId":"NeoMinWei"},"content":"import neo.type.ErrorType;","lastModifiedDate":"2023-09-09"},{"lineNumber":4,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":5,"author":{"gitId":"NeoMinWei"},"content":"/**","lastModifiedDate":"2023-09-25"},{"lineNumber":6,"author":{"gitId":"NeoMinWei"},"content":" * A form of throwable that indicates conditions specific to Neo chatbot that can be caught.","lastModifiedDate":"2023-09-25"},{"lineNumber":7,"author":{"gitId":"NeoMinWei"},"content":" */","lastModifiedDate":"2023-09-25"},{"lineNumber":8,"author":{"gitId":"NeoMinWei"},"content":"public class NeoTaskException extends Exception {","lastModifiedDate":"2023-09-24"},{"lineNumber":9,"author":{"gitId":"NeoMinWei"},"content":"    protected String description;","lastModifiedDate":"2023-09-08"},{"lineNumber":10,"author":{"gitId":"NeoMinWei"},"content":"    protected ErrorType type;","lastModifiedDate":"2023-09-09"},{"lineNumber":11,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":12,"author":{"gitId":"NeoMinWei"},"content":"    /**","lastModifiedDate":"2023-09-25"},{"lineNumber":13,"author":{"gitId":"NeoMinWei"},"content":"     * Constructs exception with parameters to indicate the type of excpetion.","lastModifiedDate":"2023-09-25"},{"lineNumber":14,"author":{"gitId":"NeoMinWei"},"content":"     *","lastModifiedDate":"2023-09-25"},{"lineNumber":15,"author":{"gitId":"NeoMinWei"},"content":"     * @param description Describes which part of task caused the error","lastModifiedDate":"2023-09-25"},{"lineNumber":16,"author":{"gitId":"NeoMinWei"},"content":"     * @param type The type of error that was caused","lastModifiedDate":"2023-09-25"},{"lineNumber":17,"author":{"gitId":"NeoMinWei"},"content":"     */","lastModifiedDate":"2023-09-25"},{"lineNumber":18,"author":{"gitId":"NeoMinWei"},"content":"    public NeoTaskException(String description, ErrorType type) {","lastModifiedDate":"2023-09-24"},{"lineNumber":19,"author":{"gitId":"NeoMinWei"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-09-08"},{"lineNumber":20,"author":{"gitId":"NeoMinWei"},"content":"        this.type \u003d type;","lastModifiedDate":"2023-09-09"},{"lineNumber":21,"author":{"gitId":"NeoMinWei"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":22,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":23,"author":{"gitId":"NeoMinWei"},"content":"    /**","lastModifiedDate":"2023-09-25"},{"lineNumber":24,"author":{"gitId":"NeoMinWei"},"content":"     * Prints the exception and recommended actions to the user.","lastModifiedDate":"2023-09-25"},{"lineNumber":25,"author":{"gitId":"NeoMinWei"},"content":"     */","lastModifiedDate":"2023-09-25"},{"lineNumber":26,"author":{"gitId":"NeoMinWei"},"content":"    public void printException() {","lastModifiedDate":"2023-09-08"},{"lineNumber":27,"author":{"gitId":"NeoMinWei"},"content":"        switch (this.type) {","lastModifiedDate":"2023-09-09"},{"lineNumber":28,"author":{"gitId":"NeoMinWei"},"content":"        case EMPTY:","lastModifiedDate":"2023-09-09"},{"lineNumber":29,"author":{"gitId":"NeoMinWei"},"content":"            if (description.equals(\"description\")) {","lastModifiedDate":"2023-09-09"},{"lineNumber":30,"author":{"gitId":"NeoMinWei"},"content":"                System.out.println(\"OOPS!!! The description cannot be left empty.\");","lastModifiedDate":"2023-09-08"},{"lineNumber":31,"author":{"gitId":"NeoMinWei"},"content":"            } else {","lastModifiedDate":"2023-09-08"},{"lineNumber":32,"author":{"gitId":"NeoMinWei"},"content":"                System.out.println(\"OOPS!!! The description of \" + description + \" cannot be left empty.\");","lastModifiedDate":"2023-09-09"},{"lineNumber":33,"author":{"gitId":"NeoMinWei"},"content":"            }","lastModifiedDate":"2023-09-09"},{"lineNumber":34,"author":{"gitId":"NeoMinWei"},"content":"            break;","lastModifiedDate":"2023-09-09"},{"lineNumber":35,"author":{"gitId":"NeoMinWei"},"content":"        case FORMAT:","lastModifiedDate":"2023-09-09"},{"lineNumber":36,"author":{"gitId":"NeoMinWei"},"content":"            System.out.println(\"OOPS!!! Please check that \" + description + \" is included in the command.\");","lastModifiedDate":"2023-09-08"},{"lineNumber":37,"author":{"gitId":"NeoMinWei"},"content":"            break;","lastModifiedDate":"2023-09-09"},{"lineNumber":38,"author":{"gitId":"NeoMinWei"},"content":"        case MISUSE:","lastModifiedDate":"2023-09-09"},{"lineNumber":39,"author":{"gitId":"NeoMinWei"},"content":"            if (description.equals(\"/by\")) {","lastModifiedDate":"2023-09-09"},{"lineNumber":40,"author":{"gitId":"NeoMinWei"},"content":"                System.out.println(\"OOPS!!! Did you mean Deadline?\");","lastModifiedDate":"2023-09-09"},{"lineNumber":41,"author":{"gitId":"NeoMinWei"},"content":"            }","lastModifiedDate":"2023-09-09"},{"lineNumber":42,"author":{"gitId":"NeoMinWei"},"content":"            if (description.equals(\"/from\")) {","lastModifiedDate":"2023-09-09"},{"lineNumber":43,"author":{"gitId":"NeoMinWei"},"content":"                System.out.println(\"OOPS!!! Did you mean Event?\");","lastModifiedDate":"2023-09-09"},{"lineNumber":44,"author":{"gitId":"NeoMinWei"},"content":"            }","lastModifiedDate":"2023-09-09"},{"lineNumber":45,"author":{"gitId":"NeoMinWei"},"content":"            break;","lastModifiedDate":"2023-09-09"},{"lineNumber":46,"author":{"gitId":"NeoMinWei"},"content":"        default:","lastModifiedDate":"2023-09-24"},{"lineNumber":47,"author":{"gitId":"NeoMinWei"},"content":"            System.out.println(\"Unable to print exception.\");","lastModifiedDate":"2023-09-24"},{"lineNumber":48,"author":{"gitId":"NeoMinWei"},"content":"            break;","lastModifiedDate":"2023-09-24"},{"lineNumber":49,"author":{"gitId":"NeoMinWei"},"content":"        }","lastModifiedDate":"2023-09-08"},{"lineNumber":50,"author":{"gitId":"NeoMinWei"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":51,"author":{"gitId":"NeoMinWei"},"content":"}","lastModifiedDate":"2023-09-08"}],"authorContributionMap":{"NeoMinWei":51}},{"path":"src/main/java/neo/exception/NeoTimeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NeoMinWei"},"content":"package neo.exception;","lastModifiedDate":"2023-09-24"},{"lineNumber":2,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-24"},{"lineNumber":3,"author":{"gitId":"NeoMinWei"},"content":"import neo.type.TimeErrorType;","lastModifiedDate":"2023-09-24"},{"lineNumber":4,"author":{"gitId":"NeoMinWei"},"content":"import neo.type.TimeType;","lastModifiedDate":"2023-09-24"},{"lineNumber":5,"author":{"gitId":"NeoMinWei"},"content":"import neo.type.TimeValueType;","lastModifiedDate":"2023-09-24"},{"lineNumber":6,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-25"},{"lineNumber":7,"author":{"gitId":"NeoMinWei"},"content":"/**","lastModifiedDate":"2023-09-25"},{"lineNumber":8,"author":{"gitId":"NeoMinWei"},"content":" * A form of throwable that indicates conditions specific to time parsing in Neo chatbot that can be","lastModifiedDate":"2023-09-25"},{"lineNumber":9,"author":{"gitId":"NeoMinWei"},"content":" * caught.","lastModifiedDate":"2023-09-25"},{"lineNumber":10,"author":{"gitId":"NeoMinWei"},"content":" */","lastModifiedDate":"2023-09-25"},{"lineNumber":11,"author":{"gitId":"NeoMinWei"},"content":"public class NeoTimeException extends Exception {","lastModifiedDate":"2023-09-24"},{"lineNumber":12,"author":{"gitId":"NeoMinWei"},"content":"    protected TimeType timeType;","lastModifiedDate":"2023-09-24"},{"lineNumber":13,"author":{"gitId":"NeoMinWei"},"content":"    protected TimeValueType timeValueType;","lastModifiedDate":"2023-09-24"},{"lineNumber":14,"author":{"gitId":"NeoMinWei"},"content":"    protected TimeErrorType timeErrorType;","lastModifiedDate":"2023-09-24"},{"lineNumber":15,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-24"},{"lineNumber":16,"author":{"gitId":"NeoMinWei"},"content":"    /**","lastModifiedDate":"2023-09-25"},{"lineNumber":17,"author":{"gitId":"NeoMinWei"},"content":"     * Constructs exception with parameters to indicate the type of exception.","lastModifiedDate":"2023-09-25"},{"lineNumber":18,"author":{"gitId":"NeoMinWei"},"content":"     *","lastModifiedDate":"2023-09-25"},{"lineNumber":19,"author":{"gitId":"NeoMinWei"},"content":"     * @param timeType It specifies whether the exception has time included or not.","lastModifiedDate":"2023-09-25"},{"lineNumber":20,"author":{"gitId":"NeoMinWei"},"content":"     * @param timeValueType It specifies which component of date or time has an impossible value.","lastModifiedDate":"2023-09-25"},{"lineNumber":21,"author":{"gitId":"NeoMinWei"},"content":"     * @param timeErrorType It specifies which type of error occurred.","lastModifiedDate":"2023-09-25"},{"lineNumber":22,"author":{"gitId":"NeoMinWei"},"content":"     */","lastModifiedDate":"2023-09-25"},{"lineNumber":23,"author":{"gitId":"NeoMinWei"},"content":"    public NeoTimeException(TimeType timeType, TimeValueType timeValueType, TimeErrorType timeErrorType) {","lastModifiedDate":"2023-09-24"},{"lineNumber":24,"author":{"gitId":"NeoMinWei"},"content":"        this.timeType \u003d timeType;","lastModifiedDate":"2023-09-24"},{"lineNumber":25,"author":{"gitId":"NeoMinWei"},"content":"        this.timeValueType \u003d timeValueType;","lastModifiedDate":"2023-09-24"},{"lineNumber":26,"author":{"gitId":"NeoMinWei"},"content":"        this.timeErrorType \u003d timeErrorType;","lastModifiedDate":"2023-09-24"},{"lineNumber":27,"author":{"gitId":"NeoMinWei"},"content":"    }","lastModifiedDate":"2023-09-24"},{"lineNumber":28,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-24"},{"lineNumber":29,"author":{"gitId":"NeoMinWei"},"content":"    /**","lastModifiedDate":"2023-09-25"},{"lineNumber":30,"author":{"gitId":"NeoMinWei"},"content":"     * Prints the exception and recommended actions to the user.","lastModifiedDate":"2023-09-25"},{"lineNumber":31,"author":{"gitId":"NeoMinWei"},"content":"     */","lastModifiedDate":"2023-09-25"},{"lineNumber":32,"author":{"gitId":"NeoMinWei"},"content":"    public void printException() {","lastModifiedDate":"2023-09-24"},{"lineNumber":33,"author":{"gitId":"NeoMinWei"},"content":"        switch (timeErrorType) {","lastModifiedDate":"2023-09-24"},{"lineNumber":34,"author":{"gitId":"NeoMinWei"},"content":"        case FORMAT:","lastModifiedDate":"2023-09-24"},{"lineNumber":35,"author":{"gitId":"NeoMinWei"},"content":"            printFormatError();","lastModifiedDate":"2023-09-24"},{"lineNumber":36,"author":{"gitId":"NeoMinWei"},"content":"            break;","lastModifiedDate":"2023-09-24"},{"lineNumber":37,"author":{"gitId":"NeoMinWei"},"content":"        case VALUE:","lastModifiedDate":"2023-09-24"},{"lineNumber":38,"author":{"gitId":"NeoMinWei"},"content":"            printValueError();","lastModifiedDate":"2023-09-24"},{"lineNumber":39,"author":{"gitId":"NeoMinWei"},"content":"            break;","lastModifiedDate":"2023-09-24"},{"lineNumber":40,"author":{"gitId":"NeoMinWei"},"content":"        default:","lastModifiedDate":"2023-09-24"},{"lineNumber":41,"author":{"gitId":"NeoMinWei"},"content":"            System.out.println(\"Unable to print exception.\");","lastModifiedDate":"2023-09-24"},{"lineNumber":42,"author":{"gitId":"NeoMinWei"},"content":"            break;","lastModifiedDate":"2023-09-24"},{"lineNumber":43,"author":{"gitId":"NeoMinWei"},"content":"        }","lastModifiedDate":"2023-09-24"},{"lineNumber":44,"author":{"gitId":"NeoMinWei"},"content":"    }","lastModifiedDate":"2023-09-24"},{"lineNumber":45,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-24"},{"lineNumber":46,"author":{"gitId":"NeoMinWei"},"content":"    private void printValueError() {","lastModifiedDate":"2023-09-24"},{"lineNumber":47,"author":{"gitId":"NeoMinWei"},"content":"        switch (timeValueType) {","lastModifiedDate":"2023-09-24"},{"lineNumber":48,"author":{"gitId":"NeoMinWei"},"content":"        case DAY:","lastModifiedDate":"2023-09-24"},{"lineNumber":49,"author":{"gitId":"NeoMinWei"},"content":"            System.out.println(\"Please make sure the day is from 0-31.\");","lastModifiedDate":"2023-09-24"},{"lineNumber":50,"author":{"gitId":"NeoMinWei"},"content":"            break;","lastModifiedDate":"2023-09-24"},{"lineNumber":51,"author":{"gitId":"NeoMinWei"},"content":"        case MONTH:","lastModifiedDate":"2023-09-24"},{"lineNumber":52,"author":{"gitId":"NeoMinWei"},"content":"            System.out.println(\"Please make sure the month is from 0-31.\");","lastModifiedDate":"2023-09-24"},{"lineNumber":53,"author":{"gitId":"NeoMinWei"},"content":"            break;","lastModifiedDate":"2023-09-24"},{"lineNumber":54,"author":{"gitId":"NeoMinWei"},"content":"        case HOUR:","lastModifiedDate":"2023-09-24"},{"lineNumber":55,"author":{"gitId":"NeoMinWei"},"content":"            System.out.println(\"Please make sure the hours is from 0-23.\");","lastModifiedDate":"2023-09-24"},{"lineNumber":56,"author":{"gitId":"NeoMinWei"},"content":"            break;","lastModifiedDate":"2023-09-24"},{"lineNumber":57,"author":{"gitId":"NeoMinWei"},"content":"        case MINUTE:","lastModifiedDate":"2023-09-24"},{"lineNumber":58,"author":{"gitId":"NeoMinWei"},"content":"            System.out.println(\"Please make sure the minutes is from 0-59.\");","lastModifiedDate":"2023-09-24"},{"lineNumber":59,"author":{"gitId":"NeoMinWei"},"content":"        default:","lastModifiedDate":"2023-09-24"},{"lineNumber":60,"author":{"gitId":"NeoMinWei"},"content":"            System.out.println(\"Unable to print exception.\");","lastModifiedDate":"2023-09-24"},{"lineNumber":61,"author":{"gitId":"NeoMinWei"},"content":"            break;","lastModifiedDate":"2023-09-24"},{"lineNumber":62,"author":{"gitId":"NeoMinWei"},"content":"        }","lastModifiedDate":"2023-09-24"},{"lineNumber":63,"author":{"gitId":"NeoMinWei"},"content":"    }","lastModifiedDate":"2023-09-24"},{"lineNumber":64,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-24"},{"lineNumber":65,"author":{"gitId":"NeoMinWei"},"content":"    private void printFormatError() {","lastModifiedDate":"2023-09-24"},{"lineNumber":66,"author":{"gitId":"NeoMinWei"},"content":"        switch (timeType) {","lastModifiedDate":"2023-09-24"},{"lineNumber":67,"author":{"gitId":"NeoMinWei"},"content":"        case DATE:","lastModifiedDate":"2023-09-24"},{"lineNumber":68,"author":{"gitId":"NeoMinWei"},"content":"            System.out.println(\"Please make sure you have the correct format for date. (DD/MM/YYYY)\");","lastModifiedDate":"2023-09-24"},{"lineNumber":69,"author":{"gitId":"NeoMinWei"},"content":"            break;","lastModifiedDate":"2023-09-24"},{"lineNumber":70,"author":{"gitId":"NeoMinWei"},"content":"        case DATE_AND_TIME:","lastModifiedDate":"2023-09-24"},{"lineNumber":71,"author":{"gitId":"NeoMinWei"},"content":"            System.out.println(\"Please make sure you have the correct format for date and time. (DD/MM/YYYY HHmm)\");","lastModifiedDate":"2023-09-24"},{"lineNumber":72,"author":{"gitId":"NeoMinWei"},"content":"        default:","lastModifiedDate":"2023-09-24"},{"lineNumber":73,"author":{"gitId":"NeoMinWei"},"content":"            System.out.println(\"Unable to print exception.\");","lastModifiedDate":"2023-09-24"},{"lineNumber":74,"author":{"gitId":"NeoMinWei"},"content":"            break;","lastModifiedDate":"2023-09-24"},{"lineNumber":75,"author":{"gitId":"NeoMinWei"},"content":"        }","lastModifiedDate":"2023-09-24"},{"lineNumber":76,"author":{"gitId":"NeoMinWei"},"content":"    }","lastModifiedDate":"2023-09-24"},{"lineNumber":77,"author":{"gitId":"NeoMinWei"},"content":"}","lastModifiedDate":"2023-09-24"}],"authorContributionMap":{"NeoMinWei":77}},{"path":"src/main/java/neo/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NeoMinWei"},"content":"package neo.task;","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":3,"author":{"gitId":"NeoMinWei"},"content":"/**","lastModifiedDate":"2023-09-25"},{"lineNumber":4,"author":{"gitId":"NeoMinWei"},"content":" * Represents a form of task that has a due date.","lastModifiedDate":"2023-09-25"},{"lineNumber":5,"author":{"gitId":"NeoMinWei"},"content":" */","lastModifiedDate":"2023-09-25"},{"lineNumber":6,"author":{"gitId":"NeoMinWei"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"NeoMinWei"},"content":"    protected String by;","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"NeoMinWei"},"content":"    /**","lastModifiedDate":"2023-09-25"},{"lineNumber":11,"author":{"gitId":"NeoMinWei"},"content":"     * Constructs a task with a string to indicate the due date.","lastModifiedDate":"2023-09-25"},{"lineNumber":12,"author":{"gitId":"NeoMinWei"},"content":"     *","lastModifiedDate":"2023-09-25"},{"lineNumber":13,"author":{"gitId":"NeoMinWei"},"content":"     * @param description This is the description of the task.","lastModifiedDate":"2023-09-25"},{"lineNumber":14,"author":{"gitId":"NeoMinWei"},"content":"     * @param by This is the description of the due date.","lastModifiedDate":"2023-09-25"},{"lineNumber":15,"author":{"gitId":"NeoMinWei"},"content":"     */","lastModifiedDate":"2023-09-25"},{"lineNumber":16,"author":{"gitId":"NeoMinWei"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"NeoMinWei"},"content":"        super(description);","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"NeoMinWei"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"NeoMinWei"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-24"},{"lineNumber":21,"author":{"gitId":"NeoMinWei"},"content":"    /**","lastModifiedDate":"2023-09-25"},{"lineNumber":22,"author":{"gitId":"NeoMinWei"},"content":"     * Returns The deadline in a format for saving into a .txt file.","lastModifiedDate":"2023-09-25"},{"lineNumber":23,"author":{"gitId":"NeoMinWei"},"content":"     *","lastModifiedDate":"2023-09-25"},{"lineNumber":24,"author":{"gitId":"NeoMinWei"},"content":"     * @return The formatted deadline.","lastModifiedDate":"2023-09-25"},{"lineNumber":25,"author":{"gitId":"NeoMinWei"},"content":"     */","lastModifiedDate":"2023-09-25"},{"lineNumber":26,"author":{"gitId":"NeoMinWei"},"content":"    @Override","lastModifiedDate":"2023-09-16"},{"lineNumber":27,"author":{"gitId":"NeoMinWei"},"content":"    public String formatTask() {","lastModifiedDate":"2023-09-16"},{"lineNumber":28,"author":{"gitId":"NeoMinWei"},"content":"        return \"D / \" + super.formatTask() + \" / \" + by;","lastModifiedDate":"2023-09-16"},{"lineNumber":29,"author":{"gitId":"NeoMinWei"},"content":"    }","lastModifiedDate":"2023-09-16"},{"lineNumber":30,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-25"},{"lineNumber":31,"author":{"gitId":"NeoMinWei"},"content":"    /**","lastModifiedDate":"2023-09-25"},{"lineNumber":32,"author":{"gitId":"NeoMinWei"},"content":"     * Returns the deadline in an easy-to-read format to the user.","lastModifiedDate":"2023-09-25"},{"lineNumber":33,"author":{"gitId":"NeoMinWei"},"content":"     *","lastModifiedDate":"2023-09-25"},{"lineNumber":34,"author":{"gitId":"NeoMinWei"},"content":"     * @return The formatted deadline.","lastModifiedDate":"2023-09-25"},{"lineNumber":35,"author":{"gitId":"NeoMinWei"},"content":"     */","lastModifiedDate":"2023-09-25"},{"lineNumber":36,"author":{"gitId":"NeoMinWei"},"content":"    @Override","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"NeoMinWei"},"content":"    public String toString() {","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"NeoMinWei"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + dateTimeFormatter(by) + \")\";","lastModifiedDate":"2023-09-24"},{"lineNumber":39,"author":{"gitId":"NeoMinWei"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"NeoMinWei"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"NeoMinWei":40}},{"path":"src/main/java/neo/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NeoMinWei"},"content":"package neo.task;","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":3,"author":{"gitId":"NeoMinWei"},"content":"/**","lastModifiedDate":"2023-09-25"},{"lineNumber":4,"author":{"gitId":"NeoMinWei"},"content":" * Represents a form of task that has a starting date and due date.","lastModifiedDate":"2023-09-25"},{"lineNumber":5,"author":{"gitId":"NeoMinWei"},"content":" */","lastModifiedDate":"2023-09-25"},{"lineNumber":6,"author":{"gitId":"NeoMinWei"},"content":"public class Event extends Task {","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"NeoMinWei"},"content":"    protected String from;","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"NeoMinWei"},"content":"    protected String to;","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-24"},{"lineNumber":11,"author":{"gitId":"NeoMinWei"},"content":"    /**","lastModifiedDate":"2023-09-25"},{"lineNumber":12,"author":{"gitId":"NeoMinWei"},"content":"     * Constructs a task with a string to indicate the starting date and due date.","lastModifiedDate":"2023-09-25"},{"lineNumber":13,"author":{"gitId":"NeoMinWei"},"content":"     *","lastModifiedDate":"2023-09-25"},{"lineNumber":14,"author":{"gitId":"NeoMinWei"},"content":"     * @param description This is the description of the task.","lastModifiedDate":"2023-09-25"},{"lineNumber":15,"author":{"gitId":"NeoMinWei"},"content":"     * @param from This is the description of the starting date.","lastModifiedDate":"2023-09-25"},{"lineNumber":16,"author":{"gitId":"NeoMinWei"},"content":"     * @param to This is the description of the due date.","lastModifiedDate":"2023-09-25"},{"lineNumber":17,"author":{"gitId":"NeoMinWei"},"content":"     */","lastModifiedDate":"2023-09-25"},{"lineNumber":18,"author":{"gitId":"NeoMinWei"},"content":"    public Event(String description, String from, String to) {","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"NeoMinWei"},"content":"        super(description);","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"NeoMinWei"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"NeoMinWei"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"NeoMinWei"},"content":"    }","lastModifiedDate":"2023-09-24"},{"lineNumber":23,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-24"},{"lineNumber":24,"author":{"gitId":"NeoMinWei"},"content":"    /**","lastModifiedDate":"2023-09-25"},{"lineNumber":25,"author":{"gitId":"NeoMinWei"},"content":"     * Returns the event in a format for saving into a .txt file.","lastModifiedDate":"2023-09-25"},{"lineNumber":26,"author":{"gitId":"NeoMinWei"},"content":"     *","lastModifiedDate":"2023-09-25"},{"lineNumber":27,"author":{"gitId":"NeoMinWei"},"content":"     * @return The formatted deadline.","lastModifiedDate":"2023-09-25"},{"lineNumber":28,"author":{"gitId":"NeoMinWei"},"content":"     */","lastModifiedDate":"2023-09-25"},{"lineNumber":29,"author":{"gitId":"NeoMinWei"},"content":"    @Override","lastModifiedDate":"2023-09-16"},{"lineNumber":30,"author":{"gitId":"NeoMinWei"},"content":"    public String formatTask() {","lastModifiedDate":"2023-09-16"},{"lineNumber":31,"author":{"gitId":"NeoMinWei"},"content":"        return \"E / \" + super.formatTask() + \" / \" + from + \" / \" + to;","lastModifiedDate":"2023-09-16"},{"lineNumber":32,"author":{"gitId":"NeoMinWei"},"content":"    }","lastModifiedDate":"2023-09-16"},{"lineNumber":33,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-25"},{"lineNumber":34,"author":{"gitId":"NeoMinWei"},"content":"    /**","lastModifiedDate":"2023-09-25"},{"lineNumber":35,"author":{"gitId":"NeoMinWei"},"content":"     * Returns the event in an easy-to-read format to the user.","lastModifiedDate":"2023-09-25"},{"lineNumber":36,"author":{"gitId":"NeoMinWei"},"content":"     *","lastModifiedDate":"2023-09-25"},{"lineNumber":37,"author":{"gitId":"NeoMinWei"},"content":"     * @return The formatted deadline.","lastModifiedDate":"2023-09-25"},{"lineNumber":38,"author":{"gitId":"NeoMinWei"},"content":"     */","lastModifiedDate":"2023-09-25"},{"lineNumber":39,"author":{"gitId":"NeoMinWei"},"content":"    @Override","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"NeoMinWei"},"content":"    public String toString() {","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"NeoMinWei"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + dateTimeFormatter(from) + \" to: \" + dateTimeFormatter(to) + \")\";","lastModifiedDate":"2023-09-24"},{"lineNumber":42,"author":{"gitId":"NeoMinWei"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"NeoMinWei"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"NeoMinWei":43}},{"path":"src/main/java/neo/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NeoMinWei"},"content":"package neo.task;","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":3,"author":{"gitId":"NeoMinWei"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-24"},{"lineNumber":4,"author":{"gitId":"NeoMinWei"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-24"},{"lineNumber":5,"author":{"gitId":"NeoMinWei"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-09-24"},{"lineNumber":6,"author":{"gitId":"NeoMinWei"},"content":"import java.time.format.FormatStyle;","lastModifiedDate":"2023-09-24"},{"lineNumber":7,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-24"},{"lineNumber":8,"author":{"gitId":"NeoMinWei"},"content":"/**","lastModifiedDate":"2023-09-25"},{"lineNumber":9,"author":{"gitId":"NeoMinWei"},"content":" * Represents a form of task. This class is abstract as tasks are always constructed as","lastModifiedDate":"2023-09-25"},{"lineNumber":10,"author":{"gitId":"NeoMinWei"},"content":" * a form of Todo, Deadline or Event.","lastModifiedDate":"2023-09-25"},{"lineNumber":11,"author":{"gitId":"NeoMinWei"},"content":" */","lastModifiedDate":"2023-09-25"},{"lineNumber":12,"author":{"gitId":"NeoMinWei"},"content":"public abstract class Task {","lastModifiedDate":"2023-09-25"},{"lineNumber":13,"author":{"gitId":"NeoMinWei"},"content":"    protected String description;","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"NeoMinWei"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"NeoMinWei"},"content":"    /**","lastModifiedDate":"2023-09-25"},{"lineNumber":17,"author":{"gitId":"NeoMinWei"},"content":"     * Sets the status of task to be done or not done.","lastModifiedDate":"2023-09-25"},{"lineNumber":18,"author":{"gitId":"NeoMinWei"},"content":"     *","lastModifiedDate":"2023-09-25"},{"lineNumber":19,"author":{"gitId":"NeoMinWei"},"content":"     * @param done Indicates what status to set the task as.","lastModifiedDate":"2023-09-25"},{"lineNumber":20,"author":{"gitId":"NeoMinWei"},"content":"     */","lastModifiedDate":"2023-09-25"},{"lineNumber":21,"author":{"gitId":"NeoMinWei"},"content":"    public void setDone(boolean done) {","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"NeoMinWei"},"content":"        isDone \u003d done;","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"NeoMinWei"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"NeoMinWei"},"content":"    /**","lastModifiedDate":"2023-09-25"},{"lineNumber":26,"author":{"gitId":"NeoMinWei"},"content":"     * Constructs a task with a string to describe it. Default value of whether","lastModifiedDate":"2023-09-25"},{"lineNumber":27,"author":{"gitId":"NeoMinWei"},"content":"     * the task is done is false.","lastModifiedDate":"2023-09-25"},{"lineNumber":28,"author":{"gitId":"NeoMinWei"},"content":"     *","lastModifiedDate":"2023-09-25"},{"lineNumber":29,"author":{"gitId":"NeoMinWei"},"content":"     * @param description This is the description of the task.","lastModifiedDate":"2023-09-25"},{"lineNumber":30,"author":{"gitId":"NeoMinWei"},"content":"     */","lastModifiedDate":"2023-09-25"},{"lineNumber":31,"author":{"gitId":"NeoMinWei"},"content":"    public Task(String description) {","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"NeoMinWei"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"NeoMinWei"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"NeoMinWei"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"NeoMinWei"},"content":"    private String getStatusIcon() {","lastModifiedDate":"2023-09-24"},{"lineNumber":37,"author":{"gitId":"NeoMinWei"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"NeoMinWei"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-24"},{"lineNumber":40,"author":{"gitId":"NeoMinWei"},"content":"    private boolean hasTime(String line) {","lastModifiedDate":"2023-09-24"},{"lineNumber":41,"author":{"gitId":"NeoMinWei"},"content":"        String[] dateAndTime \u003d line.split(\" \");","lastModifiedDate":"2023-09-24"},{"lineNumber":42,"author":{"gitId":"NeoMinWei"},"content":"        return dateAndTime.length \u003d\u003d 2;","lastModifiedDate":"2023-09-24"},{"lineNumber":43,"author":{"gitId":"NeoMinWei"},"content":"    }","lastModifiedDate":"2023-09-24"},{"lineNumber":44,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-25"},{"lineNumber":45,"author":{"gitId":"NeoMinWei"},"content":"    /**","lastModifiedDate":"2023-09-25"},{"lineNumber":46,"author":{"gitId":"NeoMinWei"},"content":"     * Formats the string representing date or date and time into a format of","lastModifiedDate":"2023-09-25"},{"lineNumber":47,"author":{"gitId":"NeoMinWei"},"content":"     * (Day of Week), (Day) (Full name of Month) (Year) HH:mm AM/PM. If there is no time,","lastModifiedDate":"2023-09-25"},{"lineNumber":48,"author":{"gitId":"NeoMinWei"},"content":"     * the time portion of the format will be ignored.","lastModifiedDate":"2023-09-25"},{"lineNumber":49,"author":{"gitId":"NeoMinWei"},"content":"     * For example: 25/09/2023 1300 -\u003e Monday, 25 September 2023, 1:00 PM.","lastModifiedDate":"2023-09-25"},{"lineNumber":50,"author":{"gitId":"NeoMinWei"},"content":"     *","lastModifiedDate":"2023-09-25"},{"lineNumber":51,"author":{"gitId":"NeoMinWei"},"content":"     * @param line This is the string representing the date or date and time.","lastModifiedDate":"2023-09-25"},{"lineNumber":52,"author":{"gitId":"NeoMinWei"},"content":"     * @return The formatted date or date and time.","lastModifiedDate":"2023-09-25"},{"lineNumber":53,"author":{"gitId":"NeoMinWei"},"content":"     */","lastModifiedDate":"2023-09-25"},{"lineNumber":54,"author":{"gitId":"NeoMinWei"},"content":"    public String dateTimeFormatter(String line) {","lastModifiedDate":"2023-09-24"},{"lineNumber":55,"author":{"gitId":"NeoMinWei"},"content":"        if (hasTime(line)) {","lastModifiedDate":"2023-09-24"},{"lineNumber":56,"author":{"gitId":"NeoMinWei"},"content":"            return formatDateAndTime(line);","lastModifiedDate":"2023-09-24"},{"lineNumber":57,"author":{"gitId":"NeoMinWei"},"content":"        } else {","lastModifiedDate":"2023-09-24"},{"lineNumber":58,"author":{"gitId":"NeoMinWei"},"content":"            return formatDate(line);","lastModifiedDate":"2023-09-24"},{"lineNumber":59,"author":{"gitId":"NeoMinWei"},"content":"        }","lastModifiedDate":"2023-09-24"},{"lineNumber":60,"author":{"gitId":"NeoMinWei"},"content":"    }","lastModifiedDate":"2023-09-24"},{"lineNumber":61,"author":{"gitId":"NeoMinWei"},"content":"    private String formatDate(String line) {","lastModifiedDate":"2023-09-24"},{"lineNumber":62,"author":{"gitId":"NeoMinWei"},"content":"        LocalDate date \u003d LocalDate.parse(line, DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));","lastModifiedDate":"2023-09-24"},{"lineNumber":63,"author":{"gitId":"NeoMinWei"},"content":"        return date.format(DateTimeFormatter.ofLocalizedDate(FormatStyle.FULL));","lastModifiedDate":"2023-09-24"},{"lineNumber":64,"author":{"gitId":"NeoMinWei"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":65,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":66,"author":{"gitId":"NeoMinWei"},"content":"    private String formatDateAndTime(String line) {","lastModifiedDate":"2023-09-24"},{"lineNumber":67,"author":{"gitId":"NeoMinWei"},"content":"        LocalDateTime dateTime \u003d LocalDateTime.parse(line, DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\"));","lastModifiedDate":"2023-09-24"},{"lineNumber":68,"author":{"gitId":"NeoMinWei"},"content":"        return dateTime.format(DateTimeFormatter.ofLocalizedDateTime(FormatStyle.FULL, FormatStyle.SHORT));","lastModifiedDate":"2023-09-24"},{"lineNumber":69,"author":{"gitId":"NeoMinWei"},"content":"    }","lastModifiedDate":"2023-09-24"},{"lineNumber":70,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-25"},{"lineNumber":71,"author":{"gitId":"NeoMinWei"},"content":"    /**","lastModifiedDate":"2023-09-25"},{"lineNumber":72,"author":{"gitId":"NeoMinWei"},"content":"     * Returns the task in a format for saving into a .txt file.","lastModifiedDate":"2023-09-25"},{"lineNumber":73,"author":{"gitId":"NeoMinWei"},"content":"     *","lastModifiedDate":"2023-09-25"},{"lineNumber":74,"author":{"gitId":"NeoMinWei"},"content":"     * @return The formatted task.","lastModifiedDate":"2023-09-25"},{"lineNumber":75,"author":{"gitId":"NeoMinWei"},"content":"     */","lastModifiedDate":"2023-09-25"},{"lineNumber":76,"author":{"gitId":"NeoMinWei"},"content":"    public String formatTask() {","lastModifiedDate":"2023-09-16"},{"lineNumber":77,"author":{"gitId":"NeoMinWei"},"content":"        int status;","lastModifiedDate":"2023-09-16"},{"lineNumber":78,"author":{"gitId":"NeoMinWei"},"content":"        if (this.getStatusIcon().equals(\"X\")) {","lastModifiedDate":"2023-09-16"},{"lineNumber":79,"author":{"gitId":"NeoMinWei"},"content":"            status \u003d 1;","lastModifiedDate":"2023-09-16"},{"lineNumber":80,"author":{"gitId":"NeoMinWei"},"content":"        } else {","lastModifiedDate":"2023-09-16"},{"lineNumber":81,"author":{"gitId":"NeoMinWei"},"content":"            status \u003d 0;","lastModifiedDate":"2023-09-16"},{"lineNumber":82,"author":{"gitId":"NeoMinWei"},"content":"        }","lastModifiedDate":"2023-09-16"},{"lineNumber":83,"author":{"gitId":"NeoMinWei"},"content":"        return status + \" / \" + this.description;","lastModifiedDate":"2023-09-16"},{"lineNumber":84,"author":{"gitId":"NeoMinWei"},"content":"    }","lastModifiedDate":"2023-09-16"},{"lineNumber":85,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-25"},{"lineNumber":86,"author":{"gitId":"NeoMinWei"},"content":"    /**","lastModifiedDate":"2023-09-25"},{"lineNumber":87,"author":{"gitId":"NeoMinWei"},"content":"     * Returns the task in an easy-to-read format to the user.","lastModifiedDate":"2023-09-25"},{"lineNumber":88,"author":{"gitId":"NeoMinWei"},"content":"     *","lastModifiedDate":"2023-09-25"},{"lineNumber":89,"author":{"gitId":"NeoMinWei"},"content":"     * @return The formatted task.","lastModifiedDate":"2023-09-25"},{"lineNumber":90,"author":{"gitId":"NeoMinWei"},"content":"     */","lastModifiedDate":"2023-09-25"},{"lineNumber":91,"author":{"gitId":"NeoMinWei"},"content":"    @Override","lastModifiedDate":"2023-09-24"},{"lineNumber":92,"author":{"gitId":"NeoMinWei"},"content":"    public String toString() {","lastModifiedDate":"2023-09-24"},{"lineNumber":93,"author":{"gitId":"NeoMinWei"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.description;","lastModifiedDate":"2023-09-24"},{"lineNumber":94,"author":{"gitId":"NeoMinWei"},"content":"    }","lastModifiedDate":"2023-09-24"},{"lineNumber":95,"author":{"gitId":"NeoMinWei"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"NeoMinWei":95}},{"path":"src/main/java/neo/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NeoMinWei"},"content":"package neo.task;","lastModifiedDate":"2023-09-23"},{"lineNumber":2,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-23"},{"lineNumber":3,"author":{"gitId":"NeoMinWei"},"content":"import neo.exception.NeoTaskException;","lastModifiedDate":"2023-09-24"},{"lineNumber":4,"author":{"gitId":"NeoMinWei"},"content":"import neo.exception.NeoTimeException;","lastModifiedDate":"2023-09-24"},{"lineNumber":5,"author":{"gitId":"NeoMinWei"},"content":"import neo.util.ErrorCatcher;","lastModifiedDate":"2023-09-24"},{"lineNumber":6,"author":{"gitId":"NeoMinWei"},"content":"import neo.type.CommandType;","lastModifiedDate":"2023-09-23"},{"lineNumber":7,"author":{"gitId":"NeoMinWei"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-23"},{"lineNumber":8,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-23"},{"lineNumber":9,"author":{"gitId":"NeoMinWei"},"content":"/**","lastModifiedDate":"2023-09-25"},{"lineNumber":10,"author":{"gitId":"NeoMinWei"},"content":" * Represents the list of all tasks. This class is abstract as its main purpose is to provide","lastModifiedDate":"2023-09-25"},{"lineNumber":11,"author":{"gitId":"NeoMinWei"},"content":" * methods to create and manipulate the tasks in the list.","lastModifiedDate":"2023-09-25"},{"lineNumber":12,"author":{"gitId":"NeoMinWei"},"content":" */","lastModifiedDate":"2023-09-25"},{"lineNumber":13,"author":{"gitId":"NeoMinWei"},"content":"public abstract class TaskList {","lastModifiedDate":"2023-09-23"},{"lineNumber":14,"author":{"gitId":"NeoMinWei"},"content":"    protected static ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-25"},{"lineNumber":15,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-23"},{"lineNumber":16,"author":{"gitId":"NeoMinWei"},"content":"    /**","lastModifiedDate":"2023-09-25"},{"lineNumber":17,"author":{"gitId":"NeoMinWei"},"content":"     * Getter for the list.","lastModifiedDate":"2023-09-25"},{"lineNumber":18,"author":{"gitId":"NeoMinWei"},"content":"     *","lastModifiedDate":"2023-09-25"},{"lineNumber":19,"author":{"gitId":"NeoMinWei"},"content":"     * @return the list.","lastModifiedDate":"2023-09-25"},{"lineNumber":20,"author":{"gitId":"NeoMinWei"},"content":"     */","lastModifiedDate":"2023-09-25"},{"lineNumber":21,"author":{"gitId":"NeoMinWei"},"content":"    public static ArrayList\u003cTask\u003e getList() {","lastModifiedDate":"2023-09-23"},{"lineNumber":22,"author":{"gitId":"NeoMinWei"},"content":"        return list;","lastModifiedDate":"2023-09-23"},{"lineNumber":23,"author":{"gitId":"NeoMinWei"},"content":"    }","lastModifiedDate":"2023-09-23"},{"lineNumber":24,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-25"},{"lineNumber":25,"author":{"gitId":"NeoMinWei"},"content":"    /**","lastModifiedDate":"2023-09-25"},{"lineNumber":26,"author":{"gitId":"NeoMinWei"},"content":"     * Prints all the tasks in the list along with its list number.","lastModifiedDate":"2023-09-25"},{"lineNumber":27,"author":{"gitId":"NeoMinWei"},"content":"     */","lastModifiedDate":"2023-09-25"},{"lineNumber":28,"author":{"gitId":"NeoMinWei"},"content":"    public static void printList() {","lastModifiedDate":"2023-09-23"},{"lineNumber":29,"author":{"gitId":"NeoMinWei"},"content":"        int listIndex \u003d 1;","lastModifiedDate":"2023-09-23"},{"lineNumber":30,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-23"},{"lineNumber":31,"author":{"gitId":"NeoMinWei"},"content":"        System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2023-09-23"},{"lineNumber":32,"author":{"gitId":"NeoMinWei"},"content":"        for (Task task : list) {","lastModifiedDate":"2023-09-23"},{"lineNumber":33,"author":{"gitId":"NeoMinWei"},"content":"            System.out.print((listIndex) + \". \");","lastModifiedDate":"2023-09-23"},{"lineNumber":34,"author":{"gitId":"NeoMinWei"},"content":"            System.out.println(task);","lastModifiedDate":"2023-09-23"},{"lineNumber":35,"author":{"gitId":"NeoMinWei"},"content":"            listIndex++;","lastModifiedDate":"2023-09-23"},{"lineNumber":36,"author":{"gitId":"NeoMinWei"},"content":"        }","lastModifiedDate":"2023-09-23"},{"lineNumber":37,"author":{"gitId":"NeoMinWei"},"content":"    }","lastModifiedDate":"2023-09-23"},{"lineNumber":38,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-24"},{"lineNumber":39,"author":{"gitId":"NeoMinWei"},"content":"    /**","lastModifiedDate":"2023-09-25"},{"lineNumber":40,"author":{"gitId":"NeoMinWei"},"content":"     * Decides if there is a match between the input string and the description of tasks in the list.","lastModifiedDate":"2023-09-25"},{"lineNumber":41,"author":{"gitId":"NeoMinWei"},"content":"     *","lastModifiedDate":"2023-09-25"},{"lineNumber":42,"author":{"gitId":"NeoMinWei"},"content":"     * @param toFind The string acting as the keyword to find in the tasks.","lastModifiedDate":"2023-09-25"},{"lineNumber":43,"author":{"gitId":"NeoMinWei"},"content":"     * @return True if there is a match, otherwise false.","lastModifiedDate":"2023-09-25"},{"lineNumber":44,"author":{"gitId":"NeoMinWei"},"content":"     */","lastModifiedDate":"2023-09-25"},{"lineNumber":45,"author":{"gitId":"NeoMinWei"},"content":"    private static boolean isMatch(String toFind) {","lastModifiedDate":"2023-09-25"},{"lineNumber":46,"author":{"gitId":"NeoMinWei"},"content":"        for (Task task : list) {","lastModifiedDate":"2023-09-24"},{"lineNumber":47,"author":{"gitId":"NeoMinWei"},"content":"            if (task.description.contains(toFind) || toFind.contains(task.description)) {","lastModifiedDate":"2023-09-24"},{"lineNumber":48,"author":{"gitId":"NeoMinWei"},"content":"                return true;","lastModifiedDate":"2023-09-25"},{"lineNumber":49,"author":{"gitId":"NeoMinWei"},"content":"            }","lastModifiedDate":"2023-09-24"},{"lineNumber":50,"author":{"gitId":"NeoMinWei"},"content":"        }","lastModifiedDate":"2023-09-24"},{"lineNumber":51,"author":{"gitId":"NeoMinWei"},"content":"        return false;","lastModifiedDate":"2023-09-25"},{"lineNumber":52,"author":{"gitId":"NeoMinWei"},"content":"    }","lastModifiedDate":"2023-09-24"},{"lineNumber":53,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-25"},{"lineNumber":54,"author":{"gitId":"NeoMinWei"},"content":"    /**","lastModifiedDate":"2023-09-25"},{"lineNumber":55,"author":{"gitId":"NeoMinWei"},"content":"     * Finds all matches between the input string and the description of tasks in the list.","lastModifiedDate":"2023-09-25"},{"lineNumber":56,"author":{"gitId":"NeoMinWei"},"content":"     * Prints all possible matches between the input string and tasks. Also prints the","lastModifiedDate":"2023-09-25"},{"lineNumber":57,"author":{"gitId":"NeoMinWei"},"content":"     * exception where the keyword is not given.","lastModifiedDate":"2023-09-25"},{"lineNumber":58,"author":{"gitId":"NeoMinWei"},"content":"     *","lastModifiedDate":"2023-09-25"},{"lineNumber":59,"author":{"gitId":"NeoMinWei"},"content":"     * @param line This is the input string from the user, where the 2nd word is the keyword.","lastModifiedDate":"2023-09-25"},{"lineNumber":60,"author":{"gitId":"NeoMinWei"},"content":"     */","lastModifiedDate":"2023-09-25"},{"lineNumber":61,"author":{"gitId":"NeoMinWei"},"content":"    public static void find(String line) {","lastModifiedDate":"2023-09-24"},{"lineNumber":62,"author":{"gitId":"NeoMinWei"},"content":"        try {","lastModifiedDate":"2023-09-24"},{"lineNumber":63,"author":{"gitId":"NeoMinWei"},"content":"            String[] words \u003d line.split(\" \");","lastModifiedDate":"2023-09-24"},{"lineNumber":64,"author":{"gitId":"NeoMinWei"},"content":"            String toFind \u003d words[1];","lastModifiedDate":"2023-09-24"},{"lineNumber":65,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-24"},{"lineNumber":66,"author":{"gitId":"NeoMinWei"},"content":"            if (isMatch(toFind)) {","lastModifiedDate":"2023-09-25"},{"lineNumber":67,"author":{"gitId":"NeoMinWei"},"content":"                System.out.println(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2023-09-24"},{"lineNumber":68,"author":{"gitId":"NeoMinWei"},"content":"                printMatchingTasks(toFind);","lastModifiedDate":"2023-09-24"},{"lineNumber":69,"author":{"gitId":"NeoMinWei"},"content":"            } else {","lastModifiedDate":"2023-09-25"},{"lineNumber":70,"author":{"gitId":"NeoMinWei"},"content":"                System.out.println(\"There are no matching tasks in your list.\");","lastModifiedDate":"2023-09-25"},{"lineNumber":71,"author":{"gitId":"NeoMinWei"},"content":"            }","lastModifiedDate":"2023-09-24"},{"lineNumber":72,"author":{"gitId":"NeoMinWei"},"content":"        }","lastModifiedDate":"2023-09-24"},{"lineNumber":73,"author":{"gitId":"NeoMinWei"},"content":"        catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-09-24"},{"lineNumber":74,"author":{"gitId":"NeoMinWei"},"content":"            System.out.println(\"OOPS!!! Please give the keyword to find in the list.\");","lastModifiedDate":"2023-09-24"},{"lineNumber":75,"author":{"gitId":"NeoMinWei"},"content":"        }","lastModifiedDate":"2023-09-24"},{"lineNumber":76,"author":{"gitId":"NeoMinWei"},"content":"    }","lastModifiedDate":"2023-09-24"},{"lineNumber":77,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-24"},{"lineNumber":78,"author":{"gitId":"NeoMinWei"},"content":"    private static void printMatchingTasks(String toFind) {","lastModifiedDate":"2023-09-24"},{"lineNumber":79,"author":{"gitId":"NeoMinWei"},"content":"        int listIndex \u003d 1;","lastModifiedDate":"2023-09-24"},{"lineNumber":80,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-24"},{"lineNumber":81,"author":{"gitId":"NeoMinWei"},"content":"        for (Task task : list) {","lastModifiedDate":"2023-09-24"},{"lineNumber":82,"author":{"gitId":"NeoMinWei"},"content":"            if (task.description.contains(toFind) || toFind.contains(task.description)) {","lastModifiedDate":"2023-09-24"},{"lineNumber":83,"author":{"gitId":"NeoMinWei"},"content":"                System.out.print(listIndex + \". \");","lastModifiedDate":"2023-09-24"},{"lineNumber":84,"author":{"gitId":"NeoMinWei"},"content":"                System.out.println(task);","lastModifiedDate":"2023-09-24"},{"lineNumber":85,"author":{"gitId":"NeoMinWei"},"content":"            }","lastModifiedDate":"2023-09-24"},{"lineNumber":86,"author":{"gitId":"NeoMinWei"},"content":"            listIndex++;","lastModifiedDate":"2023-09-24"},{"lineNumber":87,"author":{"gitId":"NeoMinWei"},"content":"        }","lastModifiedDate":"2023-09-24"},{"lineNumber":88,"author":{"gitId":"NeoMinWei"},"content":"    }","lastModifiedDate":"2023-09-24"},{"lineNumber":89,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-23"},{"lineNumber":90,"author":{"gitId":"NeoMinWei"},"content":"    private static void printAddedTask() {","lastModifiedDate":"2023-09-25"},{"lineNumber":91,"author":{"gitId":"NeoMinWei"},"content":"        int listSize \u003d list.size();","lastModifiedDate":"2023-09-23"},{"lineNumber":92,"author":{"gitId":"NeoMinWei"},"content":"        int arrayListIndex \u003d listSize - 1;","lastModifiedDate":"2023-09-23"},{"lineNumber":93,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-23"},{"lineNumber":94,"author":{"gitId":"NeoMinWei"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2023-09-23"},{"lineNumber":95,"author":{"gitId":"NeoMinWei"},"content":"        System.out.println(\"    \" + list.get(arrayListIndex));","lastModifiedDate":"2023-09-23"},{"lineNumber":96,"author":{"gitId":"NeoMinWei"},"content":"        System.out.print(\"Now you have \" + listSize);","lastModifiedDate":"2023-09-23"},{"lineNumber":97,"author":{"gitId":"NeoMinWei"},"content":"        if (listSize \u003d\u003d 1) {","lastModifiedDate":"2023-09-23"},{"lineNumber":98,"author":{"gitId":"NeoMinWei"},"content":"            System.out.println(\" task in the list.\");","lastModifiedDate":"2023-09-23"},{"lineNumber":99,"author":{"gitId":"NeoMinWei"},"content":"        } else {","lastModifiedDate":"2023-09-23"},{"lineNumber":100,"author":{"gitId":"NeoMinWei"},"content":"            System.out.println(\" tasks in the list.\");","lastModifiedDate":"2023-09-23"},{"lineNumber":101,"author":{"gitId":"NeoMinWei"},"content":"        }","lastModifiedDate":"2023-09-23"},{"lineNumber":102,"author":{"gitId":"NeoMinWei"},"content":"    }","lastModifiedDate":"2023-09-23"},{"lineNumber":103,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-23"},{"lineNumber":104,"author":{"gitId":"NeoMinWei"},"content":"    /**","lastModifiedDate":"2023-09-25"},{"lineNumber":105,"author":{"gitId":"NeoMinWei"},"content":"     * Marks the given task specified in the input string from the user. Prints exceptions","lastModifiedDate":"2023-09-25"},{"lineNumber":106,"author":{"gitId":"NeoMinWei"},"content":"     * where task index given is not specified or out of bounds of the task list.","lastModifiedDate":"2023-09-25"},{"lineNumber":107,"author":{"gitId":"NeoMinWei"},"content":"     *","lastModifiedDate":"2023-09-25"},{"lineNumber":108,"author":{"gitId":"NeoMinWei"},"content":"     * @param line This is the input string which contains the task index.","lastModifiedDate":"2023-09-25"},{"lineNumber":109,"author":{"gitId":"NeoMinWei"},"content":"     */","lastModifiedDate":"2023-09-25"},{"lineNumber":110,"author":{"gitId":"NeoMinWei"},"content":"    public static void markTask(String line) {","lastModifiedDate":"2023-09-23"},{"lineNumber":111,"author":{"gitId":"NeoMinWei"},"content":"        try {","lastModifiedDate":"2023-09-23"},{"lineNumber":112,"author":{"gitId":"NeoMinWei"},"content":"            String[] words \u003d line.split(\" \");","lastModifiedDate":"2023-09-23"},{"lineNumber":113,"author":{"gitId":"NeoMinWei"},"content":"            int listIndex \u003d Integer.parseInt(words[1]);","lastModifiedDate":"2023-09-23"},{"lineNumber":114,"author":{"gitId":"NeoMinWei"},"content":"            int arrayListIndex \u003d listIndex - 1;","lastModifiedDate":"2023-09-23"},{"lineNumber":115,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-23"},{"lineNumber":116,"author":{"gitId":"NeoMinWei"},"content":"            Task toMark \u003d list.get(arrayListIndex);","lastModifiedDate":"2023-09-23"},{"lineNumber":117,"author":{"gitId":"NeoMinWei"},"content":"            toMark.setDone(true);","lastModifiedDate":"2023-09-23"},{"lineNumber":118,"author":{"gitId":"NeoMinWei"},"content":"            list.set(arrayListIndex, toMark);","lastModifiedDate":"2023-09-23"},{"lineNumber":119,"author":{"gitId":"NeoMinWei"},"content":"            System.out.println(\"Nice! I\u0027ve marked this task as done: \");","lastModifiedDate":"2023-09-23"},{"lineNumber":120,"author":{"gitId":"NeoMinWei"},"content":"            System.out.println(\"    \" + list.get(arrayListIndex));","lastModifiedDate":"2023-09-23"},{"lineNumber":121,"author":{"gitId":"NeoMinWei"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-09-23"},{"lineNumber":122,"author":{"gitId":"NeoMinWei"},"content":"            System.out.println(\"OOPS!!! Please give the index of which task to mark.\");","lastModifiedDate":"2023-09-23"},{"lineNumber":123,"author":{"gitId":"NeoMinWei"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-09-23"},{"lineNumber":124,"author":{"gitId":"NeoMinWei"},"content":"            System.out.println(\"OOPS!!! Please make sure the index given is within the current list.\");","lastModifiedDate":"2023-09-23"},{"lineNumber":125,"author":{"gitId":"NeoMinWei"},"content":"        }","lastModifiedDate":"2023-09-23"},{"lineNumber":126,"author":{"gitId":"NeoMinWei"},"content":"    }","lastModifiedDate":"2023-09-23"},{"lineNumber":127,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-23"},{"lineNumber":128,"author":{"gitId":"NeoMinWei"},"content":"    /**","lastModifiedDate":"2023-09-25"},{"lineNumber":129,"author":{"gitId":"NeoMinWei"},"content":"     * Unmarks the given task specified in the input string from the user. Prints exceptions","lastModifiedDate":"2023-09-25"},{"lineNumber":130,"author":{"gitId":"NeoMinWei"},"content":"     * where task index given is not specified or out of bounds of the task list.","lastModifiedDate":"2023-09-25"},{"lineNumber":131,"author":{"gitId":"NeoMinWei"},"content":"     *","lastModifiedDate":"2023-09-25"},{"lineNumber":132,"author":{"gitId":"NeoMinWei"},"content":"     * @param line This is the input string which contains the task index.","lastModifiedDate":"2023-09-25"},{"lineNumber":133,"author":{"gitId":"NeoMinWei"},"content":"     */","lastModifiedDate":"2023-09-25"},{"lineNumber":134,"author":{"gitId":"NeoMinWei"},"content":"    public static void unmarkTask(String line) {","lastModifiedDate":"2023-09-23"},{"lineNumber":135,"author":{"gitId":"NeoMinWei"},"content":"        try {","lastModifiedDate":"2023-09-23"},{"lineNumber":136,"author":{"gitId":"NeoMinWei"},"content":"            String[] words \u003d line.split(\" \");","lastModifiedDate":"2023-09-23"},{"lineNumber":137,"author":{"gitId":"NeoMinWei"},"content":"            int listIndex \u003d Integer.parseInt(words[1]);","lastModifiedDate":"2023-09-23"},{"lineNumber":138,"author":{"gitId":"NeoMinWei"},"content":"            int arrayListIndex \u003d listIndex - 1;","lastModifiedDate":"2023-09-23"},{"lineNumber":139,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-23"},{"lineNumber":140,"author":{"gitId":"NeoMinWei"},"content":"            Task toUnmark \u003d list.get(arrayListIndex);","lastModifiedDate":"2023-09-23"},{"lineNumber":141,"author":{"gitId":"NeoMinWei"},"content":"            toUnmark.setDone(false);","lastModifiedDate":"2023-09-23"},{"lineNumber":142,"author":{"gitId":"NeoMinWei"},"content":"            list.set(arrayListIndex, toUnmark);","lastModifiedDate":"2023-09-23"},{"lineNumber":143,"author":{"gitId":"NeoMinWei"},"content":"            System.out.println(\"OK, I\u0027ve marked this task as not done yet: \");","lastModifiedDate":"2023-09-23"},{"lineNumber":144,"author":{"gitId":"NeoMinWei"},"content":"            System.out.println(\"    \" + list.get(arrayListIndex));","lastModifiedDate":"2023-09-23"},{"lineNumber":145,"author":{"gitId":"NeoMinWei"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-09-23"},{"lineNumber":146,"author":{"gitId":"NeoMinWei"},"content":"            System.out.println(\"OOPS!!! Please give the index of which task to unmark.\");","lastModifiedDate":"2023-09-23"},{"lineNumber":147,"author":{"gitId":"NeoMinWei"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-09-23"},{"lineNumber":148,"author":{"gitId":"NeoMinWei"},"content":"            System.out.println(\"OOPS!!! Please make sure the index given is within the current list.\");","lastModifiedDate":"2023-09-23"},{"lineNumber":149,"author":{"gitId":"NeoMinWei"},"content":"        }","lastModifiedDate":"2023-09-23"},{"lineNumber":150,"author":{"gitId":"NeoMinWei"},"content":"    }","lastModifiedDate":"2023-09-23"},{"lineNumber":151,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-23"},{"lineNumber":152,"author":{"gitId":"NeoMinWei"},"content":"    /**","lastModifiedDate":"2023-09-25"},{"lineNumber":153,"author":{"gitId":"NeoMinWei"},"content":"     * Deletes the given task specified in the input string from the user. Prints exceptions","lastModifiedDate":"2023-09-25"},{"lineNumber":154,"author":{"gitId":"NeoMinWei"},"content":"     * where task index given is not specified or out of bounds of the task list.","lastModifiedDate":"2023-09-25"},{"lineNumber":155,"author":{"gitId":"NeoMinWei"},"content":"     *","lastModifiedDate":"2023-09-25"},{"lineNumber":156,"author":{"gitId":"NeoMinWei"},"content":"     * @param line This is the input string which contains the task index.","lastModifiedDate":"2023-09-25"},{"lineNumber":157,"author":{"gitId":"NeoMinWei"},"content":"     */","lastModifiedDate":"2023-09-25"},{"lineNumber":158,"author":{"gitId":"NeoMinWei"},"content":"    public static void deleteTask(String line) {","lastModifiedDate":"2023-09-23"},{"lineNumber":159,"author":{"gitId":"NeoMinWei"},"content":"        try {","lastModifiedDate":"2023-09-23"},{"lineNumber":160,"author":{"gitId":"NeoMinWei"},"content":"            String[] words \u003d line.split(\" \");","lastModifiedDate":"2023-09-23"},{"lineNumber":161,"author":{"gitId":"NeoMinWei"},"content":"            int listIndex \u003d Integer.parseInt(words[1]);","lastModifiedDate":"2023-09-23"},{"lineNumber":162,"author":{"gitId":"NeoMinWei"},"content":"            int arrayListIndex \u003d listIndex - 1;","lastModifiedDate":"2023-09-23"},{"lineNumber":163,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-23"},{"lineNumber":164,"author":{"gitId":"NeoMinWei"},"content":"            Task toRemove \u003d list.get(arrayListIndex);","lastModifiedDate":"2023-09-23"},{"lineNumber":165,"author":{"gitId":"NeoMinWei"},"content":"            list.remove(arrayListIndex);","lastModifiedDate":"2023-09-23"},{"lineNumber":166,"author":{"gitId":"NeoMinWei"},"content":"            int listSize \u003d list.size();","lastModifiedDate":"2023-09-23"},{"lineNumber":167,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-23"},{"lineNumber":168,"author":{"gitId":"NeoMinWei"},"content":"            System.out.println(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2023-09-23"},{"lineNumber":169,"author":{"gitId":"NeoMinWei"},"content":"            System.out.println(\"    \" + toRemove);","lastModifiedDate":"2023-09-23"},{"lineNumber":170,"author":{"gitId":"NeoMinWei"},"content":"            System.out.print(\"Now you have \");","lastModifiedDate":"2023-09-23"},{"lineNumber":171,"author":{"gitId":"NeoMinWei"},"content":"            if (listSize \u003d\u003d 1) {","lastModifiedDate":"2023-09-23"},{"lineNumber":172,"author":{"gitId":"NeoMinWei"},"content":"                System.out.println(listSize + \" task in the list.\");","lastModifiedDate":"2023-09-23"},{"lineNumber":173,"author":{"gitId":"NeoMinWei"},"content":"            } else {","lastModifiedDate":"2023-09-23"},{"lineNumber":174,"author":{"gitId":"NeoMinWei"},"content":"                System.out.println(listSize + \" tasks in the list.\");","lastModifiedDate":"2023-09-23"},{"lineNumber":175,"author":{"gitId":"NeoMinWei"},"content":"            }","lastModifiedDate":"2023-09-23"},{"lineNumber":176,"author":{"gitId":"NeoMinWei"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-09-23"},{"lineNumber":177,"author":{"gitId":"NeoMinWei"},"content":"            System.out.println(\"OOPS!!! Please give the index of which task to delete.\");","lastModifiedDate":"2023-09-23"},{"lineNumber":178,"author":{"gitId":"NeoMinWei"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-09-23"},{"lineNumber":179,"author":{"gitId":"NeoMinWei"},"content":"            System.out.println(\"OOPS!!! Please make sure the index given is within the current list.\");","lastModifiedDate":"2023-09-23"},{"lineNumber":180,"author":{"gitId":"NeoMinWei"},"content":"        }","lastModifiedDate":"2023-09-23"},{"lineNumber":181,"author":{"gitId":"NeoMinWei"},"content":"    }","lastModifiedDate":"2023-09-23"},{"lineNumber":182,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-23"},{"lineNumber":183,"author":{"gitId":"NeoMinWei"},"content":"    /**","lastModifiedDate":"2023-09-25"},{"lineNumber":184,"author":{"gitId":"NeoMinWei"},"content":"     * Adds task of type Event to the list. Prints exceptions where there are formatting issues,","lastModifiedDate":"2023-09-25"},{"lineNumber":185,"author":{"gitId":"NeoMinWei"},"content":"     * empty descriptions or incompatible date and time formats.","lastModifiedDate":"2023-09-25"},{"lineNumber":186,"author":{"gitId":"NeoMinWei"},"content":"     *","lastModifiedDate":"2023-09-25"},{"lineNumber":187,"author":{"gitId":"NeoMinWei"},"content":"     * @param line This is the string containing the description of event and its","lastModifiedDate":"2023-09-25"},{"lineNumber":188,"author":{"gitId":"NeoMinWei"},"content":"     *             /from and /to dates.","lastModifiedDate":"2023-09-25"},{"lineNumber":189,"author":{"gitId":"NeoMinWei"},"content":"     */","lastModifiedDate":"2023-09-25"},{"lineNumber":190,"author":{"gitId":"NeoMinWei"},"content":"    public static void handleEvent(String line) {","lastModifiedDate":"2023-09-23"},{"lineNumber":191,"author":{"gitId":"NeoMinWei"},"content":"        try {","lastModifiedDate":"2023-09-23"},{"lineNumber":192,"author":{"gitId":"NeoMinWei"},"content":"            addEvent(line);","lastModifiedDate":"2023-09-23"},{"lineNumber":193,"author":{"gitId":"NeoMinWei"},"content":"        } catch (NeoTaskException e) {","lastModifiedDate":"2023-09-24"},{"lineNumber":194,"author":{"gitId":"NeoMinWei"},"content":"            e.printException();","lastModifiedDate":"2023-09-24"},{"lineNumber":195,"author":{"gitId":"NeoMinWei"},"content":"        } catch (NeoTimeException e) {","lastModifiedDate":"2023-09-24"},{"lineNumber":196,"author":{"gitId":"NeoMinWei"},"content":"            e.printException();","lastModifiedDate":"2023-09-23"},{"lineNumber":197,"author":{"gitId":"NeoMinWei"},"content":"        }","lastModifiedDate":"2023-09-23"},{"lineNumber":198,"author":{"gitId":"NeoMinWei"},"content":"    }","lastModifiedDate":"2023-09-23"},{"lineNumber":199,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-23"},{"lineNumber":200,"author":{"gitId":"NeoMinWei"},"content":"    private static void addEvent(String line) throws NeoTaskException, NeoTimeException {","lastModifiedDate":"2023-09-24"},{"lineNumber":201,"author":{"gitId":"NeoMinWei"},"content":"        ErrorCatcher.catchFormatError(CommandType.EVENT, line);","lastModifiedDate":"2023-09-24"},{"lineNumber":202,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-23"},{"lineNumber":203,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-23"},{"lineNumber":204,"author":{"gitId":"NeoMinWei"},"content":"        int fromIndex \u003d line.indexOf(\"/from\");","lastModifiedDate":"2023-09-23"},{"lineNumber":205,"author":{"gitId":"NeoMinWei"},"content":"        int toIndex \u003d line.indexOf(\"/to\");","lastModifiedDate":"2023-09-23"},{"lineNumber":206,"author":{"gitId":"NeoMinWei"},"content":"        int fromStringLength \u003d 5;","lastModifiedDate":"2023-09-23"},{"lineNumber":207,"author":{"gitId":"NeoMinWei"},"content":"        int toStringLength \u003d 3;","lastModifiedDate":"2023-09-23"},{"lineNumber":208,"author":{"gitId":"NeoMinWei"},"content":"        int eventStringLength \u003d 5;","lastModifiedDate":"2023-09-23"},{"lineNumber":209,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-23"},{"lineNumber":210,"author":{"gitId":"NeoMinWei"},"content":"        String description \u003d line.substring(eventStringLength, fromIndex).trim();","lastModifiedDate":"2023-09-23"},{"lineNumber":211,"author":{"gitId":"NeoMinWei"},"content":"        String from \u003d line.substring(fromIndex + fromStringLength, toIndex).trim();","lastModifiedDate":"2023-09-23"},{"lineNumber":212,"author":{"gitId":"NeoMinWei"},"content":"        String to \u003d line.substring(toIndex + toStringLength).trim();","lastModifiedDate":"2023-09-23"},{"lineNumber":213,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-23"},{"lineNumber":214,"author":{"gitId":"NeoMinWei"},"content":"        ErrorCatcher.catchEmptyDescription(\"description\", description);","lastModifiedDate":"2023-09-24"},{"lineNumber":215,"author":{"gitId":"NeoMinWei"},"content":"        ErrorCatcher.catchEmptyDescription(\"/from\", from);","lastModifiedDate":"2023-09-24"},{"lineNumber":216,"author":{"gitId":"NeoMinWei"},"content":"        ErrorCatcher.catchEmptyDescription(\"/to\", to);","lastModifiedDate":"2023-09-24"},{"lineNumber":217,"author":{"gitId":"NeoMinWei"},"content":"        ErrorCatcher.catchTimeFormatError(from);","lastModifiedDate":"2023-09-24"},{"lineNumber":218,"author":{"gitId":"NeoMinWei"},"content":"        ErrorCatcher.catchTimeFormatError(to);","lastModifiedDate":"2023-09-24"},{"lineNumber":219,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-24"},{"lineNumber":220,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-23"},{"lineNumber":221,"author":{"gitId":"NeoMinWei"},"content":"        Event toAdd \u003d new Event(description, from, to);","lastModifiedDate":"2023-09-23"},{"lineNumber":222,"author":{"gitId":"NeoMinWei"},"content":"        list.add(toAdd);","lastModifiedDate":"2023-09-23"},{"lineNumber":223,"author":{"gitId":"NeoMinWei"},"content":"        printAddedTask();","lastModifiedDate":"2023-09-23"},{"lineNumber":224,"author":{"gitId":"NeoMinWei"},"content":"    }","lastModifiedDate":"2023-09-23"},{"lineNumber":225,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-23"},{"lineNumber":226,"author":{"gitId":"NeoMinWei"},"content":"    /**","lastModifiedDate":"2023-09-25"},{"lineNumber":227,"author":{"gitId":"NeoMinWei"},"content":"     * Adds a task of type Deadline to the list. Prints exceptions where there are formatting issues,","lastModifiedDate":"2023-09-25"},{"lineNumber":228,"author":{"gitId":"NeoMinWei"},"content":"     * empty descriptions or incompatible date and time formats.","lastModifiedDate":"2023-09-25"},{"lineNumber":229,"author":{"gitId":"NeoMinWei"},"content":"     *","lastModifiedDate":"2023-09-25"},{"lineNumber":230,"author":{"gitId":"NeoMinWei"},"content":"     * @param line This is the string containing the description of deadline and its","lastModifiedDate":"2023-09-25"},{"lineNumber":231,"author":{"gitId":"NeoMinWei"},"content":"     *             /by date.","lastModifiedDate":"2023-09-25"},{"lineNumber":232,"author":{"gitId":"NeoMinWei"},"content":"     */","lastModifiedDate":"2023-09-25"},{"lineNumber":233,"author":{"gitId":"NeoMinWei"},"content":"    public static void handleDeadline(String line) {","lastModifiedDate":"2023-09-23"},{"lineNumber":234,"author":{"gitId":"NeoMinWei"},"content":"        try {","lastModifiedDate":"2023-09-23"},{"lineNumber":235,"author":{"gitId":"NeoMinWei"},"content":"            addDeadline(line);","lastModifiedDate":"2023-09-23"},{"lineNumber":236,"author":{"gitId":"NeoMinWei"},"content":"        } catch (NeoTaskException e) {","lastModifiedDate":"2023-09-24"},{"lineNumber":237,"author":{"gitId":"NeoMinWei"},"content":"            e.printException();","lastModifiedDate":"2023-09-24"},{"lineNumber":238,"author":{"gitId":"NeoMinWei"},"content":"        } catch (NeoTimeException e) {","lastModifiedDate":"2023-09-24"},{"lineNumber":239,"author":{"gitId":"NeoMinWei"},"content":"            e.printException();","lastModifiedDate":"2023-09-23"},{"lineNumber":240,"author":{"gitId":"NeoMinWei"},"content":"        }","lastModifiedDate":"2023-09-23"},{"lineNumber":241,"author":{"gitId":"NeoMinWei"},"content":"    }","lastModifiedDate":"2023-09-23"},{"lineNumber":242,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-23"},{"lineNumber":243,"author":{"gitId":"NeoMinWei"},"content":"    private static void addDeadline(String line) throws NeoTaskException, NeoTimeException {","lastModifiedDate":"2023-09-24"},{"lineNumber":244,"author":{"gitId":"NeoMinWei"},"content":"        ErrorCatcher.catchFormatError(CommandType.DEADLINE, line);","lastModifiedDate":"2023-09-24"},{"lineNumber":245,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-23"},{"lineNumber":246,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-23"},{"lineNumber":247,"author":{"gitId":"NeoMinWei"},"content":"        int byIndex \u003d line.indexOf(\"/by\");","lastModifiedDate":"2023-09-23"},{"lineNumber":248,"author":{"gitId":"NeoMinWei"},"content":"        int byStringLength \u003d 3;","lastModifiedDate":"2023-09-23"},{"lineNumber":249,"author":{"gitId":"NeoMinWei"},"content":"        int deadlineStringLength \u003d 8;","lastModifiedDate":"2023-09-23"},{"lineNumber":250,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-23"},{"lineNumber":251,"author":{"gitId":"NeoMinWei"},"content":"        String description \u003d line.substring(deadlineStringLength, byIndex).trim();","lastModifiedDate":"2023-09-23"},{"lineNumber":252,"author":{"gitId":"NeoMinWei"},"content":"        String by \u003d line.substring(byIndex + byStringLength).trim();","lastModifiedDate":"2023-09-23"},{"lineNumber":253,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-23"},{"lineNumber":254,"author":{"gitId":"NeoMinWei"},"content":"        ErrorCatcher.catchEmptyDescription(\"description\", description);","lastModifiedDate":"2023-09-24"},{"lineNumber":255,"author":{"gitId":"NeoMinWei"},"content":"        ErrorCatcher.catchEmptyDescription(\"/by\", by);","lastModifiedDate":"2023-09-24"},{"lineNumber":256,"author":{"gitId":"NeoMinWei"},"content":"        ErrorCatcher.catchTimeFormatError(by);","lastModifiedDate":"2023-09-24"},{"lineNumber":257,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-23"},{"lineNumber":258,"author":{"gitId":"NeoMinWei"},"content":"        Deadline toAdd \u003d new Deadline(description, by);","lastModifiedDate":"2023-09-23"},{"lineNumber":259,"author":{"gitId":"NeoMinWei"},"content":"        list.add(toAdd);","lastModifiedDate":"2023-09-23"},{"lineNumber":260,"author":{"gitId":"NeoMinWei"},"content":"        printAddedTask();","lastModifiedDate":"2023-09-23"},{"lineNumber":261,"author":{"gitId":"NeoMinWei"},"content":"    }","lastModifiedDate":"2023-09-23"},{"lineNumber":262,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-23"},{"lineNumber":263,"author":{"gitId":"NeoMinWei"},"content":"    /**","lastModifiedDate":"2023-09-25"},{"lineNumber":264,"author":{"gitId":"NeoMinWei"},"content":"     * Adds a task of type Todo to the list.","lastModifiedDate":"2023-09-25"},{"lineNumber":265,"author":{"gitId":"NeoMinWei"},"content":"     *","lastModifiedDate":"2023-09-25"},{"lineNumber":266,"author":{"gitId":"NeoMinWei"},"content":"     * @param line This is the string containing the description of the todo task.","lastModifiedDate":"2023-09-25"},{"lineNumber":267,"author":{"gitId":"NeoMinWei"},"content":"     */","lastModifiedDate":"2023-09-25"},{"lineNumber":268,"author":{"gitId":"NeoMinWei"},"content":"    public static void handleTodo(String line) {","lastModifiedDate":"2023-09-23"},{"lineNumber":269,"author":{"gitId":"NeoMinWei"},"content":"        try {","lastModifiedDate":"2023-09-23"},{"lineNumber":270,"author":{"gitId":"NeoMinWei"},"content":"            addTodo(line);","lastModifiedDate":"2023-09-23"},{"lineNumber":271,"author":{"gitId":"NeoMinWei"},"content":"        } catch (NeoTaskException e) {","lastModifiedDate":"2023-09-24"},{"lineNumber":272,"author":{"gitId":"NeoMinWei"},"content":"            e.printException();","lastModifiedDate":"2023-09-23"},{"lineNumber":273,"author":{"gitId":"NeoMinWei"},"content":"        }","lastModifiedDate":"2023-09-23"},{"lineNumber":274,"author":{"gitId":"NeoMinWei"},"content":"    }","lastModifiedDate":"2023-09-23"},{"lineNumber":275,"author":{"gitId":"NeoMinWei"},"content":"    private static void addTodo(String line) throws NeoTaskException {","lastModifiedDate":"2023-09-24"},{"lineNumber":276,"author":{"gitId":"NeoMinWei"},"content":"        ErrorCatcher.catchFormatError(CommandType.TODO, line);","lastModifiedDate":"2023-09-24"},{"lineNumber":277,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-23"},{"lineNumber":278,"author":{"gitId":"NeoMinWei"},"content":"        int todoStringLength \u003d 4;","lastModifiedDate":"2023-09-23"},{"lineNumber":279,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-23"},{"lineNumber":280,"author":{"gitId":"NeoMinWei"},"content":"        String description \u003d line.substring(todoStringLength).trim();","lastModifiedDate":"2023-09-23"},{"lineNumber":281,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-23"},{"lineNumber":282,"author":{"gitId":"NeoMinWei"},"content":"        ErrorCatcher.catchEmptyDescription(\"description\", description);","lastModifiedDate":"2023-09-24"},{"lineNumber":283,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-23"},{"lineNumber":284,"author":{"gitId":"NeoMinWei"},"content":"        Todo toAdd \u003d new Todo(description);","lastModifiedDate":"2023-09-23"},{"lineNumber":285,"author":{"gitId":"NeoMinWei"},"content":"        list.add(toAdd);","lastModifiedDate":"2023-09-23"},{"lineNumber":286,"author":{"gitId":"NeoMinWei"},"content":"        printAddedTask();","lastModifiedDate":"2023-09-23"},{"lineNumber":287,"author":{"gitId":"NeoMinWei"},"content":"    }","lastModifiedDate":"2023-09-23"},{"lineNumber":288,"author":{"gitId":"NeoMinWei"},"content":"}","lastModifiedDate":"2023-09-23"}],"authorContributionMap":{"NeoMinWei":288}},{"path":"src/main/java/neo/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NeoMinWei"},"content":"package neo.task;","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":3,"author":{"gitId":"NeoMinWei"},"content":"/**","lastModifiedDate":"2023-09-25"},{"lineNumber":4,"author":{"gitId":"NeoMinWei"},"content":" * Represents a form of task of type todo.","lastModifiedDate":"2023-09-25"},{"lineNumber":5,"author":{"gitId":"NeoMinWei"},"content":" */","lastModifiedDate":"2023-09-25"},{"lineNumber":6,"author":{"gitId":"NeoMinWei"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"NeoMinWei"},"content":"    /**","lastModifiedDate":"2023-09-25"},{"lineNumber":8,"author":{"gitId":"NeoMinWei"},"content":"     * Constructs a task with a string to describe the task.","lastModifiedDate":"2023-09-25"},{"lineNumber":9,"author":{"gitId":"NeoMinWei"},"content":"     *","lastModifiedDate":"2023-09-25"},{"lineNumber":10,"author":{"gitId":"NeoMinWei"},"content":"     * @param description This is the description of the task.","lastModifiedDate":"2023-09-25"},{"lineNumber":11,"author":{"gitId":"NeoMinWei"},"content":"     */","lastModifiedDate":"2023-09-25"},{"lineNumber":12,"author":{"gitId":"NeoMinWei"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"NeoMinWei"},"content":"        super(description);","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"NeoMinWei"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-25"},{"lineNumber":16,"author":{"gitId":"NeoMinWei"},"content":"    /**","lastModifiedDate":"2023-09-25"},{"lineNumber":17,"author":{"gitId":"NeoMinWei"},"content":"     * Returns the todo in a format for saving into a .txt file.","lastModifiedDate":"2023-09-25"},{"lineNumber":18,"author":{"gitId":"NeoMinWei"},"content":"     *","lastModifiedDate":"2023-09-25"},{"lineNumber":19,"author":{"gitId":"NeoMinWei"},"content":"     * @return The formatted deadline.","lastModifiedDate":"2023-09-25"},{"lineNumber":20,"author":{"gitId":"NeoMinWei"},"content":"     */","lastModifiedDate":"2023-09-25"},{"lineNumber":21,"author":{"gitId":"NeoMinWei"},"content":"    @Override","lastModifiedDate":"2023-09-16"},{"lineNumber":22,"author":{"gitId":"NeoMinWei"},"content":"    public String formatTask() {","lastModifiedDate":"2023-09-16"},{"lineNumber":23,"author":{"gitId":"NeoMinWei"},"content":"        return \"T / \" + super.formatTask();","lastModifiedDate":"2023-09-16"},{"lineNumber":24,"author":{"gitId":"NeoMinWei"},"content":"    }","lastModifiedDate":"2023-09-16"},{"lineNumber":25,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-25"},{"lineNumber":26,"author":{"gitId":"NeoMinWei"},"content":"    /**","lastModifiedDate":"2023-09-25"},{"lineNumber":27,"author":{"gitId":"NeoMinWei"},"content":"     * Returns the todo in an easy-to-read format to the user.","lastModifiedDate":"2023-09-25"},{"lineNumber":28,"author":{"gitId":"NeoMinWei"},"content":"     *","lastModifiedDate":"2023-09-25"},{"lineNumber":29,"author":{"gitId":"NeoMinWei"},"content":"     * @return The formatted deadline.","lastModifiedDate":"2023-09-25"},{"lineNumber":30,"author":{"gitId":"NeoMinWei"},"content":"     */","lastModifiedDate":"2023-09-25"},{"lineNumber":31,"author":{"gitId":"NeoMinWei"},"content":"    @Override","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"NeoMinWei"},"content":"    public String toString() {","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"NeoMinWei"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"NeoMinWei"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"NeoMinWei"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"NeoMinWei":35}},{"path":"src/main/java/neo/type/CommandType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NeoMinWei"},"content":"package neo.type;","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":3,"author":{"gitId":"NeoMinWei"},"content":"public enum CommandType {","lastModifiedDate":"2023-09-09"},{"lineNumber":4,"author":{"gitId":"NeoMinWei"},"content":"    EVENT, DEADLINE, TODO","lastModifiedDate":"2023-09-09"},{"lineNumber":5,"author":{"gitId":"NeoMinWei"},"content":"}","lastModifiedDate":"2023-09-09"}],"authorContributionMap":{"NeoMinWei":5}},{"path":"src/main/java/neo/type/ErrorType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NeoMinWei"},"content":"package neo.type;","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":3,"author":{"gitId":"NeoMinWei"},"content":"public enum ErrorType {","lastModifiedDate":"2023-09-09"},{"lineNumber":4,"author":{"gitId":"NeoMinWei"},"content":"    EMPTY, FORMAT, MISUSE","lastModifiedDate":"2023-09-09"},{"lineNumber":5,"author":{"gitId":"NeoMinWei"},"content":"}","lastModifiedDate":"2023-09-09"},{"lineNumber":6,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-09"}],"authorContributionMap":{"NeoMinWei":6}},{"path":"src/main/java/neo/type/TimeErrorType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NeoMinWei"},"content":"package neo.type;","lastModifiedDate":"2023-09-24"},{"lineNumber":2,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-24"},{"lineNumber":3,"author":{"gitId":"NeoMinWei"},"content":"public enum TimeErrorType {","lastModifiedDate":"2023-09-24"},{"lineNumber":4,"author":{"gitId":"NeoMinWei"},"content":"    VALUE, FORMAT","lastModifiedDate":"2023-09-24"},{"lineNumber":5,"author":{"gitId":"NeoMinWei"},"content":"}","lastModifiedDate":"2023-09-24"}],"authorContributionMap":{"NeoMinWei":5}},{"path":"src/main/java/neo/type/TimeType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NeoMinWei"},"content":"package neo.type;","lastModifiedDate":"2023-09-24"},{"lineNumber":2,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-24"},{"lineNumber":3,"author":{"gitId":"NeoMinWei"},"content":"public enum TimeType {","lastModifiedDate":"2023-09-24"},{"lineNumber":4,"author":{"gitId":"NeoMinWei"},"content":"    DATE, DATE_AND_TIME","lastModifiedDate":"2023-09-24"},{"lineNumber":5,"author":{"gitId":"NeoMinWei"},"content":"}","lastModifiedDate":"2023-09-24"}],"authorContributionMap":{"NeoMinWei":5}},{"path":"src/main/java/neo/type/TimeValueType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NeoMinWei"},"content":"package neo.type;","lastModifiedDate":"2023-09-24"},{"lineNumber":2,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-24"},{"lineNumber":3,"author":{"gitId":"NeoMinWei"},"content":"public enum TimeValueType {","lastModifiedDate":"2023-09-24"},{"lineNumber":4,"author":{"gitId":"NeoMinWei"},"content":"    DAY, MONTH, HOUR, MINUTE","lastModifiedDate":"2023-09-24"},{"lineNumber":5,"author":{"gitId":"NeoMinWei"},"content":"}","lastModifiedDate":"2023-09-24"}],"authorContributionMap":{"NeoMinWei":5}},{"path":"src/main/java/neo/util/ErrorCatcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NeoMinWei"},"content":"package neo.util;","lastModifiedDate":"2023-09-24"},{"lineNumber":2,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-24"},{"lineNumber":3,"author":{"gitId":"NeoMinWei"},"content":"import neo.exception.NeoTaskException;","lastModifiedDate":"2023-09-24"},{"lineNumber":4,"author":{"gitId":"NeoMinWei"},"content":"import neo.exception.NeoTimeException;","lastModifiedDate":"2023-09-24"},{"lineNumber":5,"author":{"gitId":"NeoMinWei"},"content":"import neo.type.CommandType;","lastModifiedDate":"2023-09-24"},{"lineNumber":6,"author":{"gitId":"NeoMinWei"},"content":"import neo.type.ErrorType;","lastModifiedDate":"2023-09-24"},{"lineNumber":7,"author":{"gitId":"NeoMinWei"},"content":"import neo.type.TimeErrorType;","lastModifiedDate":"2023-09-24"},{"lineNumber":8,"author":{"gitId":"NeoMinWei"},"content":"import neo.type.TimeType;","lastModifiedDate":"2023-09-24"},{"lineNumber":9,"author":{"gitId":"NeoMinWei"},"content":"import neo.type.TimeValueType;","lastModifiedDate":"2023-09-24"},{"lineNumber":10,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-24"},{"lineNumber":11,"author":{"gitId":"NeoMinWei"},"content":"/**","lastModifiedDate":"2023-09-25"},{"lineNumber":12,"author":{"gitId":"NeoMinWei"},"content":" * Represents the methods related to catching input errors. This class is abstract as its","lastModifiedDate":"2023-09-25"},{"lineNumber":13,"author":{"gitId":"NeoMinWei"},"content":" * main purpose is to provide methods to catch errors.","lastModifiedDate":"2023-09-25"},{"lineNumber":14,"author":{"gitId":"NeoMinWei"},"content":" */","lastModifiedDate":"2023-09-25"},{"lineNumber":15,"author":{"gitId":"NeoMinWei"},"content":"public abstract class ErrorCatcher {","lastModifiedDate":"2023-09-24"},{"lineNumber":16,"author":{"gitId":"NeoMinWei"},"content":"    /**","lastModifiedDate":"2023-09-25"},{"lineNumber":17,"author":{"gitId":"NeoMinWei"},"content":"     * Catches errors when user inputs the wrong format while trying to add tasks to the list.","lastModifiedDate":"2023-09-25"},{"lineNumber":18,"author":{"gitId":"NeoMinWei"},"content":"     *","lastModifiedDate":"2023-09-25"},{"lineNumber":19,"author":{"gitId":"NeoMinWei"},"content":"     * @param type This is the type of task that the user intends to add.","lastModifiedDate":"2023-09-25"},{"lineNumber":20,"author":{"gitId":"NeoMinWei"},"content":"     * @param line This is the user input line.","lastModifiedDate":"2023-09-25"},{"lineNumber":21,"author":{"gitId":"NeoMinWei"},"content":"     * @throws NeoTaskException If wrong format is detected.","lastModifiedDate":"2023-09-25"},{"lineNumber":22,"author":{"gitId":"NeoMinWei"},"content":"     */","lastModifiedDate":"2023-09-25"},{"lineNumber":23,"author":{"gitId":"NeoMinWei"},"content":"    public static void catchFormatError(CommandType type, String line) throws NeoTaskException {","lastModifiedDate":"2023-09-24"},{"lineNumber":24,"author":{"gitId":"NeoMinWei"},"content":"        switch (type) {","lastModifiedDate":"2023-09-24"},{"lineNumber":25,"author":{"gitId":"NeoMinWei"},"content":"        case TODO:","lastModifiedDate":"2023-09-24"},{"lineNumber":26,"author":{"gitId":"NeoMinWei"},"content":"            if (line.contains(\"/from\") || (line.contains(\"/to\"))) {","lastModifiedDate":"2023-09-24"},{"lineNumber":27,"author":{"gitId":"NeoMinWei"},"content":"                throw new NeoTaskException(\"/from\", ErrorType.MISUSE);","lastModifiedDate":"2023-09-24"},{"lineNumber":28,"author":{"gitId":"NeoMinWei"},"content":"            }","lastModifiedDate":"2023-09-24"},{"lineNumber":29,"author":{"gitId":"NeoMinWei"},"content":"            if (line.contains(\"/by\")) {","lastModifiedDate":"2023-09-24"},{"lineNumber":30,"author":{"gitId":"NeoMinWei"},"content":"                throw new NeoTaskException(\"/by\", ErrorType.MISUSE);","lastModifiedDate":"2023-09-24"},{"lineNumber":31,"author":{"gitId":"NeoMinWei"},"content":"            }","lastModifiedDate":"2023-09-24"},{"lineNumber":32,"author":{"gitId":"NeoMinWei"},"content":"            break;","lastModifiedDate":"2023-09-24"},{"lineNumber":33,"author":{"gitId":"NeoMinWei"},"content":"        case DEADLINE:","lastModifiedDate":"2023-09-24"},{"lineNumber":34,"author":{"gitId":"NeoMinWei"},"content":"            if (line.contains(\"/from\") || (line.contains(\"/to\"))) {","lastModifiedDate":"2023-09-24"},{"lineNumber":35,"author":{"gitId":"NeoMinWei"},"content":"                throw new NeoTaskException(\"/from\", ErrorType.MISUSE);","lastModifiedDate":"2023-09-24"},{"lineNumber":36,"author":{"gitId":"NeoMinWei"},"content":"            }","lastModifiedDate":"2023-09-24"},{"lineNumber":37,"author":{"gitId":"NeoMinWei"},"content":"            if (!line.contains(\"/by\")) {","lastModifiedDate":"2023-09-24"},{"lineNumber":38,"author":{"gitId":"NeoMinWei"},"content":"                throw new NeoTaskException(\"/by\", ErrorType.FORMAT);","lastModifiedDate":"2023-09-24"},{"lineNumber":39,"author":{"gitId":"NeoMinWei"},"content":"            }","lastModifiedDate":"2023-09-24"},{"lineNumber":40,"author":{"gitId":"NeoMinWei"},"content":"            break;","lastModifiedDate":"2023-09-24"},{"lineNumber":41,"author":{"gitId":"NeoMinWei"},"content":"        case EVENT:","lastModifiedDate":"2023-09-24"},{"lineNumber":42,"author":{"gitId":"NeoMinWei"},"content":"            if (line.contains(\"/by\")) {","lastModifiedDate":"2023-09-24"},{"lineNumber":43,"author":{"gitId":"NeoMinWei"},"content":"                throw new NeoTaskException(\"/by\", ErrorType.MISUSE);","lastModifiedDate":"2023-09-24"},{"lineNumber":44,"author":{"gitId":"NeoMinWei"},"content":"            }","lastModifiedDate":"2023-09-24"},{"lineNumber":45,"author":{"gitId":"NeoMinWei"},"content":"            if (!line.contains(\"/from\")) {","lastModifiedDate":"2023-09-24"},{"lineNumber":46,"author":{"gitId":"NeoMinWei"},"content":"                throw new NeoTaskException(\"/from\", ErrorType.FORMAT);","lastModifiedDate":"2023-09-24"},{"lineNumber":47,"author":{"gitId":"NeoMinWei"},"content":"            }","lastModifiedDate":"2023-09-24"},{"lineNumber":48,"author":{"gitId":"NeoMinWei"},"content":"            if (!line.contains(\"/to\")) {","lastModifiedDate":"2023-09-24"},{"lineNumber":49,"author":{"gitId":"NeoMinWei"},"content":"                throw new NeoTaskException(\"/to\", ErrorType.FORMAT);","lastModifiedDate":"2023-09-24"},{"lineNumber":50,"author":{"gitId":"NeoMinWei"},"content":"            }","lastModifiedDate":"2023-09-24"},{"lineNumber":51,"author":{"gitId":"NeoMinWei"},"content":"            break;","lastModifiedDate":"2023-09-24"},{"lineNumber":52,"author":{"gitId":"NeoMinWei"},"content":"        default:","lastModifiedDate":"2023-09-25"},{"lineNumber":53,"author":{"gitId":"NeoMinWei"},"content":"            System.out.println(\"Unable to catch format error.\");","lastModifiedDate":"2023-09-25"},{"lineNumber":54,"author":{"gitId":"NeoMinWei"},"content":"        }","lastModifiedDate":"2023-09-24"},{"lineNumber":55,"author":{"gitId":"NeoMinWei"},"content":"    }","lastModifiedDate":"2023-09-24"},{"lineNumber":56,"author":{"gitId":"NeoMinWei"},"content":"    private static void catchDateAndTimeError(String line) throws NeoTimeException {","lastModifiedDate":"2023-09-24"},{"lineNumber":57,"author":{"gitId":"NeoMinWei"},"content":"        String[] dateTime \u003d line.split(\" \");","lastModifiedDate":"2023-09-24"},{"lineNumber":58,"author":{"gitId":"NeoMinWei"},"content":"        if (!line.matches(\"(.*)/(.*)/(.*)\") || dateTime[1].length() !\u003d 4) {","lastModifiedDate":"2023-09-24"},{"lineNumber":59,"author":{"gitId":"NeoMinWei"},"content":"            throw new NeoTimeException(TimeType.DATE_AND_TIME, TimeValueType.DAY, TimeErrorType.FORMAT);","lastModifiedDate":"2023-09-24"},{"lineNumber":60,"author":{"gitId":"NeoMinWei"},"content":"        }","lastModifiedDate":"2023-09-24"},{"lineNumber":61,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-24"},{"lineNumber":62,"author":{"gitId":"NeoMinWei"},"content":"        catchDateError(dateTime[0]);","lastModifiedDate":"2023-09-24"},{"lineNumber":63,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-24"},{"lineNumber":64,"author":{"gitId":"NeoMinWei"},"content":"        int hourStartIndex \u003d 0;","lastModifiedDate":"2023-09-24"},{"lineNumber":65,"author":{"gitId":"NeoMinWei"},"content":"        int minuteStartIndex \u003d 2;","lastModifiedDate":"2023-09-24"},{"lineNumber":66,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-24"},{"lineNumber":67,"author":{"gitId":"NeoMinWei"},"content":"        String stringHour \u003d dateTime[1].substring(hourStartIndex, minuteStartIndex);","lastModifiedDate":"2023-09-24"},{"lineNumber":68,"author":{"gitId":"NeoMinWei"},"content":"        String stringMinute \u003d dateTime[1].substring(minuteStartIndex);","lastModifiedDate":"2023-09-24"},{"lineNumber":69,"author":{"gitId":"NeoMinWei"},"content":"        int hour;","lastModifiedDate":"2023-09-24"},{"lineNumber":70,"author":{"gitId":"NeoMinWei"},"content":"        int minute;","lastModifiedDate":"2023-09-24"},{"lineNumber":71,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-24"},{"lineNumber":72,"author":{"gitId":"NeoMinWei"},"content":"        try {","lastModifiedDate":"2023-09-24"},{"lineNumber":73,"author":{"gitId":"NeoMinWei"},"content":"            hour \u003d Integer.parseInt(stringHour);","lastModifiedDate":"2023-09-24"},{"lineNumber":74,"author":{"gitId":"NeoMinWei"},"content":"            minute \u003d Integer.parseInt(stringMinute);","lastModifiedDate":"2023-09-24"},{"lineNumber":75,"author":{"gitId":"NeoMinWei"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-09-24"},{"lineNumber":76,"author":{"gitId":"NeoMinWei"},"content":"            throw new NeoTimeException(TimeType.DATE_AND_TIME, TimeValueType.HOUR, TimeErrorType.FORMAT);","lastModifiedDate":"2023-09-24"},{"lineNumber":77,"author":{"gitId":"NeoMinWei"},"content":"        }","lastModifiedDate":"2023-09-24"},{"lineNumber":78,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-24"},{"lineNumber":79,"author":{"gitId":"NeoMinWei"},"content":"        if (hour \u003e 23) {","lastModifiedDate":"2023-09-24"},{"lineNumber":80,"author":{"gitId":"NeoMinWei"},"content":"            throw new NeoTimeException(TimeType.DATE_AND_TIME, TimeValueType.HOUR, TimeErrorType.VALUE);","lastModifiedDate":"2023-09-24"},{"lineNumber":81,"author":{"gitId":"NeoMinWei"},"content":"        } else if (minute \u003e 59) {","lastModifiedDate":"2023-09-24"},{"lineNumber":82,"author":{"gitId":"NeoMinWei"},"content":"            throw new NeoTimeException(TimeType.DATE_AND_TIME, TimeValueType.MINUTE, TimeErrorType.VALUE);","lastModifiedDate":"2023-09-24"},{"lineNumber":83,"author":{"gitId":"NeoMinWei"},"content":"        }","lastModifiedDate":"2023-09-24"},{"lineNumber":84,"author":{"gitId":"NeoMinWei"},"content":"    }","lastModifiedDate":"2023-09-24"},{"lineNumber":85,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-24"},{"lineNumber":86,"author":{"gitId":"NeoMinWei"},"content":"    private static void catchDateError(String line) throws NeoTimeException {","lastModifiedDate":"2023-09-24"},{"lineNumber":87,"author":{"gitId":"NeoMinWei"},"content":"        String[] date \u003d line.split(\"/\");","lastModifiedDate":"2023-09-24"},{"lineNumber":88,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-24"},{"lineNumber":89,"author":{"gitId":"NeoMinWei"},"content":"        if (!line.matches(\"(.*)/(.*)/(.*)\")) {","lastModifiedDate":"2023-09-24"},{"lineNumber":90,"author":{"gitId":"NeoMinWei"},"content":"            throw new NeoTimeException(TimeType.DATE, TimeValueType.HOUR, TimeErrorType.FORMAT);","lastModifiedDate":"2023-09-24"},{"lineNumber":91,"author":{"gitId":"NeoMinWei"},"content":"        }","lastModifiedDate":"2023-09-24"},{"lineNumber":92,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-24"},{"lineNumber":93,"author":{"gitId":"NeoMinWei"},"content":"        String stringDay \u003d date[0];","lastModifiedDate":"2023-09-24"},{"lineNumber":94,"author":{"gitId":"NeoMinWei"},"content":"        String stringMonth \u003d date[1];","lastModifiedDate":"2023-09-24"},{"lineNumber":95,"author":{"gitId":"NeoMinWei"},"content":"        String year \u003d date[2];","lastModifiedDate":"2023-09-24"},{"lineNumber":96,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-24"},{"lineNumber":97,"author":{"gitId":"NeoMinWei"},"content":"        if (stringDay.length() !\u003d 2 || stringMonth.length() !\u003d 2 || year.length() !\u003d 4) {","lastModifiedDate":"2023-09-24"},{"lineNumber":98,"author":{"gitId":"NeoMinWei"},"content":"            throw new NeoTimeException(TimeType.DATE, TimeValueType.MINUTE, TimeErrorType.FORMAT);","lastModifiedDate":"2023-09-24"},{"lineNumber":99,"author":{"gitId":"NeoMinWei"},"content":"        }","lastModifiedDate":"2023-09-24"},{"lineNumber":100,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-24"},{"lineNumber":101,"author":{"gitId":"NeoMinWei"},"content":"        int day;","lastModifiedDate":"2023-09-24"},{"lineNumber":102,"author":{"gitId":"NeoMinWei"},"content":"        int month;","lastModifiedDate":"2023-09-24"},{"lineNumber":103,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-24"},{"lineNumber":104,"author":{"gitId":"NeoMinWei"},"content":"        try {","lastModifiedDate":"2023-09-24"},{"lineNumber":105,"author":{"gitId":"NeoMinWei"},"content":"            day \u003d Integer.parseInt(stringDay);","lastModifiedDate":"2023-09-24"},{"lineNumber":106,"author":{"gitId":"NeoMinWei"},"content":"            month \u003d Integer.parseInt(stringMonth);","lastModifiedDate":"2023-09-24"},{"lineNumber":107,"author":{"gitId":"NeoMinWei"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-09-24"},{"lineNumber":108,"author":{"gitId":"NeoMinWei"},"content":"            throw new NeoTimeException(TimeType.DATE, TimeValueType.HOUR, TimeErrorType.FORMAT);","lastModifiedDate":"2023-09-24"},{"lineNumber":109,"author":{"gitId":"NeoMinWei"},"content":"        }","lastModifiedDate":"2023-09-24"},{"lineNumber":110,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-24"},{"lineNumber":111,"author":{"gitId":"NeoMinWei"},"content":"        if (day \u003e 31) {","lastModifiedDate":"2023-09-24"},{"lineNumber":112,"author":{"gitId":"NeoMinWei"},"content":"            throw new NeoTimeException(TimeType.DATE, TimeValueType.DAY, TimeErrorType.VALUE);","lastModifiedDate":"2023-09-24"},{"lineNumber":113,"author":{"gitId":"NeoMinWei"},"content":"        } else if (month \u003e 12) {","lastModifiedDate":"2023-09-24"},{"lineNumber":114,"author":{"gitId":"NeoMinWei"},"content":"            throw new NeoTimeException(TimeType.DATE, TimeValueType.MONTH, TimeErrorType.VALUE);","lastModifiedDate":"2023-09-24"},{"lineNumber":115,"author":{"gitId":"NeoMinWei"},"content":"        }","lastModifiedDate":"2023-09-24"},{"lineNumber":116,"author":{"gitId":"NeoMinWei"},"content":"    }","lastModifiedDate":"2023-09-24"},{"lineNumber":117,"author":{"gitId":"NeoMinWei"},"content":"    private static boolean hasTime(String line) {","lastModifiedDate":"2023-09-24"},{"lineNumber":118,"author":{"gitId":"NeoMinWei"},"content":"        String[] dateAndTime \u003d line.split(\" \");","lastModifiedDate":"2023-09-24"},{"lineNumber":119,"author":{"gitId":"NeoMinWei"},"content":"        return dateAndTime.length \u003d\u003d 2;","lastModifiedDate":"2023-09-24"},{"lineNumber":120,"author":{"gitId":"NeoMinWei"},"content":"    }","lastModifiedDate":"2023-09-24"},{"lineNumber":121,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-25"},{"lineNumber":122,"author":{"gitId":"NeoMinWei"},"content":"    /**","lastModifiedDate":"2023-09-25"},{"lineNumber":123,"author":{"gitId":"NeoMinWei"},"content":"     * Catches errors when user inputs the date or date and time in a wrong format.","lastModifiedDate":"2023-09-25"},{"lineNumber":124,"author":{"gitId":"NeoMinWei"},"content":"     *","lastModifiedDate":"2023-09-25"},{"lineNumber":125,"author":{"gitId":"NeoMinWei"},"content":"     * @param line This is the string representing the date or date and time.","lastModifiedDate":"2023-09-25"},{"lineNumber":126,"author":{"gitId":"NeoMinWei"},"content":"     * @throws NeoTimeException If errors are detected in the format of the date or date and time.","lastModifiedDate":"2023-09-25"},{"lineNumber":127,"author":{"gitId":"NeoMinWei"},"content":"     */","lastModifiedDate":"2023-09-25"},{"lineNumber":128,"author":{"gitId":"NeoMinWei"},"content":"    public static void catchTimeFormatError(String line) throws NeoTimeException {","lastModifiedDate":"2023-09-24"},{"lineNumber":129,"author":{"gitId":"NeoMinWei"},"content":"        if (hasTime(line)) {","lastModifiedDate":"2023-09-24"},{"lineNumber":130,"author":{"gitId":"NeoMinWei"},"content":"            catchDateAndTimeError(line);","lastModifiedDate":"2023-09-24"},{"lineNumber":131,"author":{"gitId":"NeoMinWei"},"content":"        } else {","lastModifiedDate":"2023-09-24"},{"lineNumber":132,"author":{"gitId":"NeoMinWei"},"content":"            catchDateError(line);","lastModifiedDate":"2023-09-24"},{"lineNumber":133,"author":{"gitId":"NeoMinWei"},"content":"        }","lastModifiedDate":"2023-09-24"},{"lineNumber":134,"author":{"gitId":"NeoMinWei"},"content":"    }","lastModifiedDate":"2023-09-24"},{"lineNumber":135,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-24"},{"lineNumber":136,"author":{"gitId":"NeoMinWei"},"content":"    /**","lastModifiedDate":"2023-09-25"},{"lineNumber":137,"author":{"gitId":"NeoMinWei"},"content":"     * Catches errors when the description of task or its dates are empty.","lastModifiedDate":"2023-09-25"},{"lineNumber":138,"author":{"gitId":"NeoMinWei"},"content":"     *","lastModifiedDate":"2023-09-25"},{"lineNumber":139,"author":{"gitId":"NeoMinWei"},"content":"     * @param field This is the part of the task. E.g.: /by, /from, /to","lastModifiedDate":"2023-09-25"},{"lineNumber":140,"author":{"gitId":"NeoMinWei"},"content":"     * @param description This is the description of the task.","lastModifiedDate":"2023-09-25"},{"lineNumber":141,"author":{"gitId":"NeoMinWei"},"content":"     * @throws NeoTaskException If empty fields are detected.","lastModifiedDate":"2023-09-25"},{"lineNumber":142,"author":{"gitId":"NeoMinWei"},"content":"     */","lastModifiedDate":"2023-09-25"},{"lineNumber":143,"author":{"gitId":"NeoMinWei"},"content":"    public static void catchEmptyDescription(String field, String description) throws NeoTaskException {","lastModifiedDate":"2023-09-24"},{"lineNumber":144,"author":{"gitId":"NeoMinWei"},"content":"        if (description.isBlank()) {","lastModifiedDate":"2023-09-24"},{"lineNumber":145,"author":{"gitId":"NeoMinWei"},"content":"            throw new NeoTaskException(field, ErrorType.EMPTY);","lastModifiedDate":"2023-09-24"},{"lineNumber":146,"author":{"gitId":"NeoMinWei"},"content":"        }","lastModifiedDate":"2023-09-24"},{"lineNumber":147,"author":{"gitId":"NeoMinWei"},"content":"    }","lastModifiedDate":"2023-09-24"},{"lineNumber":148,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-24"},{"lineNumber":149,"author":{"gitId":"NeoMinWei"},"content":"}","lastModifiedDate":"2023-09-24"}],"authorContributionMap":{"NeoMinWei":149}},{"path":"src/main/java/neo/util/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NeoMinWei"},"content":"package neo.util;","lastModifiedDate":"2023-09-23"},{"lineNumber":2,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-23"},{"lineNumber":3,"author":{"gitId":"NeoMinWei"},"content":"import neo.task.Task;","lastModifiedDate":"2023-09-23"},{"lineNumber":4,"author":{"gitId":"NeoMinWei"},"content":"import neo.task.TaskList;","lastModifiedDate":"2023-09-23"},{"lineNumber":5,"author":{"gitId":"NeoMinWei"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-23"},{"lineNumber":6,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-23"},{"lineNumber":7,"author":{"gitId":"NeoMinWei"},"content":"/**","lastModifiedDate":"2023-09-25"},{"lineNumber":8,"author":{"gitId":"NeoMinWei"},"content":" * Deals with making sense of the user command. This class is abstract as","lastModifiedDate":"2023-09-25"},{"lineNumber":9,"author":{"gitId":"NeoMinWei"},"content":" * its main purpose is to provide methods relating to making sense of the user command.","lastModifiedDate":"2023-09-25"},{"lineNumber":10,"author":{"gitId":"NeoMinWei"},"content":" */","lastModifiedDate":"2023-09-25"},{"lineNumber":11,"author":{"gitId":"NeoMinWei"},"content":"public abstract class Parser {","lastModifiedDate":"2023-09-23"},{"lineNumber":12,"author":{"gitId":"NeoMinWei"},"content":"    /**","lastModifiedDate":"2023-09-25"},{"lineNumber":13,"author":{"gitId":"NeoMinWei"},"content":"     * Calls relevant methods depending on the input from user. Write any changes in list","lastModifiedDate":"2023-09-25"},{"lineNumber":14,"author":{"gitId":"NeoMinWei"},"content":"     * to data.txt file.","lastModifiedDate":"2023-09-25"},{"lineNumber":15,"author":{"gitId":"NeoMinWei"},"content":"     *","lastModifiedDate":"2023-09-25"},{"lineNumber":16,"author":{"gitId":"NeoMinWei"},"content":"     * @param input This is the input from user in CLI.","lastModifiedDate":"2023-09-25"},{"lineNumber":17,"author":{"gitId":"NeoMinWei"},"content":"     * @param list This is the list containing all tasks.","lastModifiedDate":"2023-09-25"},{"lineNumber":18,"author":{"gitId":"NeoMinWei"},"content":"     */","lastModifiedDate":"2023-09-25"},{"lineNumber":19,"author":{"gitId":"NeoMinWei"},"content":"    public static void handleInput(String input, ArrayList\u003cTask\u003e list) {","lastModifiedDate":"2023-09-23"},{"lineNumber":20,"author":{"gitId":"NeoMinWei"},"content":"        while (!input.equals(\"bye\")) {","lastModifiedDate":"2023-09-23"},{"lineNumber":21,"author":{"gitId":"NeoMinWei"},"content":"            if (input.equals(\"list\")) {","lastModifiedDate":"2023-09-23"},{"lineNumber":22,"author":{"gitId":"NeoMinWei"},"content":"                TaskList.printList();","lastModifiedDate":"2023-09-23"},{"lineNumber":23,"author":{"gitId":"NeoMinWei"},"content":"            } else if (input.startsWith(\"find\")) {","lastModifiedDate":"2023-09-24"},{"lineNumber":24,"author":{"gitId":"NeoMinWei"},"content":"                TaskList.find(input);","lastModifiedDate":"2023-09-24"},{"lineNumber":25,"author":{"gitId":"NeoMinWei"},"content":"            } else if (input.startsWith(\"mark\")) {","lastModifiedDate":"2023-09-23"},{"lineNumber":26,"author":{"gitId":"NeoMinWei"},"content":"                TaskList.markTask(input);","lastModifiedDate":"2023-09-23"},{"lineNumber":27,"author":{"gitId":"NeoMinWei"},"content":"            } else if (input.startsWith(\"unmark\")) {","lastModifiedDate":"2023-09-23"},{"lineNumber":28,"author":{"gitId":"NeoMinWei"},"content":"                TaskList.unmarkTask(input);","lastModifiedDate":"2023-09-23"},{"lineNumber":29,"author":{"gitId":"NeoMinWei"},"content":"            } else if (input.startsWith(\"delete\")) {","lastModifiedDate":"2023-09-23"},{"lineNumber":30,"author":{"gitId":"NeoMinWei"},"content":"                TaskList.deleteTask(input);","lastModifiedDate":"2023-09-23"},{"lineNumber":31,"author":{"gitId":"NeoMinWei"},"content":"            } else if (input.startsWith(\"event\")) {","lastModifiedDate":"2023-09-23"},{"lineNumber":32,"author":{"gitId":"NeoMinWei"},"content":"                TaskList.handleEvent(input);","lastModifiedDate":"2023-09-23"},{"lineNumber":33,"author":{"gitId":"NeoMinWei"},"content":"            } else if (input.startsWith(\"deadline\")) {","lastModifiedDate":"2023-09-23"},{"lineNumber":34,"author":{"gitId":"NeoMinWei"},"content":"                TaskList.handleDeadline(input);","lastModifiedDate":"2023-09-23"},{"lineNumber":35,"author":{"gitId":"NeoMinWei"},"content":"            } else if (input.startsWith(\"todo\")){","lastModifiedDate":"2023-09-23"},{"lineNumber":36,"author":{"gitId":"NeoMinWei"},"content":"                TaskList.handleTodo(input);","lastModifiedDate":"2023-09-23"},{"lineNumber":37,"author":{"gitId":"NeoMinWei"},"content":"            } else {","lastModifiedDate":"2023-09-23"},{"lineNumber":38,"author":{"gitId":"NeoMinWei"},"content":"                System.out.println(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-09-23"},{"lineNumber":39,"author":{"gitId":"NeoMinWei"},"content":"            }","lastModifiedDate":"2023-09-23"},{"lineNumber":40,"author":{"gitId":"NeoMinWei"},"content":"            Storage.updateFile(list);","lastModifiedDate":"2023-09-23"},{"lineNumber":41,"author":{"gitId":"NeoMinWei"},"content":"            input \u003d Ui.readInput();","lastModifiedDate":"2023-09-23"},{"lineNumber":42,"author":{"gitId":"NeoMinWei"},"content":"        }","lastModifiedDate":"2023-09-23"},{"lineNumber":43,"author":{"gitId":"NeoMinWei"},"content":"    }","lastModifiedDate":"2023-09-23"},{"lineNumber":44,"author":{"gitId":"NeoMinWei"},"content":"}","lastModifiedDate":"2023-09-23"}],"authorContributionMap":{"NeoMinWei":44}},{"path":"src/main/java/neo/util/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NeoMinWei"},"content":"package neo.util;","lastModifiedDate":"2023-09-23"},{"lineNumber":2,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-23"},{"lineNumber":3,"author":{"gitId":"NeoMinWei"},"content":"import neo.task.Deadline;","lastModifiedDate":"2023-09-23"},{"lineNumber":4,"author":{"gitId":"NeoMinWei"},"content":"import neo.task.Event;","lastModifiedDate":"2023-09-23"},{"lineNumber":5,"author":{"gitId":"NeoMinWei"},"content":"import neo.task.Task;","lastModifiedDate":"2023-09-23"},{"lineNumber":6,"author":{"gitId":"NeoMinWei"},"content":"import neo.task.Todo;","lastModifiedDate":"2023-09-23"},{"lineNumber":7,"author":{"gitId":"NeoMinWei"},"content":"import java.io.File;","lastModifiedDate":"2023-09-23"},{"lineNumber":8,"author":{"gitId":"NeoMinWei"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-09-23"},{"lineNumber":9,"author":{"gitId":"NeoMinWei"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-23"},{"lineNumber":10,"author":{"gitId":"NeoMinWei"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-23"},{"lineNumber":11,"author":{"gitId":"NeoMinWei"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-09-23"},{"lineNumber":12,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-23"},{"lineNumber":13,"author":{"gitId":"NeoMinWei"},"content":"/**","lastModifiedDate":"2023-09-25"},{"lineNumber":14,"author":{"gitId":"NeoMinWei"},"content":" * Represents the methods relating to writing and reading from data.txt file.","lastModifiedDate":"2023-09-25"},{"lineNumber":15,"author":{"gitId":"NeoMinWei"},"content":" */","lastModifiedDate":"2023-09-25"},{"lineNumber":16,"author":{"gitId":"NeoMinWei"},"content":"public abstract class Storage {","lastModifiedDate":"2023-09-23"},{"lineNumber":17,"author":{"gitId":"NeoMinWei"},"content":"    private final static String filePath \u003d \"data/data.txt\";","lastModifiedDate":"2023-09-23"},{"lineNumber":18,"author":{"gitId":"NeoMinWei"},"content":"    private final static String fileDirectory \u003d \"data\";","lastModifiedDate":"2023-09-23"},{"lineNumber":19,"author":{"gitId":"NeoMinWei"},"content":"    private static boolean checkMarked(int mark) {","lastModifiedDate":"2023-09-23"},{"lineNumber":20,"author":{"gitId":"NeoMinWei"},"content":"        return (mark \u003d\u003d 1);","lastModifiedDate":"2023-09-23"},{"lineNumber":21,"author":{"gitId":"NeoMinWei"},"content":"    }","lastModifiedDate":"2023-09-23"},{"lineNumber":22,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-23"},{"lineNumber":23,"author":{"gitId":"NeoMinWei"},"content":"    /**","lastModifiedDate":"2023-09-25"},{"lineNumber":24,"author":{"gitId":"NeoMinWei"},"content":"     * Finds and read data.txt file in data/data.txt path relative to working directory.","lastModifiedDate":"2023-09-25"},{"lineNumber":25,"author":{"gitId":"NeoMinWei"},"content":"     * If data.txt and its parent folder does not exist, it will create those files.","lastModifiedDate":"2023-09-25"},{"lineNumber":26,"author":{"gitId":"NeoMinWei"},"content":"     * Content of data.txt are used to fill up the task list.","lastModifiedDate":"2023-09-25"},{"lineNumber":27,"author":{"gitId":"NeoMinWei"},"content":"     *","lastModifiedDate":"2023-09-25"},{"lineNumber":28,"author":{"gitId":"NeoMinWei"},"content":"     * @param list This is the list of tasks to be filled up according to the content","lastModifiedDate":"2023-09-25"},{"lineNumber":29,"author":{"gitId":"NeoMinWei"},"content":"     *             of existing data.txt file.","lastModifiedDate":"2023-09-25"},{"lineNumber":30,"author":{"gitId":"NeoMinWei"},"content":"     */","lastModifiedDate":"2023-09-25"},{"lineNumber":31,"author":{"gitId":"NeoMinWei"},"content":"    public static void findFile(ArrayList\u003cTask\u003e list) {","lastModifiedDate":"2023-09-23"},{"lineNumber":32,"author":{"gitId":"NeoMinWei"},"content":"        try {","lastModifiedDate":"2023-09-23"},{"lineNumber":33,"author":{"gitId":"NeoMinWei"},"content":"            generateFile(list);","lastModifiedDate":"2023-09-23"},{"lineNumber":34,"author":{"gitId":"NeoMinWei"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-23"},{"lineNumber":35,"author":{"gitId":"NeoMinWei"},"content":"            System.out.println(\"Error with data.txt file\");","lastModifiedDate":"2023-09-23"},{"lineNumber":36,"author":{"gitId":"NeoMinWei"},"content":"        }","lastModifiedDate":"2023-09-23"},{"lineNumber":37,"author":{"gitId":"NeoMinWei"},"content":"    }","lastModifiedDate":"2023-09-23"},{"lineNumber":38,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-23"},{"lineNumber":39,"author":{"gitId":"NeoMinWei"},"content":"    private static void generateFile(ArrayList\u003cTask\u003e list) throws IOException {","lastModifiedDate":"2023-09-23"},{"lineNumber":40,"author":{"gitId":"NeoMinWei"},"content":"        File directory \u003d new File(fileDirectory);","lastModifiedDate":"2023-09-23"},{"lineNumber":41,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-23"},{"lineNumber":42,"author":{"gitId":"NeoMinWei"},"content":"        if (directory.mkdir()) {","lastModifiedDate":"2023-09-23"},{"lineNumber":43,"author":{"gitId":"NeoMinWei"},"content":"            System.out.println(\"Creating new data folder...\");","lastModifiedDate":"2023-09-23"},{"lineNumber":44,"author":{"gitId":"NeoMinWei"},"content":"        }","lastModifiedDate":"2023-09-23"},{"lineNumber":45,"author":{"gitId":"NeoMinWei"},"content":"        File f \u003d new File(filePath);","lastModifiedDate":"2023-09-23"},{"lineNumber":46,"author":{"gitId":"NeoMinWei"},"content":"        if (f.createNewFile()) {","lastModifiedDate":"2023-09-23"},{"lineNumber":47,"author":{"gitId":"NeoMinWei"},"content":"            System.out.println(\"Creating new data.txt file...\");","lastModifiedDate":"2023-09-23"},{"lineNumber":48,"author":{"gitId":"NeoMinWei"},"content":"        }","lastModifiedDate":"2023-09-23"},{"lineNumber":49,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-23"},{"lineNumber":50,"author":{"gitId":"NeoMinWei"},"content":"        Scanner s \u003d new Scanner(f);","lastModifiedDate":"2023-09-23"},{"lineNumber":51,"author":{"gitId":"NeoMinWei"},"content":"        readFile(list, s);","lastModifiedDate":"2023-09-23"},{"lineNumber":52,"author":{"gitId":"NeoMinWei"},"content":"    }","lastModifiedDate":"2023-09-23"},{"lineNumber":53,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-23"},{"lineNumber":54,"author":{"gitId":"NeoMinWei"},"content":"    private static void readFile(ArrayList\u003cTask\u003e list, Scanner s) {","lastModifiedDate":"2023-09-23"},{"lineNumber":55,"author":{"gitId":"NeoMinWei"},"content":"        while (s.hasNext()) {","lastModifiedDate":"2023-09-23"},{"lineNumber":56,"author":{"gitId":"NeoMinWei"},"content":"            String line \u003d s.nextLine();","lastModifiedDate":"2023-09-23"},{"lineNumber":57,"author":{"gitId":"NeoMinWei"},"content":"            String[] task \u003d line.split(\" / \");","lastModifiedDate":"2023-09-23"},{"lineNumber":58,"author":{"gitId":"NeoMinWei"},"content":"            String taskType \u003d task[0];","lastModifiedDate":"2023-09-23"},{"lineNumber":59,"author":{"gitId":"NeoMinWei"},"content":"            int mark \u003d Integer.parseInt(task[1]);","lastModifiedDate":"2023-09-23"},{"lineNumber":60,"author":{"gitId":"NeoMinWei"},"content":"            boolean isMarked \u003d checkMarked(mark);","lastModifiedDate":"2023-09-23"},{"lineNumber":61,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-23"},{"lineNumber":62,"author":{"gitId":"NeoMinWei"},"content":"            switch (taskType) {","lastModifiedDate":"2023-09-23"},{"lineNumber":63,"author":{"gitId":"NeoMinWei"},"content":"            case \"T\":","lastModifiedDate":"2023-09-23"},{"lineNumber":64,"author":{"gitId":"NeoMinWei"},"content":"                Todo todo \u003d new Todo(task[2]);","lastModifiedDate":"2023-09-23"},{"lineNumber":65,"author":{"gitId":"NeoMinWei"},"content":"                todo.setDone(isMarked);","lastModifiedDate":"2023-09-23"},{"lineNumber":66,"author":{"gitId":"NeoMinWei"},"content":"                list.add(todo);","lastModifiedDate":"2023-09-23"},{"lineNumber":67,"author":{"gitId":"NeoMinWei"},"content":"                break;","lastModifiedDate":"2023-09-23"},{"lineNumber":68,"author":{"gitId":"NeoMinWei"},"content":"            case \"D\":","lastModifiedDate":"2023-09-23"},{"lineNumber":69,"author":{"gitId":"NeoMinWei"},"content":"                Deadline deadline \u003d new Deadline(task[2], task[3]);","lastModifiedDate":"2023-09-23"},{"lineNumber":70,"author":{"gitId":"NeoMinWei"},"content":"                deadline.setDone(isMarked);","lastModifiedDate":"2023-09-23"},{"lineNumber":71,"author":{"gitId":"NeoMinWei"},"content":"                list.add(deadline);","lastModifiedDate":"2023-09-23"},{"lineNumber":72,"author":{"gitId":"NeoMinWei"},"content":"                break;","lastModifiedDate":"2023-09-23"},{"lineNumber":73,"author":{"gitId":"NeoMinWei"},"content":"            case \"E\":","lastModifiedDate":"2023-09-23"},{"lineNumber":74,"author":{"gitId":"NeoMinWei"},"content":"                Event event \u003d new Event(task[2], task[3], task[4]);","lastModifiedDate":"2023-09-23"},{"lineNumber":75,"author":{"gitId":"NeoMinWei"},"content":"                event.setDone(isMarked);","lastModifiedDate":"2023-09-23"},{"lineNumber":76,"author":{"gitId":"NeoMinWei"},"content":"                list.add(event);","lastModifiedDate":"2023-09-23"},{"lineNumber":77,"author":{"gitId":"NeoMinWei"},"content":"                break;","lastModifiedDate":"2023-09-23"},{"lineNumber":78,"author":{"gitId":"NeoMinWei"},"content":"            default:","lastModifiedDate":"2023-09-24"},{"lineNumber":79,"author":{"gitId":"NeoMinWei"},"content":"                System.out.println(\"Unable to add task from data.txt\");","lastModifiedDate":"2023-09-24"},{"lineNumber":80,"author":{"gitId":"NeoMinWei"},"content":"                break;","lastModifiedDate":"2023-09-24"},{"lineNumber":81,"author":{"gitId":"NeoMinWei"},"content":"            }","lastModifiedDate":"2023-09-23"},{"lineNumber":82,"author":{"gitId":"NeoMinWei"},"content":"        }","lastModifiedDate":"2023-09-23"},{"lineNumber":83,"author":{"gitId":"NeoMinWei"},"content":"    }","lastModifiedDate":"2023-09-23"},{"lineNumber":84,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-25"},{"lineNumber":85,"author":{"gitId":"NeoMinWei"},"content":"    /**","lastModifiedDate":"2023-09-25"},{"lineNumber":86,"author":{"gitId":"NeoMinWei"},"content":"     * Writes to data.txt file.","lastModifiedDate":"2023-09-25"},{"lineNumber":87,"author":{"gitId":"NeoMinWei"},"content":"     *","lastModifiedDate":"2023-09-25"},{"lineNumber":88,"author":{"gitId":"NeoMinWei"},"content":"     * @param list This is the list of tasks to be written into the file.","lastModifiedDate":"2023-09-25"},{"lineNumber":89,"author":{"gitId":"NeoMinWei"},"content":"     */","lastModifiedDate":"2023-09-25"},{"lineNumber":90,"author":{"gitId":"NeoMinWei"},"content":"    public static void updateFile(ArrayList\u003cTask\u003e list) {","lastModifiedDate":"2023-09-23"},{"lineNumber":91,"author":{"gitId":"NeoMinWei"},"content":"        try {","lastModifiedDate":"2023-09-23"},{"lineNumber":92,"author":{"gitId":"NeoMinWei"},"content":"            writeToFile(list);","lastModifiedDate":"2023-09-23"},{"lineNumber":93,"author":{"gitId":"NeoMinWei"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-23"},{"lineNumber":94,"author":{"gitId":"NeoMinWei"},"content":"            System.out.println(\"Error with data.txt file.\");","lastModifiedDate":"2023-09-23"},{"lineNumber":95,"author":{"gitId":"NeoMinWei"},"content":"        }","lastModifiedDate":"2023-09-23"},{"lineNumber":96,"author":{"gitId":"NeoMinWei"},"content":"    }","lastModifiedDate":"2023-09-23"},{"lineNumber":97,"author":{"gitId":"NeoMinWei"},"content":"    private static void writeToFile(ArrayList\u003cTask\u003e list) throws IOException {","lastModifiedDate":"2023-09-23"},{"lineNumber":98,"author":{"gitId":"NeoMinWei"},"content":"        FileWriter fw \u003d new FileWriter(filePath);","lastModifiedDate":"2023-09-23"},{"lineNumber":99,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-23"},{"lineNumber":100,"author":{"gitId":"NeoMinWei"},"content":"        for (Task task : list) {","lastModifiedDate":"2023-09-23"},{"lineNumber":101,"author":{"gitId":"NeoMinWei"},"content":"            String formatTask \u003d task.formatTask();","lastModifiedDate":"2023-09-23"},{"lineNumber":102,"author":{"gitId":"NeoMinWei"},"content":"            fw.write(formatTask + System.lineSeparator());","lastModifiedDate":"2023-09-23"},{"lineNumber":103,"author":{"gitId":"NeoMinWei"},"content":"        }","lastModifiedDate":"2023-09-23"},{"lineNumber":104,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-23"},{"lineNumber":105,"author":{"gitId":"NeoMinWei"},"content":"        fw.close();","lastModifiedDate":"2023-09-23"},{"lineNumber":106,"author":{"gitId":"NeoMinWei"},"content":"    }","lastModifiedDate":"2023-09-23"},{"lineNumber":107,"author":{"gitId":"NeoMinWei"},"content":"}","lastModifiedDate":"2023-09-23"}],"authorContributionMap":{"NeoMinWei":107}},{"path":"src/main/java/neo/util/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NeoMinWei"},"content":"package neo.util;","lastModifiedDate":"2023-09-23"},{"lineNumber":2,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-23"},{"lineNumber":3,"author":{"gitId":"NeoMinWei"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-09-23"},{"lineNumber":4,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-23"},{"lineNumber":5,"author":{"gitId":"NeoMinWei"},"content":"/**","lastModifiedDate":"2023-09-25"},{"lineNumber":6,"author":{"gitId":"NeoMinWei"},"content":" * Represents the methods to interact with the user. This class is abstract as its","lastModifiedDate":"2023-09-25"},{"lineNumber":7,"author":{"gitId":"NeoMinWei"},"content":" * main purpose is to provide methods relating to interaction with the user.","lastModifiedDate":"2023-09-25"},{"lineNumber":8,"author":{"gitId":"NeoMinWei"},"content":" */","lastModifiedDate":"2023-09-25"},{"lineNumber":9,"author":{"gitId":"NeoMinWei"},"content":"public abstract class Ui {","lastModifiedDate":"2023-09-23"},{"lineNumber":10,"author":{"gitId":"NeoMinWei"},"content":"    /**","lastModifiedDate":"2023-09-25"},{"lineNumber":11,"author":{"gitId":"NeoMinWei"},"content":"     * Prints message that welcomes user whenever Neo chatbot is started up.","lastModifiedDate":"2023-09-25"},{"lineNumber":12,"author":{"gitId":"NeoMinWei"},"content":"     */","lastModifiedDate":"2023-09-25"},{"lineNumber":13,"author":{"gitId":"NeoMinWei"},"content":"    public static void welcomeMessage() {","lastModifiedDate":"2023-09-23"},{"lineNumber":14,"author":{"gitId":"NeoMinWei"},"content":"        System.out.println(\"Hello! I\u0027m Neo.\");","lastModifiedDate":"2023-09-23"},{"lineNumber":15,"author":{"gitId":"NeoMinWei"},"content":"        System.out.println(\"What can I do for you?\");","lastModifiedDate":"2023-09-23"},{"lineNumber":16,"author":{"gitId":"NeoMinWei"},"content":"    }","lastModifiedDate":"2023-09-23"},{"lineNumber":17,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-25"},{"lineNumber":18,"author":{"gitId":"NeoMinWei"},"content":"    /**","lastModifiedDate":"2023-09-25"},{"lineNumber":19,"author":{"gitId":"NeoMinWei"},"content":"     * Prints message that says bye to the user when /bye command is used.","lastModifiedDate":"2023-09-25"},{"lineNumber":20,"author":{"gitId":"NeoMinWei"},"content":"     */","lastModifiedDate":"2023-09-25"},{"lineNumber":21,"author":{"gitId":"NeoMinWei"},"content":"    public static void byeMessage() {","lastModifiedDate":"2023-09-23"},{"lineNumber":22,"author":{"gitId":"NeoMinWei"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-09-23"},{"lineNumber":23,"author":{"gitId":"NeoMinWei"},"content":"    }","lastModifiedDate":"2023-09-23"},{"lineNumber":24,"author":{"gitId":"NeoMinWei"},"content":"","lastModifiedDate":"2023-09-25"},{"lineNumber":25,"author":{"gitId":"NeoMinWei"},"content":"    /**","lastModifiedDate":"2023-09-25"},{"lineNumber":26,"author":{"gitId":"NeoMinWei"},"content":"     * Return the input from the user.","lastModifiedDate":"2023-09-25"},{"lineNumber":27,"author":{"gitId":"NeoMinWei"},"content":"     *","lastModifiedDate":"2023-09-25"},{"lineNumber":28,"author":{"gitId":"NeoMinWei"},"content":"     * @return The input from the user in CLI.","lastModifiedDate":"2023-09-25"},{"lineNumber":29,"author":{"gitId":"NeoMinWei"},"content":"     */","lastModifiedDate":"2023-09-25"},{"lineNumber":30,"author":{"gitId":"NeoMinWei"},"content":"    public static String readInput() {","lastModifiedDate":"2023-09-23"},{"lineNumber":31,"author":{"gitId":"NeoMinWei"},"content":"        Scanner in \u003d new Scanner(System.in);","lastModifiedDate":"2023-09-23"},{"lineNumber":32,"author":{"gitId":"NeoMinWei"},"content":"        return in.nextLine();","lastModifiedDate":"2023-09-23"},{"lineNumber":33,"author":{"gitId":"NeoMinWei"},"content":"    }","lastModifiedDate":"2023-09-23"},{"lineNumber":34,"author":{"gitId":"NeoMinWei"},"content":"}","lastModifiedDate":"2023-09-23"}],"authorContributionMap":{"NeoMinWei":34}}]
