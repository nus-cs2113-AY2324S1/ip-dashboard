[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"aaronxujiachen"},"content":"# Dude Chatbot User Guide","lastModifiedDate":"2023-10-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"aaronxujiachen"},"content":"Welcome to Dude, your trusty task management chatbot. Dude helps you stay organized by keeping track of your tasks, whether they\u0027re to-dos, deadlines, or events. This user guide will provide you with the essential information to make the most of Dude\u0027s features.","lastModifiedDate":"2023-10-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":6,"author":{"gitId":"aaronxujiachen"},"content":"## Getting Started","lastModifiedDate":"2023-10-03"},{"lineNumber":7,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":8,"author":{"gitId":"aaronxujiachen"},"content":"To get started with Dude, follow these steps:","lastModifiedDate":"2023-10-03"},{"lineNumber":9,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":10,"author":{"gitId":"aaronxujiachen"},"content":"1. Ensure you have Java Development Kit (JDK) 11 installed on your computer.","lastModifiedDate":"2023-10-03"},{"lineNumber":11,"author":{"gitId":"aaronxujiachen"},"content":"2. Make sure you have the latest version of IntelliJ IDEA installed.","lastModifiedDate":"2023-10-03"},{"lineNumber":12,"author":{"gitId":"aaronxujiachen"},"content":"3. Clone or download the Dude project repository.","lastModifiedDate":"2023-10-03"},{"lineNumber":13,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":14,"author":{"gitId":"aaronxujiachen"},"content":"## Setting Up Dude in IntelliJ IDEA","lastModifiedDate":"2023-10-03"},{"lineNumber":15,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":16,"author":{"gitId":"aaronxujiachen"},"content":"1. Open IntelliJ IDEA.","lastModifiedDate":"2023-10-03"},{"lineNumber":17,"author":{"gitId":"aaronxujiachen"},"content":"2. If you have an existing project open, close it.","lastModifiedDate":"2023-10-03"},{"lineNumber":18,"author":{"gitId":"aaronxujiachen"},"content":"3. Click on \"File\" \u003e \"Open\" and select the Dude project directory.","lastModifiedDate":"2023-10-03"},{"lineNumber":19,"author":{"gitId":"aaronxujiachen"},"content":"4. Configure the project to use JDK 11:","lastModifiedDate":"2023-10-03"},{"lineNumber":20,"author":{"gitId":"aaronxujiachen"},"content":"   - Click on \"File\" \u003e \"Project Structure.\"","lastModifiedDate":"2023-10-03"},{"lineNumber":21,"author":{"gitId":"aaronxujiachen"},"content":"   - Under \"Project,\" set the \"Project SDK\" to JDK 11.","lastModifiedDate":"2023-10-03"},{"lineNumber":22,"author":{"gitId":"aaronxujiachen"},"content":"   - Set the \"Project language level\" to \"SDK default.\"","lastModifiedDate":"2023-10-03"},{"lineNumber":23,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":24,"author":{"gitId":"aaronxujiachen"},"content":"## Running Dude","lastModifiedDate":"2023-10-03"},{"lineNumber":25,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":26,"author":{"gitId":"aaronxujiachen"},"content":"1. Locate the `Dude.java` file in the `src/main/java` directory of the Dude project.","lastModifiedDate":"2023-10-03"},{"lineNumber":27,"author":{"gitId":"aaronxujiachen"},"content":"2. Right-click on `Dude.java` and select \"Run Dude.main()\".","lastModifiedDate":"2023-10-03"},{"lineNumber":28,"author":{"gitId":"aaronxujiachen"},"content":"3. If everything is set up correctly, Dude will start, and you\u0027ll see a greeting message.","lastModifiedDate":"2023-10-03"},{"lineNumber":29,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":30,"author":{"gitId":"aaronxujiachen"},"content":"## Using Dude","lastModifiedDate":"2023-10-03"},{"lineNumber":31,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":32,"author":{"gitId":"aaronxujiachen"},"content":"Dude understands various commands to manage your tasks. Here are some essential commands:","lastModifiedDate":"2023-10-03"},{"lineNumber":33,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":34,"author":{"gitId":"aaronxujiachen"},"content":"- `list`: List all tasks in your task list.","lastModifiedDate":"2023-10-03"},{"lineNumber":35,"author":{"gitId":"aaronxujiachen"},"content":"- `todo \u003cdescription\u003e`: Add a to-do task.","lastModifiedDate":"2023-10-03"},{"lineNumber":36,"author":{"gitId":"aaronxujiachen"},"content":"- `deadline \u003cdescription\u003e /by \u003cdue_date\u003e`: Add a deadline task.","lastModifiedDate":"2023-10-03"},{"lineNumber":37,"author":{"gitId":"aaronxujiachen"},"content":"- `event \u003cdescription\u003e /from \u003cstart_date\u003e /to \u003cend_date\u003e`: Add an event task.","lastModifiedDate":"2023-10-03"},{"lineNumber":38,"author":{"gitId":"aaronxujiachen"},"content":"- `mark \u003ctask_index\u003e`: Mark a task as done.","lastModifiedDate":"2023-10-03"},{"lineNumber":39,"author":{"gitId":"aaronxujiachen"},"content":"- `unmark \u003ctask_index\u003e`: Mark a task as not done.","lastModifiedDate":"2023-10-03"},{"lineNumber":40,"author":{"gitId":"aaronxujiachen"},"content":"- `delete \u003ctask_index\u003e`: Delete a task from the list.","lastModifiedDate":"2023-10-03"},{"lineNumber":41,"author":{"gitId":"aaronxujiachen"},"content":"- `find \u003ckeyword\u003e`: Find tasks containing a specific keyword.","lastModifiedDate":"2023-10-03"},{"lineNumber":42,"author":{"gitId":"aaronxujiachen"},"content":"- `bye`: Exit Dude.","lastModifiedDate":"2023-10-03"},{"lineNumber":43,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":44,"author":{"gitId":"aaronxujiachen"},"content":"## Examples:","lastModifiedDate":"2023-10-03"},{"lineNumber":45,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":46,"author":{"gitId":"aaronxujiachen"},"content":"- To add a to-do task: `todo Buy groceries`","lastModifiedDate":"2023-10-03"},{"lineNumber":47,"author":{"gitId":"aaronxujiachen"},"content":"- To add a deadline task: `deadline Submit report /by 2023-12-31`","lastModifiedDate":"2023-10-03"},{"lineNumber":48,"author":{"gitId":"aaronxujiachen"},"content":"- To add an event task: `event Team meeting /from 2023-09-30 /to 2023-10-01`","lastModifiedDate":"2023-10-03"},{"lineNumber":49,"author":{"gitId":"aaronxujiachen"},"content":"- To mark a task as done: `mark 1`","lastModifiedDate":"2023-10-03"},{"lineNumber":50,"author":{"gitId":"aaronxujiachen"},"content":"- To delete a task: `delete 2`","lastModifiedDate":"2023-10-03"},{"lineNumber":51,"author":{"gitId":"aaronxujiachen"},"content":"- To find tasks containing a keyword: `find book`","lastModifiedDate":"2023-10-03"},{"lineNumber":52,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":53,"author":{"gitId":"aaronxujiachen"},"content":"Remember to replace `\u003cdescription\u003e`, `\u003cdue_date\u003e`, `\u003cstart_date\u003e`, `\u003cend_date\u003e`, `\u003ctask_index\u003e`, and `\u003ckeyword\u003e` with your specific task details.","lastModifiedDate":"2023-10-03"},{"lineNumber":54,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":55,"author":{"gitId":"aaronxujiachen"},"content":"## Conclusion","lastModifiedDate":"2023-10-03"},{"lineNumber":56,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":57,"author":{"gitId":"aaronxujiachen"},"content":"You\u0027re now ready to start using Dude to manage your tasks efficiently. If you have any questions or encounter issues, feel free to reach out to us. Dude is here to make task management a breeze!","lastModifiedDate":"2023-10-03"},{"lineNumber":58,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":59,"author":{"gitId":"aaronxujiachen"},"content":"Happy tasking!","lastModifiedDate":"2023-10-03"}],"authorContributionMap":{"aaronxujiachen":57,"-":2}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"aaronxujiachen"},"content":"# Dude Chatbot User Guide","lastModifiedDate":"2023-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"aaronxujiachen"},"content":"Welcome to Dude, your trusty task management chatbot. Dude helps you stay organized by keeping track of your tasks, whether they\u0027re to-dos, deadlines, or events. This user guide will provide you with the essential information to make the most of Dude\u0027s features.","lastModifiedDate":"2023-10-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":6,"author":{"gitId":"aaronxujiachen"},"content":"## Getting Started","lastModifiedDate":"2023-10-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":8,"author":{"gitId":"aaronxujiachen"},"content":"To get started with Dude, follow these steps:","lastModifiedDate":"2023-10-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":10,"author":{"gitId":"aaronxujiachen"},"content":"1. Ensure you have Java Development Kit (JDK) 11 installed on your computer.","lastModifiedDate":"2023-10-05"},{"lineNumber":11,"author":{"gitId":"aaronxujiachen"},"content":"2. Make sure you have the latest version of IntelliJ IDEA installed.","lastModifiedDate":"2023-10-05"},{"lineNumber":12,"author":{"gitId":"aaronxujiachen"},"content":"3. Clone or download the Dude project repository.","lastModifiedDate":"2023-10-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":14,"author":{"gitId":"aaronxujiachen"},"content":"## Setting Up Dude in IntelliJ IDEA","lastModifiedDate":"2023-10-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":16,"author":{"gitId":"aaronxujiachen"},"content":"1. Open IntelliJ IDEA.","lastModifiedDate":"2023-10-05"},{"lineNumber":17,"author":{"gitId":"aaronxujiachen"},"content":"2. If you have an existing project open, close it.","lastModifiedDate":"2023-10-05"},{"lineNumber":18,"author":{"gitId":"aaronxujiachen"},"content":"3. Click on \"File\" \u003e \"Open\" and select the Dude project directory.","lastModifiedDate":"2023-10-05"},{"lineNumber":19,"author":{"gitId":"aaronxujiachen"},"content":"4. Configure the project to use JDK 11:","lastModifiedDate":"2023-10-05"},{"lineNumber":20,"author":{"gitId":"aaronxujiachen"},"content":"    - Click on \"File\" \u003e \"Project Structure.\"","lastModifiedDate":"2023-10-05"},{"lineNumber":21,"author":{"gitId":"aaronxujiachen"},"content":"    - Under \"Project,\" set the \"Project SDK\" to JDK 11.","lastModifiedDate":"2023-10-05"},{"lineNumber":22,"author":{"gitId":"aaronxujiachen"},"content":"    - Set the \"Project language level\" to \"SDK default.\"","lastModifiedDate":"2023-10-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":24,"author":{"gitId":"aaronxujiachen"},"content":"## Running Dude","lastModifiedDate":"2023-10-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":26,"author":{"gitId":"aaronxujiachen"},"content":"1. Locate the `Dude.java` file in the `src/main/java` directory of the Dude project.","lastModifiedDate":"2023-10-05"},{"lineNumber":27,"author":{"gitId":"aaronxujiachen"},"content":"2. Right-click on `Dude.java` and select \"Run Dude.main()\".","lastModifiedDate":"2023-10-05"},{"lineNumber":28,"author":{"gitId":"aaronxujiachen"},"content":"3. If everything is set up correctly, Dude will start, and you\u0027ll see a greeting message.","lastModifiedDate":"2023-10-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":30,"author":{"gitId":"aaronxujiachen"},"content":"## Using Dude","lastModifiedDate":"2023-10-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":32,"author":{"gitId":"aaronxujiachen"},"content":"Dude understands various commands to manage your tasks. Here are some essential commands:","lastModifiedDate":"2023-10-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":34,"author":{"gitId":"aaronxujiachen"},"content":"- `list`: List all tasks in your task list.","lastModifiedDate":"2023-10-05"},{"lineNumber":35,"author":{"gitId":"aaronxujiachen"},"content":"- `todo \u003cdescription\u003e`: Add a to-do task.","lastModifiedDate":"2023-10-05"},{"lineNumber":36,"author":{"gitId":"aaronxujiachen"},"content":"- `deadline \u003cdescription\u003e /by \u003cdue_date\u003e`: Add a deadline task.","lastModifiedDate":"2023-10-05"},{"lineNumber":37,"author":{"gitId":"aaronxujiachen"},"content":"- `event \u003cdescription\u003e /from \u003cstart_date\u003e /to \u003cend_date\u003e`: Add an event task.","lastModifiedDate":"2023-10-05"},{"lineNumber":38,"author":{"gitId":"aaronxujiachen"},"content":"- `mark \u003ctask_index\u003e`: Mark a task as done.","lastModifiedDate":"2023-10-05"},{"lineNumber":39,"author":{"gitId":"aaronxujiachen"},"content":"- `unmark \u003ctask_index\u003e`: Mark a task as not done.","lastModifiedDate":"2023-10-05"},{"lineNumber":40,"author":{"gitId":"aaronxujiachen"},"content":"- `delete \u003ctask_index\u003e`: Delete a task from the list.","lastModifiedDate":"2023-10-05"},{"lineNumber":41,"author":{"gitId":"aaronxujiachen"},"content":"- `find \u003ckeyword\u003e`: Find tasks containing a specific keyword.","lastModifiedDate":"2023-10-05"},{"lineNumber":42,"author":{"gitId":"aaronxujiachen"},"content":"- `bye`: Exit Dude.","lastModifiedDate":"2023-10-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":44,"author":{"gitId":"aaronxujiachen"},"content":"## Examples:","lastModifiedDate":"2023-10-05"},{"lineNumber":45,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":46,"author":{"gitId":"aaronxujiachen"},"content":"- To add a to-do task: `todo Buy groceries`","lastModifiedDate":"2023-10-05"},{"lineNumber":47,"author":{"gitId":"aaronxujiachen"},"content":"- To add a deadline task: `deadline Submit report /by 2023-12-31`","lastModifiedDate":"2023-10-05"},{"lineNumber":48,"author":{"gitId":"aaronxujiachen"},"content":"- To add an event task: `event Team meeting /from 2023-09-30 /to 2023-10-01`","lastModifiedDate":"2023-10-05"},{"lineNumber":49,"author":{"gitId":"aaronxujiachen"},"content":"- To mark a task as done: `mark 1`","lastModifiedDate":"2023-10-05"},{"lineNumber":50,"author":{"gitId":"aaronxujiachen"},"content":"- To delete a task: `delete 2`","lastModifiedDate":"2023-10-05"},{"lineNumber":51,"author":{"gitId":"aaronxujiachen"},"content":"- To find tasks containing a keyword: `find book`","lastModifiedDate":"2023-10-05"},{"lineNumber":52,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":53,"author":{"gitId":"aaronxujiachen"},"content":"Remember to replace `\u003cdescription\u003e`, `\u003cdue_date\u003e`, `\u003cstart_date\u003e`, `\u003cend_date\u003e`, `\u003ctask_index\u003e`, and `\u003ckeyword\u003e` with your specific task details.","lastModifiedDate":"2023-10-05"},{"lineNumber":54,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":55,"author":{"gitId":"aaronxujiachen"},"content":"## Conclusion","lastModifiedDate":"2023-10-05"},{"lineNumber":56,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":57,"author":{"gitId":"aaronxujiachen"},"content":"You\u0027re now ready to start using Dude to manage your tasks efficiently. If you have any questions or encounter issues, feel free to reach out to us. Dude is here to make task management a breeze!","lastModifiedDate":"2023-10-05"},{"lineNumber":58,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":59,"author":{"gitId":"aaronxujiachen"},"content":"Happy tasking!","lastModifiedDate":"2023-10-05"}],"authorContributionMap":{"aaronxujiachen":46,"-":13}},{"path":"src/dude/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronxujiachen"},"content":"package dude;","lastModifiedDate":"2023-09-16"},{"lineNumber":2,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":3,"author":{"gitId":"aaronxujiachen"},"content":"/**","lastModifiedDate":"2023-10-03"},{"lineNumber":4,"author":{"gitId":"aaronxujiachen"},"content":" * The `Deadline` class represents a task with a deadline, which has a description and a due date (by).","lastModifiedDate":"2023-10-03"},{"lineNumber":5,"author":{"gitId":"aaronxujiachen"},"content":" * It extends the `Task` class and provides additional fields and methods specific to deadline tasks.","lastModifiedDate":"2023-10-03"},{"lineNumber":6,"author":{"gitId":"aaronxujiachen"},"content":" */","lastModifiedDate":"2023-10-03"},{"lineNumber":7,"author":{"gitId":"aaronxujiachen"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-09-09"},{"lineNumber":8,"author":{"gitId":"aaronxujiachen"},"content":"    private String by;","lastModifiedDate":"2023-09-21"},{"lineNumber":9,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":10,"author":{"gitId":"aaronxujiachen"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":11,"author":{"gitId":"aaronxujiachen"},"content":"     * Constructs a new `Deadline` task with the specified description and due date (by).","lastModifiedDate":"2023-10-03"},{"lineNumber":12,"author":{"gitId":"aaronxujiachen"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":13,"author":{"gitId":"aaronxujiachen"},"content":"     * @param description The description of the deadline task.","lastModifiedDate":"2023-10-03"},{"lineNumber":14,"author":{"gitId":"aaronxujiachen"},"content":"     * @param by          The due date of the deadline task.","lastModifiedDate":"2023-10-03"},{"lineNumber":15,"author":{"gitId":"aaronxujiachen"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":16,"author":{"gitId":"aaronxujiachen"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2023-09-09"},{"lineNumber":17,"author":{"gitId":"aaronxujiachen"},"content":"        super(description);","lastModifiedDate":"2023-09-09"},{"lineNumber":18,"author":{"gitId":"aaronxujiachen"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-09-09"},{"lineNumber":19,"author":{"gitId":"aaronxujiachen"},"content":"        this.type \u003d \"[D]\";","lastModifiedDate":"2023-09-21"},{"lineNumber":20,"author":{"gitId":"aaronxujiachen"},"content":"    }","lastModifiedDate":"2023-09-21"},{"lineNumber":21,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":22,"author":{"gitId":"aaronxujiachen"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":23,"author":{"gitId":"aaronxujiachen"},"content":"     * Converts the deadline task to a formatted string for saving to a file.","lastModifiedDate":"2023-10-03"},{"lineNumber":24,"author":{"gitId":"aaronxujiachen"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":25,"author":{"gitId":"aaronxujiachen"},"content":"     * @return A string representation of the deadline task in file format.","lastModifiedDate":"2023-10-03"},{"lineNumber":26,"author":{"gitId":"aaronxujiachen"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":27,"author":{"gitId":"aaronxujiachen"},"content":"    @Override","lastModifiedDate":"2023-09-21"},{"lineNumber":28,"author":{"gitId":"aaronxujiachen"},"content":"    public String toFileFormat() {","lastModifiedDate":"2023-09-21"},{"lineNumber":29,"author":{"gitId":"aaronxujiachen"},"content":"        return super.toFileFormat() + \" | \" + by;","lastModifiedDate":"2023-09-21"},{"lineNumber":30,"author":{"gitId":"aaronxujiachen"},"content":"    }","lastModifiedDate":"2023-09-21"},{"lineNumber":31,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":32,"author":{"gitId":"aaronxujiachen"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":33,"author":{"gitId":"aaronxujiachen"},"content":"     * Creates a `Deadline` object from a string in file format.","lastModifiedDate":"2023-10-03"},{"lineNumber":34,"author":{"gitId":"aaronxujiachen"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":35,"author":{"gitId":"aaronxujiachen"},"content":"     * @param fileString A string containing the deadline task details in file format.","lastModifiedDate":"2023-10-03"},{"lineNumber":36,"author":{"gitId":"aaronxujiachen"},"content":"     * @return A `Deadline` object parsed from the file string.","lastModifiedDate":"2023-10-03"},{"lineNumber":37,"author":{"gitId":"aaronxujiachen"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":38,"author":{"gitId":"aaronxujiachen"},"content":"    public static Deadline fromFileFormat(String fileString) {","lastModifiedDate":"2023-09-21"},{"lineNumber":39,"author":{"gitId":"aaronxujiachen"},"content":"        String[] parts \u003d fileString.split(\"\\\\s\\\\|\\\\s\");","lastModifiedDate":"2023-09-21"},{"lineNumber":40,"author":{"gitId":"aaronxujiachen"},"content":"        Deadline deadline \u003d new Deadline(parts[2], parts[3]);","lastModifiedDate":"2023-09-21"},{"lineNumber":41,"author":{"gitId":"aaronxujiachen"},"content":"        if (parts[1].equals(\"1\")) {","lastModifiedDate":"2023-09-21"},{"lineNumber":42,"author":{"gitId":"aaronxujiachen"},"content":"            deadline.setDone(deadline.isDone);","lastModifiedDate":"2023-09-28"},{"lineNumber":43,"author":{"gitId":"aaronxujiachen"},"content":"        }","lastModifiedDate":"2023-09-21"},{"lineNumber":44,"author":{"gitId":"aaronxujiachen"},"content":"        return deadline;","lastModifiedDate":"2023-09-21"},{"lineNumber":45,"author":{"gitId":"aaronxujiachen"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":46,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":47,"author":{"gitId":"aaronxujiachen"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":48,"author":{"gitId":"aaronxujiachen"},"content":"     * Generates a string representation of the deadline task, including its description and due date.","lastModifiedDate":"2023-10-03"},{"lineNumber":49,"author":{"gitId":"aaronxujiachen"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":50,"author":{"gitId":"aaronxujiachen"},"content":"     * @return A string representing the deadline task.","lastModifiedDate":"2023-10-03"},{"lineNumber":51,"author":{"gitId":"aaronxujiachen"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":52,"author":{"gitId":"aaronxujiachen"},"content":"    @Override","lastModifiedDate":"2023-09-09"},{"lineNumber":53,"author":{"gitId":"aaronxujiachen"},"content":"    public String toString() {","lastModifiedDate":"2023-09-09"},{"lineNumber":54,"author":{"gitId":"aaronxujiachen"},"content":"        return super.toString() + \" (by: \" + by + \")\";","lastModifiedDate":"2023-09-21"},{"lineNumber":55,"author":{"gitId":"aaronxujiachen"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":56,"author":{"gitId":"aaronxujiachen"},"content":"}","lastModifiedDate":"2023-09-09"}],"authorContributionMap":{"aaronxujiachen":56}},{"path":"src/dude/Dude.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronxujiachen"},"content":"package dude;","lastModifiedDate":"2023-09-16"},{"lineNumber":2,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":3,"author":{"gitId":"aaronxujiachen"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"aaronxujiachen"},"content":"/**","lastModifiedDate":"2023-10-03"},{"lineNumber":6,"author":{"gitId":"aaronxujiachen"},"content":" * The `Dude` class represents the main application class for the Dude task manager.","lastModifiedDate":"2023-10-03"},{"lineNumber":7,"author":{"gitId":"aaronxujiachen"},"content":" * It initializes the user interface, storage, and task list, and manages the main","lastModifiedDate":"2023-10-03"},{"lineNumber":8,"author":{"gitId":"aaronxujiachen"},"content":" * execution flow of the program.","lastModifiedDate":"2023-10-03"},{"lineNumber":9,"author":{"gitId":"aaronxujiachen"},"content":" */","lastModifiedDate":"2023-10-03"},{"lineNumber":10,"author":{"gitId":"aaronxujiachen"},"content":"public class Dude {","lastModifiedDate":"2023-09-14"},{"lineNumber":11,"author":{"gitId":"aaronxujiachen"},"content":"    private Storage storage;","lastModifiedDate":"2023-09-28"},{"lineNumber":12,"author":{"gitId":"aaronxujiachen"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-09-28"},{"lineNumber":13,"author":{"gitId":"aaronxujiachen"},"content":"    private Ui ui;","lastModifiedDate":"2023-09-28"},{"lineNumber":14,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":15,"author":{"gitId":"aaronxujiachen"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":16,"author":{"gitId":"aaronxujiachen"},"content":"     * Constructs a new `Dude` instance with the specified file path.","lastModifiedDate":"2023-10-03"},{"lineNumber":17,"author":{"gitId":"aaronxujiachen"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":18,"author":{"gitId":"aaronxujiachen"},"content":"     * @param filePath The file path for storing task data.","lastModifiedDate":"2023-10-03"},{"lineNumber":19,"author":{"gitId":"aaronxujiachen"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":20,"author":{"gitId":"aaronxujiachen"},"content":"    public Dude(String filePath) {","lastModifiedDate":"2023-09-28"},{"lineNumber":21,"author":{"gitId":"aaronxujiachen"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-09-28"},{"lineNumber":22,"author":{"gitId":"aaronxujiachen"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2023-09-28"},{"lineNumber":23,"author":{"gitId":"aaronxujiachen"},"content":"        try {","lastModifiedDate":"2023-09-16"},{"lineNumber":24,"author":{"gitId":"aaronxujiachen"},"content":"            tasks \u003d new TaskList(storage.loadFromFile(), storage, ui);","lastModifiedDate":"2023-09-28"},{"lineNumber":25,"author":{"gitId":"aaronxujiachen"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-28"},{"lineNumber":26,"author":{"gitId":"aaronxujiachen"},"content":"            // Display a generic error message or log the exception details","lastModifiedDate":"2023-09-28"},{"lineNumber":27,"author":{"gitId":"aaronxujiachen"},"content":"            ui.showMessage(\"Error loading tasks from file: \" + e.getMessage());","lastModifiedDate":"2023-09-28"},{"lineNumber":28,"author":{"gitId":"aaronxujiachen"},"content":"            tasks \u003d new TaskList(new ArrayList\u003c\u003e(), storage, ui);","lastModifiedDate":"2023-09-28"},{"lineNumber":29,"author":{"gitId":"aaronxujiachen"},"content":"        }","lastModifiedDate":"2023-09-16"},{"lineNumber":30,"author":{"gitId":"aaronxujiachen"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":31,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":32,"author":{"gitId":"aaronxujiachen"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":33,"author":{"gitId":"aaronxujiachen"},"content":"     * Runs the Dude application, displaying a greeting message and entering an","lastModifiedDate":"2023-10-03"},{"lineNumber":34,"author":{"gitId":"aaronxujiachen"},"content":"     * infinite loop to process user commands until the user exits the program.","lastModifiedDate":"2023-10-03"},{"lineNumber":35,"author":{"gitId":"aaronxujiachen"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":36,"author":{"gitId":"aaronxujiachen"},"content":"    public void run() {","lastModifiedDate":"2023-09-28"},{"lineNumber":37,"author":{"gitId":"aaronxujiachen"},"content":"        ui.showGreeting();","lastModifiedDate":"2023-09-28"},{"lineNumber":38,"author":{"gitId":"aaronxujiachen"},"content":"        while (true) { // Infinite loop since exit is handled in the Parser","lastModifiedDate":"2023-09-28"},{"lineNumber":39,"author":{"gitId":"aaronxujiachen"},"content":"            try {","lastModifiedDate":"2023-09-21"},{"lineNumber":40,"author":{"gitId":"aaronxujiachen"},"content":"                String fullCommand \u003d ui.readCommand();","lastModifiedDate":"2023-09-28"},{"lineNumber":41,"author":{"gitId":"aaronxujiachen"},"content":"                Parser.parse(fullCommand, tasks, ui, storage);","lastModifiedDate":"2023-09-28"},{"lineNumber":42,"author":{"gitId":"aaronxujiachen"},"content":"            } catch (DudeException e) {","lastModifiedDate":"2023-09-28"},{"lineNumber":43,"author":{"gitId":"aaronxujiachen"},"content":"                ui.showError(e.getMessage());","lastModifiedDate":"2023-09-28"},{"lineNumber":44,"author":{"gitId":"aaronxujiachen"},"content":"            }","lastModifiedDate":"2023-09-21"},{"lineNumber":45,"author":{"gitId":"aaronxujiachen"},"content":"        }","lastModifiedDate":"2023-09-21"},{"lineNumber":46,"author":{"gitId":"aaronxujiachen"},"content":"    }","lastModifiedDate":"2023-09-21"},{"lineNumber":47,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":48,"author":{"gitId":"aaronxujiachen"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":49,"author":{"gitId":"aaronxujiachen"},"content":"     * The entry point of the Dude application. Creates a new `Dude` instance with","lastModifiedDate":"2023-10-03"},{"lineNumber":50,"author":{"gitId":"aaronxujiachen"},"content":"     * a specified data file path and starts the application by calling the `run` method.","lastModifiedDate":"2023-10-03"},{"lineNumber":51,"author":{"gitId":"aaronxujiachen"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":52,"author":{"gitId":"aaronxujiachen"},"content":"     * @param args Command-line arguments (not used in this application).","lastModifiedDate":"2023-10-03"},{"lineNumber":53,"author":{"gitId":"aaronxujiachen"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":54,"author":{"gitId":"aaronxujiachen"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-08-22"},{"lineNumber":55,"author":{"gitId":"aaronxujiachen"},"content":"        new Dude(\"dude.txt\").run();","lastModifiedDate":"2023-10-06"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"aaronxujiachen":55,"-":2}},{"path":"src/dude/DudeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronxujiachen"},"content":"package dude;","lastModifiedDate":"2023-09-16"},{"lineNumber":2,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":3,"author":{"gitId":"aaronxujiachen"},"content":"/**","lastModifiedDate":"2023-10-03"},{"lineNumber":4,"author":{"gitId":"aaronxujiachen"},"content":" * The `DudeException` class represents a custom exception that can be thrown to handle","lastModifiedDate":"2023-10-03"},{"lineNumber":5,"author":{"gitId":"aaronxujiachen"},"content":" * exceptional situations within the Dude application.","lastModifiedDate":"2023-10-03"},{"lineNumber":6,"author":{"gitId":"aaronxujiachen"},"content":" */","lastModifiedDate":"2023-10-03"},{"lineNumber":7,"author":{"gitId":"aaronxujiachen"},"content":"public class DudeException extends Exception {","lastModifiedDate":"2023-09-16"},{"lineNumber":8,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":9,"author":{"gitId":"aaronxujiachen"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":10,"author":{"gitId":"aaronxujiachen"},"content":"     * Constructs a new `DudeException` with the specified error message.","lastModifiedDate":"2023-10-03"},{"lineNumber":11,"author":{"gitId":"aaronxujiachen"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":12,"author":{"gitId":"aaronxujiachen"},"content":"     * @param message The error message associated with the exception.","lastModifiedDate":"2023-10-03"},{"lineNumber":13,"author":{"gitId":"aaronxujiachen"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":14,"author":{"gitId":"aaronxujiachen"},"content":"    public DudeException(String message) {","lastModifiedDate":"2023-09-16"},{"lineNumber":15,"author":{"gitId":"aaronxujiachen"},"content":"        super(message);","lastModifiedDate":"2023-09-16"},{"lineNumber":16,"author":{"gitId":"aaronxujiachen"},"content":"    }","lastModifiedDate":"2023-09-16"},{"lineNumber":17,"author":{"gitId":"aaronxujiachen"},"content":"}","lastModifiedDate":"2023-09-16"}],"authorContributionMap":{"aaronxujiachen":17}},{"path":"src/dude/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronxujiachen"},"content":"package dude;","lastModifiedDate":"2023-09-16"},{"lineNumber":2,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":3,"author":{"gitId":"aaronxujiachen"},"content":"/**","lastModifiedDate":"2023-10-03"},{"lineNumber":4,"author":{"gitId":"aaronxujiachen"},"content":" * The `Event` class represents an event task that has a description, start time (from), and end time (to).","lastModifiedDate":"2023-10-03"},{"lineNumber":5,"author":{"gitId":"aaronxujiachen"},"content":" * It extends the `Task` class and provides additional fields and methods specific to event tasks.","lastModifiedDate":"2023-10-03"},{"lineNumber":6,"author":{"gitId":"aaronxujiachen"},"content":" */","lastModifiedDate":"2023-10-03"},{"lineNumber":7,"author":{"gitId":"aaronxujiachen"},"content":"public class Event extends Task {","lastModifiedDate":"2023-09-09"},{"lineNumber":8,"author":{"gitId":"aaronxujiachen"},"content":"    private String from;","lastModifiedDate":"2023-09-21"},{"lineNumber":9,"author":{"gitId":"aaronxujiachen"},"content":"    private String to;","lastModifiedDate":"2023-09-21"},{"lineNumber":10,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":11,"author":{"gitId":"aaronxujiachen"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":12,"author":{"gitId":"aaronxujiachen"},"content":"     * Constructs a new `Event` task with the specified description, start time (from), and end time (to).","lastModifiedDate":"2023-10-03"},{"lineNumber":13,"author":{"gitId":"aaronxujiachen"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":14,"author":{"gitId":"aaronxujiachen"},"content":"     * @param description The description of the event task.","lastModifiedDate":"2023-10-03"},{"lineNumber":15,"author":{"gitId":"aaronxujiachen"},"content":"     * @param from        The start time of the event.","lastModifiedDate":"2023-10-03"},{"lineNumber":16,"author":{"gitId":"aaronxujiachen"},"content":"     * @param to          The end time of the event.","lastModifiedDate":"2023-10-03"},{"lineNumber":17,"author":{"gitId":"aaronxujiachen"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":18,"author":{"gitId":"aaronxujiachen"},"content":"    public Event(String description, String from, String to) {","lastModifiedDate":"2023-09-21"},{"lineNumber":19,"author":{"gitId":"aaronxujiachen"},"content":"        super(description);","lastModifiedDate":"2023-09-09"},{"lineNumber":20,"author":{"gitId":"aaronxujiachen"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-09-21"},{"lineNumber":21,"author":{"gitId":"aaronxujiachen"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-09-21"},{"lineNumber":22,"author":{"gitId":"aaronxujiachen"},"content":"        this.type \u003d \"[E]\";","lastModifiedDate":"2023-09-21"},{"lineNumber":23,"author":{"gitId":"aaronxujiachen"},"content":"    }","lastModifiedDate":"2023-09-21"},{"lineNumber":24,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":25,"author":{"gitId":"aaronxujiachen"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":26,"author":{"gitId":"aaronxujiachen"},"content":"     * Converts the event task to a formatted string for saving to a file.","lastModifiedDate":"2023-10-03"},{"lineNumber":27,"author":{"gitId":"aaronxujiachen"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":28,"author":{"gitId":"aaronxujiachen"},"content":"     * @return A string representation of the event task in file format.","lastModifiedDate":"2023-10-03"},{"lineNumber":29,"author":{"gitId":"aaronxujiachen"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":30,"author":{"gitId":"aaronxujiachen"},"content":"    @Override","lastModifiedDate":"2023-09-21"},{"lineNumber":31,"author":{"gitId":"aaronxujiachen"},"content":"    public String toFileFormat() {","lastModifiedDate":"2023-09-21"},{"lineNumber":32,"author":{"gitId":"aaronxujiachen"},"content":"        return super.toFileFormat() + \" | \" + from + \" | \" + to;","lastModifiedDate":"2023-09-21"},{"lineNumber":33,"author":{"gitId":"aaronxujiachen"},"content":"    }","lastModifiedDate":"2023-09-21"},{"lineNumber":34,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":35,"author":{"gitId":"aaronxujiachen"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":36,"author":{"gitId":"aaronxujiachen"},"content":"     * Creates an `Event` object from a string in file format.","lastModifiedDate":"2023-10-03"},{"lineNumber":37,"author":{"gitId":"aaronxujiachen"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":38,"author":{"gitId":"aaronxujiachen"},"content":"     * @param fileString A string containing the event task details in file format.","lastModifiedDate":"2023-10-03"},{"lineNumber":39,"author":{"gitId":"aaronxujiachen"},"content":"     * @return An `Event` object parsed from the file string.","lastModifiedDate":"2023-10-03"},{"lineNumber":40,"author":{"gitId":"aaronxujiachen"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":41,"author":{"gitId":"aaronxujiachen"},"content":"    public static Event fromFileFormat(String fileString) {","lastModifiedDate":"2023-09-21"},{"lineNumber":42,"author":{"gitId":"aaronxujiachen"},"content":"        String[] parts \u003d fileString.split(\"\\\\s\\\\|\\\\s\");","lastModifiedDate":"2023-09-21"},{"lineNumber":43,"author":{"gitId":"aaronxujiachen"},"content":"        Event event \u003d new Event(parts[2], parts[3], parts[4]);","lastModifiedDate":"2023-09-21"},{"lineNumber":44,"author":{"gitId":"aaronxujiachen"},"content":"        if (parts[1].equals(\"1\")) {","lastModifiedDate":"2023-09-21"},{"lineNumber":45,"author":{"gitId":"aaronxujiachen"},"content":"            event.setDone(event.isDone);","lastModifiedDate":"2023-09-28"},{"lineNumber":46,"author":{"gitId":"aaronxujiachen"},"content":"        }","lastModifiedDate":"2023-09-21"},{"lineNumber":47,"author":{"gitId":"aaronxujiachen"},"content":"        return event;","lastModifiedDate":"2023-09-21"},{"lineNumber":48,"author":{"gitId":"aaronxujiachen"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":49,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":50,"author":{"gitId":"aaronxujiachen"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":51,"author":{"gitId":"aaronxujiachen"},"content":"     * Generates a string representation of the event task, including its description and time frame.","lastModifiedDate":"2023-10-03"},{"lineNumber":52,"author":{"gitId":"aaronxujiachen"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":53,"author":{"gitId":"aaronxujiachen"},"content":"     * @return A string representing the event task.","lastModifiedDate":"2023-10-03"},{"lineNumber":54,"author":{"gitId":"aaronxujiachen"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":55,"author":{"gitId":"aaronxujiachen"},"content":"    @Override","lastModifiedDate":"2023-09-09"},{"lineNumber":56,"author":{"gitId":"aaronxujiachen"},"content":"    public String toString() {","lastModifiedDate":"2023-09-09"},{"lineNumber":57,"author":{"gitId":"aaronxujiachen"},"content":"        return super.toString() + \" (from: \" + from + \" to: \" + to + \")\";","lastModifiedDate":"2023-09-21"},{"lineNumber":58,"author":{"gitId":"aaronxujiachen"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":59,"author":{"gitId":"aaronxujiachen"},"content":"}","lastModifiedDate":"2023-09-09"}],"authorContributionMap":{"aaronxujiachen":59}},{"path":"src/dude/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronxujiachen"},"content":"package dude;","lastModifiedDate":"2023-09-28"},{"lineNumber":2,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":3,"author":{"gitId":"aaronxujiachen"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-30"},{"lineNumber":4,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-30"},{"lineNumber":5,"author":{"gitId":"aaronxujiachen"},"content":"/**","lastModifiedDate":"2023-10-03"},{"lineNumber":6,"author":{"gitId":"aaronxujiachen"},"content":" * The `Parser` class is responsible for parsing user input commands and executing the","lastModifiedDate":"2023-10-03"},{"lineNumber":7,"author":{"gitId":"aaronxujiachen"},"content":" * corresponding actions on the task list.","lastModifiedDate":"2023-10-03"},{"lineNumber":8,"author":{"gitId":"aaronxujiachen"},"content":" */","lastModifiedDate":"2023-10-03"},{"lineNumber":9,"author":{"gitId":"aaronxujiachen"},"content":"public class Parser {","lastModifiedDate":"2023-09-28"},{"lineNumber":10,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":11,"author":{"gitId":"aaronxujiachen"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":12,"author":{"gitId":"aaronxujiachen"},"content":"     * Parses the user input command and performs the corresponding action on the task list.","lastModifiedDate":"2023-10-03"},{"lineNumber":13,"author":{"gitId":"aaronxujiachen"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":14,"author":{"gitId":"aaronxujiachen"},"content":"     * @param input   The user input command to parse and execute.","lastModifiedDate":"2023-10-03"},{"lineNumber":15,"author":{"gitId":"aaronxujiachen"},"content":"     * @param tasks   The TaskList instance containing the list of tasks.","lastModifiedDate":"2023-10-03"},{"lineNumber":16,"author":{"gitId":"aaronxujiachen"},"content":"     * @param ui      The Ui instance for user interactions and output.","lastModifiedDate":"2023-10-03"},{"lineNumber":17,"author":{"gitId":"aaronxujiachen"},"content":"     * @param storage The Storage instance for saving and loading tasks.","lastModifiedDate":"2023-10-03"},{"lineNumber":18,"author":{"gitId":"aaronxujiachen"},"content":"     * @throws DudeException If there\u0027s an error during command parsing or execution.","lastModifiedDate":"2023-10-03"},{"lineNumber":19,"author":{"gitId":"aaronxujiachen"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":20,"author":{"gitId":"aaronxujiachen"},"content":"    public static void parse(String input, TaskList tasks, Ui ui, Storage storage) throws DudeException {","lastModifiedDate":"2023-09-28"},{"lineNumber":21,"author":{"gitId":"aaronxujiachen"},"content":"        String[] commandWords \u003d input.split(\" \");","lastModifiedDate":"2023-09-28"},{"lineNumber":22,"author":{"gitId":"aaronxujiachen"},"content":"        String commandType \u003d commandWords[0];","lastModifiedDate":"2023-09-28"},{"lineNumber":23,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":24,"author":{"gitId":"aaronxujiachen"},"content":"        switch (commandType) {","lastModifiedDate":"2023-09-28"},{"lineNumber":25,"author":{"gitId":"aaronxujiachen"},"content":"        case \"bye\":","lastModifiedDate":"2023-09-28"},{"lineNumber":26,"author":{"gitId":"aaronxujiachen"},"content":"            ui.showFarewell();","lastModifiedDate":"2023-09-28"},{"lineNumber":27,"author":{"gitId":"aaronxujiachen"},"content":"            System.exit(0);","lastModifiedDate":"2023-09-28"},{"lineNumber":28,"author":{"gitId":"aaronxujiachen"},"content":"            break;","lastModifiedDate":"2023-09-28"},{"lineNumber":29,"author":{"gitId":"aaronxujiachen"},"content":"        case \"list\":","lastModifiedDate":"2023-09-28"},{"lineNumber":30,"author":{"gitId":"aaronxujiachen"},"content":"            tasks.listTasks();","lastModifiedDate":"2023-09-28"},{"lineNumber":31,"author":{"gitId":"aaronxujiachen"},"content":"            break;","lastModifiedDate":"2023-09-28"},{"lineNumber":32,"author":{"gitId":"aaronxujiachen"},"content":"        case \"todo\":","lastModifiedDate":"2023-09-28"},{"lineNumber":33,"author":{"gitId":"aaronxujiachen"},"content":"            tasks.addTodoTask(input);","lastModifiedDate":"2023-09-28"},{"lineNumber":34,"author":{"gitId":"aaronxujiachen"},"content":"            break;","lastModifiedDate":"2023-09-28"},{"lineNumber":35,"author":{"gitId":"aaronxujiachen"},"content":"        case \"deadline\":","lastModifiedDate":"2023-09-28"},{"lineNumber":36,"author":{"gitId":"aaronxujiachen"},"content":"            tasks.addDeadlineTask(input);","lastModifiedDate":"2023-09-28"},{"lineNumber":37,"author":{"gitId":"aaronxujiachen"},"content":"            break;","lastModifiedDate":"2023-09-28"},{"lineNumber":38,"author":{"gitId":"aaronxujiachen"},"content":"        case \"event\":","lastModifiedDate":"2023-09-28"},{"lineNumber":39,"author":{"gitId":"aaronxujiachen"},"content":"            tasks.addEventTask(input);","lastModifiedDate":"2023-09-28"},{"lineNumber":40,"author":{"gitId":"aaronxujiachen"},"content":"            break;","lastModifiedDate":"2023-09-28"},{"lineNumber":41,"author":{"gitId":"aaronxujiachen"},"content":"        case \"mark\":","lastModifiedDate":"2023-09-28"},{"lineNumber":42,"author":{"gitId":"aaronxujiachen"},"content":"            tasks.markOrUnmarkTask(input, true); // Mark as done","lastModifiedDate":"2023-09-28"},{"lineNumber":43,"author":{"gitId":"aaronxujiachen"},"content":"            break;","lastModifiedDate":"2023-09-28"},{"lineNumber":44,"author":{"gitId":"aaronxujiachen"},"content":"        case \"unmark\":","lastModifiedDate":"2023-09-28"},{"lineNumber":45,"author":{"gitId":"aaronxujiachen"},"content":"            tasks.markOrUnmarkTask(input, false); // Mark as not done","lastModifiedDate":"2023-09-28"},{"lineNumber":46,"author":{"gitId":"aaronxujiachen"},"content":"            break;","lastModifiedDate":"2023-09-28"},{"lineNumber":47,"author":{"gitId":"aaronxujiachen"},"content":"        case \"delete\":","lastModifiedDate":"2023-09-28"},{"lineNumber":48,"author":{"gitId":"aaronxujiachen"},"content":"            tasks.deleteTask(input);","lastModifiedDate":"2023-09-28"},{"lineNumber":49,"author":{"gitId":"aaronxujiachen"},"content":"            break;","lastModifiedDate":"2023-09-28"},{"lineNumber":50,"author":{"gitId":"aaronxujiachen"},"content":"        case \"find\":","lastModifiedDate":"2023-09-30"},{"lineNumber":51,"author":{"gitId":"aaronxujiachen"},"content":"            String keyword \u003d input.substring(5).trim(); // Extract the search keyword","lastModifiedDate":"2023-09-30"},{"lineNumber":52,"author":{"gitId":"aaronxujiachen"},"content":"            ArrayList\u003cTask\u003e matchingTasks \u003d tasks.findTasksByKeyword(keyword); // Find matching tasks","lastModifiedDate":"2023-09-30"},{"lineNumber":53,"author":{"gitId":"aaronxujiachen"},"content":"            ui.showFoundTasks(matchingTasks); // Display matching tasks","lastModifiedDate":"2023-09-30"},{"lineNumber":54,"author":{"gitId":"aaronxujiachen"},"content":"            break;","lastModifiedDate":"2023-09-30"},{"lineNumber":55,"author":{"gitId":"aaronxujiachen"},"content":"        default:","lastModifiedDate":"2023-09-28"},{"lineNumber":56,"author":{"gitId":"aaronxujiachen"},"content":"            throw new DudeException(\"I\u0027m sorry, I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-09-28"},{"lineNumber":57,"author":{"gitId":"aaronxujiachen"},"content":"        }","lastModifiedDate":"2023-09-28"},{"lineNumber":58,"author":{"gitId":"aaronxujiachen"},"content":"    }","lastModifiedDate":"2023-09-28"},{"lineNumber":59,"author":{"gitId":"aaronxujiachen"},"content":"}","lastModifiedDate":"2023-09-28"}],"authorContributionMap":{"aaronxujiachen":59}},{"path":"src/dude/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronxujiachen"},"content":"package dude;","lastModifiedDate":"2023-09-28"},{"lineNumber":2,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":3,"author":{"gitId":"aaronxujiachen"},"content":"import java.io.File;","lastModifiedDate":"2023-09-28"},{"lineNumber":4,"author":{"gitId":"aaronxujiachen"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-09-28"},{"lineNumber":5,"author":{"gitId":"aaronxujiachen"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-28"},{"lineNumber":6,"author":{"gitId":"aaronxujiachen"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-28"},{"lineNumber":7,"author":{"gitId":"aaronxujiachen"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-09-28"},{"lineNumber":8,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":9,"author":{"gitId":"aaronxujiachen"},"content":"/**","lastModifiedDate":"2023-10-03"},{"lineNumber":10,"author":{"gitId":"aaronxujiachen"},"content":" * The `Storage` class manages file input and output operations, responsible for","lastModifiedDate":"2023-10-03"},{"lineNumber":11,"author":{"gitId":"aaronxujiachen"},"content":" * saving tasks to a file and loading tasks from a file.","lastModifiedDate":"2023-10-03"},{"lineNumber":12,"author":{"gitId":"aaronxujiachen"},"content":" */","lastModifiedDate":"2023-10-03"},{"lineNumber":13,"author":{"gitId":"aaronxujiachen"},"content":"public class Storage {","lastModifiedDate":"2023-09-28"},{"lineNumber":14,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":15,"author":{"gitId":"aaronxujiachen"},"content":"    private final String filePath;","lastModifiedDate":"2023-09-28"},{"lineNumber":16,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":17,"author":{"gitId":"aaronxujiachen"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":18,"author":{"gitId":"aaronxujiachen"},"content":"     * Constructs a `Storage` instance with the specified file path.","lastModifiedDate":"2023-10-03"},{"lineNumber":19,"author":{"gitId":"aaronxujiachen"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":20,"author":{"gitId":"aaronxujiachen"},"content":"     * @param filePath The path to the file used for storing tasks.","lastModifiedDate":"2023-10-03"},{"lineNumber":21,"author":{"gitId":"aaronxujiachen"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":22,"author":{"gitId":"aaronxujiachen"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2023-09-28"},{"lineNumber":23,"author":{"gitId":"aaronxujiachen"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-09-28"},{"lineNumber":24,"author":{"gitId":"aaronxujiachen"},"content":"    }","lastModifiedDate":"2023-09-28"},{"lineNumber":25,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":26,"author":{"gitId":"aaronxujiachen"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":27,"author":{"gitId":"aaronxujiachen"},"content":"     * Checks if the directory and file specified by the file path exist. If they","lastModifiedDate":"2023-10-03"},{"lineNumber":28,"author":{"gitId":"aaronxujiachen"},"content":"     * don\u0027t exist, this method creates the necessary directory and file.","lastModifiedDate":"2023-10-03"},{"lineNumber":29,"author":{"gitId":"aaronxujiachen"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":30,"author":{"gitId":"aaronxujiachen"},"content":"    public void setupFile() {","lastModifiedDate":"2023-09-28"},{"lineNumber":31,"author":{"gitId":"aaronxujiachen"},"content":"        // Check if the directory exists, if not, create it","lastModifiedDate":"2023-09-28"},{"lineNumber":32,"author":{"gitId":"aaronxujiachen"},"content":"        File file \u003d new File(filePath);","lastModifiedDate":"2023-09-28"},{"lineNumber":33,"author":{"gitId":"aaronxujiachen"},"content":"        if (!file.getParentFile().exists()) {","lastModifiedDate":"2023-09-28"},{"lineNumber":34,"author":{"gitId":"aaronxujiachen"},"content":"            file.getParentFile().mkdirs();","lastModifiedDate":"2023-09-28"},{"lineNumber":35,"author":{"gitId":"aaronxujiachen"},"content":"        }","lastModifiedDate":"2023-09-28"},{"lineNumber":36,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":37,"author":{"gitId":"aaronxujiachen"},"content":"        // Check if the file exists, if not, create it","lastModifiedDate":"2023-09-28"},{"lineNumber":38,"author":{"gitId":"aaronxujiachen"},"content":"        if (!file.exists()) {","lastModifiedDate":"2023-09-28"},{"lineNumber":39,"author":{"gitId":"aaronxujiachen"},"content":"            try {","lastModifiedDate":"2023-09-28"},{"lineNumber":40,"author":{"gitId":"aaronxujiachen"},"content":"                file.createNewFile();","lastModifiedDate":"2023-09-28"},{"lineNumber":41,"author":{"gitId":"aaronxujiachen"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-09-28"},{"lineNumber":42,"author":{"gitId":"aaronxujiachen"},"content":"                System.out.println(\"Error creating file: \" + e.getMessage());","lastModifiedDate":"2023-09-28"},{"lineNumber":43,"author":{"gitId":"aaronxujiachen"},"content":"            }","lastModifiedDate":"2023-09-28"},{"lineNumber":44,"author":{"gitId":"aaronxujiachen"},"content":"        }","lastModifiedDate":"2023-09-28"},{"lineNumber":45,"author":{"gitId":"aaronxujiachen"},"content":"    }","lastModifiedDate":"2023-09-28"},{"lineNumber":46,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":47,"author":{"gitId":"aaronxujiachen"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":48,"author":{"gitId":"aaronxujiachen"},"content":"     * Loads tasks from the file specified by the file path and returns them as an","lastModifiedDate":"2023-10-03"},{"lineNumber":49,"author":{"gitId":"aaronxujiachen"},"content":"     * ArrayList of tasks.","lastModifiedDate":"2023-10-03"},{"lineNumber":50,"author":{"gitId":"aaronxujiachen"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":51,"author":{"gitId":"aaronxujiachen"},"content":"     * @return An ArrayList containing the tasks loaded from the file.","lastModifiedDate":"2023-10-03"},{"lineNumber":52,"author":{"gitId":"aaronxujiachen"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":53,"author":{"gitId":"aaronxujiachen"},"content":"    public ArrayList\u003cTask\u003e loadFromFile() {","lastModifiedDate":"2023-09-28"},{"lineNumber":54,"author":{"gitId":"aaronxujiachen"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-28"},{"lineNumber":55,"author":{"gitId":"aaronxujiachen"},"content":"        try {","lastModifiedDate":"2023-09-28"},{"lineNumber":56,"author":{"gitId":"aaronxujiachen"},"content":"            File file \u003d new File(filePath);","lastModifiedDate":"2023-09-28"},{"lineNumber":57,"author":{"gitId":"aaronxujiachen"},"content":"            Scanner fileReader \u003d new Scanner(file);","lastModifiedDate":"2023-09-28"},{"lineNumber":58,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":59,"author":{"gitId":"aaronxujiachen"},"content":"            while (fileReader.hasNextLine()) {","lastModifiedDate":"2023-09-28"},{"lineNumber":60,"author":{"gitId":"aaronxujiachen"},"content":"                String line \u003d fileReader.nextLine();","lastModifiedDate":"2023-09-28"},{"lineNumber":61,"author":{"gitId":"aaronxujiachen"},"content":"                char taskType \u003d line.charAt(0);","lastModifiedDate":"2023-09-28"},{"lineNumber":62,"author":{"gitId":"aaronxujiachen"},"content":"                switch (taskType) {","lastModifiedDate":"2023-09-28"},{"lineNumber":63,"author":{"gitId":"aaronxujiachen"},"content":"                case \u0027T\u0027:","lastModifiedDate":"2023-09-28"},{"lineNumber":64,"author":{"gitId":"aaronxujiachen"},"content":"                    tasks.add(Task.fromFileFormat(line));","lastModifiedDate":"2023-09-28"},{"lineNumber":65,"author":{"gitId":"aaronxujiachen"},"content":"                    break;","lastModifiedDate":"2023-09-28"},{"lineNumber":66,"author":{"gitId":"aaronxujiachen"},"content":"                case \u0027D\u0027:","lastModifiedDate":"2023-09-28"},{"lineNumber":67,"author":{"gitId":"aaronxujiachen"},"content":"                    tasks.add(Deadline.fromFileFormat(line));","lastModifiedDate":"2023-09-28"},{"lineNumber":68,"author":{"gitId":"aaronxujiachen"},"content":"                    break;","lastModifiedDate":"2023-09-28"},{"lineNumber":69,"author":{"gitId":"aaronxujiachen"},"content":"                case \u0027E\u0027:","lastModifiedDate":"2023-09-28"},{"lineNumber":70,"author":{"gitId":"aaronxujiachen"},"content":"                    tasks.add(Event.fromFileFormat(line));","lastModifiedDate":"2023-09-28"},{"lineNumber":71,"author":{"gitId":"aaronxujiachen"},"content":"                    break;","lastModifiedDate":"2023-09-28"},{"lineNumber":72,"author":{"gitId":"aaronxujiachen"},"content":"                }","lastModifiedDate":"2023-09-28"},{"lineNumber":73,"author":{"gitId":"aaronxujiachen"},"content":"            }","lastModifiedDate":"2023-09-28"},{"lineNumber":74,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":75,"author":{"gitId":"aaronxujiachen"},"content":"            fileReader.close();","lastModifiedDate":"2023-09-28"},{"lineNumber":76,"author":{"gitId":"aaronxujiachen"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-28"},{"lineNumber":77,"author":{"gitId":"aaronxujiachen"},"content":"            System.out.println(\"Error reading from file: \" + e.getMessage());","lastModifiedDate":"2023-09-28"},{"lineNumber":78,"author":{"gitId":"aaronxujiachen"},"content":"        }","lastModifiedDate":"2023-09-28"},{"lineNumber":79,"author":{"gitId":"aaronxujiachen"},"content":"        return tasks;","lastModifiedDate":"2023-09-28"},{"lineNumber":80,"author":{"gitId":"aaronxujiachen"},"content":"    }","lastModifiedDate":"2023-09-28"},{"lineNumber":81,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":82,"author":{"gitId":"aaronxujiachen"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":83,"author":{"gitId":"aaronxujiachen"},"content":"     * Saves the provided ArrayList of tasks to the file specified by the file","lastModifiedDate":"2023-10-03"},{"lineNumber":84,"author":{"gitId":"aaronxujiachen"},"content":"     * path. Each task is written to a separate line in the file.","lastModifiedDate":"2023-10-03"},{"lineNumber":85,"author":{"gitId":"aaronxujiachen"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":86,"author":{"gitId":"aaronxujiachen"},"content":"     * @param tasks The ArrayList of tasks to be saved to the file.","lastModifiedDate":"2023-10-03"},{"lineNumber":87,"author":{"gitId":"aaronxujiachen"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":88,"author":{"gitId":"aaronxujiachen"},"content":"    public void saveToFile(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-09-28"},{"lineNumber":89,"author":{"gitId":"aaronxujiachen"},"content":"        try {","lastModifiedDate":"2023-09-28"},{"lineNumber":90,"author":{"gitId":"aaronxujiachen"},"content":"            FileWriter fileWriter \u003d new FileWriter(filePath);","lastModifiedDate":"2023-09-28"},{"lineNumber":91,"author":{"gitId":"aaronxujiachen"},"content":"            for (Task task : tasks) {","lastModifiedDate":"2023-09-28"},{"lineNumber":92,"author":{"gitId":"aaronxujiachen"},"content":"                fileWriter.write(task.toFileFormat() + \"\\n\");","lastModifiedDate":"2023-09-28"},{"lineNumber":93,"author":{"gitId":"aaronxujiachen"},"content":"            }","lastModifiedDate":"2023-09-28"},{"lineNumber":94,"author":{"gitId":"aaronxujiachen"},"content":"            fileWriter.close();","lastModifiedDate":"2023-09-28"},{"lineNumber":95,"author":{"gitId":"aaronxujiachen"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-28"},{"lineNumber":96,"author":{"gitId":"aaronxujiachen"},"content":"            System.out.println(\"Error writing to file: \" + e.getMessage());","lastModifiedDate":"2023-09-28"},{"lineNumber":97,"author":{"gitId":"aaronxujiachen"},"content":"        }","lastModifiedDate":"2023-09-28"},{"lineNumber":98,"author":{"gitId":"aaronxujiachen"},"content":"    }","lastModifiedDate":"2023-09-28"},{"lineNumber":99,"author":{"gitId":"aaronxujiachen"},"content":"}","lastModifiedDate":"2023-09-28"}],"authorContributionMap":{"aaronxujiachen":99}},{"path":"src/dude/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronxujiachen"},"content":"package dude;","lastModifiedDate":"2023-09-16"},{"lineNumber":2,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":3,"author":{"gitId":"aaronxujiachen"},"content":"/**","lastModifiedDate":"2023-10-03"},{"lineNumber":4,"author":{"gitId":"aaronxujiachen"},"content":" * The `Task` class represents a generic task with a description and completion status.","lastModifiedDate":"2023-10-03"},{"lineNumber":5,"author":{"gitId":"aaronxujiachen"},"content":" * It serves as the base class for different types of tasks, such as deadlines and events.","lastModifiedDate":"2023-10-03"},{"lineNumber":6,"author":{"gitId":"aaronxujiachen"},"content":" */","lastModifiedDate":"2023-10-03"},{"lineNumber":7,"author":{"gitId":"aaronxujiachen"},"content":"public class Task {","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"aaronxujiachen"},"content":"    protected String description;","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"aaronxujiachen"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"aaronxujiachen"},"content":"    protected String type;","lastModifiedDate":"2023-09-09"},{"lineNumber":11,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"aaronxujiachen"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":13,"author":{"gitId":"aaronxujiachen"},"content":"     * Constructs a new generic task with the specified description.","lastModifiedDate":"2023-10-03"},{"lineNumber":14,"author":{"gitId":"aaronxujiachen"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":15,"author":{"gitId":"aaronxujiachen"},"content":"     * @param description The description of the task.","lastModifiedDate":"2023-10-03"},{"lineNumber":16,"author":{"gitId":"aaronxujiachen"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":17,"author":{"gitId":"aaronxujiachen"},"content":"    public Task(String description) {","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"aaronxujiachen"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"aaronxujiachen"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"aaronxujiachen"},"content":"        this.type \u003d \"[T]\"; // Represents a generic task.","lastModifiedDate":"2023-09-21"},{"lineNumber":21,"author":{"gitId":"aaronxujiachen"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":22,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":23,"author":{"gitId":"aaronxujiachen"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":24,"author":{"gitId":"aaronxujiachen"},"content":"     * Returns a string representing the completion status of the task.","lastModifiedDate":"2023-10-03"},{"lineNumber":25,"author":{"gitId":"aaronxujiachen"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":26,"author":{"gitId":"aaronxujiachen"},"content":"     * @return A string containing \"[X]\" if the task is completed, \"[ ]\" otherwise.","lastModifiedDate":"2023-10-03"},{"lineNumber":27,"author":{"gitId":"aaronxujiachen"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":28,"author":{"gitId":"aaronxujiachen"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-09-21"},{"lineNumber":29,"author":{"gitId":"aaronxujiachen"},"content":"        return (isDone ? \"[X]\" : \"[ ]\");","lastModifiedDate":"2023-09-21"},{"lineNumber":30,"author":{"gitId":"aaronxujiachen"},"content":"    }","lastModifiedDate":"2023-09-21"},{"lineNumber":31,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":32,"author":{"gitId":"aaronxujiachen"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":33,"author":{"gitId":"aaronxujiachen"},"content":"     * Retrieves the description of the task.","lastModifiedDate":"2023-10-03"},{"lineNumber":34,"author":{"gitId":"aaronxujiachen"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":35,"author":{"gitId":"aaronxujiachen"},"content":"     * @return The description of the task.","lastModifiedDate":"2023-10-03"},{"lineNumber":36,"author":{"gitId":"aaronxujiachen"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":37,"author":{"gitId":"aaronxujiachen"},"content":"    public String getDescription() {","lastModifiedDate":"2023-09-21"},{"lineNumber":38,"author":{"gitId":"aaronxujiachen"},"content":"        return description;","lastModifiedDate":"2023-09-21"},{"lineNumber":39,"author":{"gitId":"aaronxujiachen"},"content":"    }","lastModifiedDate":"2023-09-21"},{"lineNumber":40,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":41,"author":{"gitId":"aaronxujiachen"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":42,"author":{"gitId":"aaronxujiachen"},"content":"     * Sets the completion status of the task.","lastModifiedDate":"2023-10-03"},{"lineNumber":43,"author":{"gitId":"aaronxujiachen"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":44,"author":{"gitId":"aaronxujiachen"},"content":"     * @param isDone True if the task is completed, false otherwise.","lastModifiedDate":"2023-10-03"},{"lineNumber":45,"author":{"gitId":"aaronxujiachen"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":46,"author":{"gitId":"aaronxujiachen"},"content":"    public void setDone(boolean isDone) {","lastModifiedDate":"2023-09-28"},{"lineNumber":47,"author":{"gitId":"aaronxujiachen"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-09-28"},{"lineNumber":48,"author":{"gitId":"aaronxujiachen"},"content":"    }","lastModifiedDate":"2023-09-21"},{"lineNumber":49,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":50,"author":{"gitId":"aaronxujiachen"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":51,"author":{"gitId":"aaronxujiachen"},"content":"     * Converts the task to a formatted string for saving to a file.","lastModifiedDate":"2023-10-03"},{"lineNumber":52,"author":{"gitId":"aaronxujiachen"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":53,"author":{"gitId":"aaronxujiachen"},"content":"     * @return A string representation of the task in file format.","lastModifiedDate":"2023-10-03"},{"lineNumber":54,"author":{"gitId":"aaronxujiachen"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":55,"author":{"gitId":"aaronxujiachen"},"content":"    public String toFileFormat() {","lastModifiedDate":"2023-09-21"},{"lineNumber":56,"author":{"gitId":"aaronxujiachen"},"content":"        return type.charAt(1) + \" | \" + (isDone ? \"1\" : \"0\") + \" | \" + description;","lastModifiedDate":"2023-09-21"},{"lineNumber":57,"author":{"gitId":"aaronxujiachen"},"content":"    }","lastModifiedDate":"2023-09-21"},{"lineNumber":58,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":59,"author":{"gitId":"aaronxujiachen"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":60,"author":{"gitId":"aaronxujiachen"},"content":"     * Creates a `Task` object from a string in file format.","lastModifiedDate":"2023-10-03"},{"lineNumber":61,"author":{"gitId":"aaronxujiachen"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":62,"author":{"gitId":"aaronxujiachen"},"content":"     * @param fileString A string containing the task details in file format.","lastModifiedDate":"2023-10-03"},{"lineNumber":63,"author":{"gitId":"aaronxujiachen"},"content":"     * @return A `Task` object parsed from the file string.","lastModifiedDate":"2023-10-03"},{"lineNumber":64,"author":{"gitId":"aaronxujiachen"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":65,"author":{"gitId":"aaronxujiachen"},"content":"    public static Task fromFileFormat(String fileString) {","lastModifiedDate":"2023-09-21"},{"lineNumber":66,"author":{"gitId":"aaronxujiachen"},"content":"        String[] parts \u003d fileString.split(\"\\\\s\\\\|\\\\s\");","lastModifiedDate":"2023-09-21"},{"lineNumber":67,"author":{"gitId":"aaronxujiachen"},"content":"        Task task \u003d new Task(parts[2]);","lastModifiedDate":"2023-09-21"},{"lineNumber":68,"author":{"gitId":"aaronxujiachen"},"content":"        if (parts[1].equals(\"1\")) {","lastModifiedDate":"2023-09-21"},{"lineNumber":69,"author":{"gitId":"aaronxujiachen"},"content":"            task.setDone(true);","lastModifiedDate":"2023-09-28"},{"lineNumber":70,"author":{"gitId":"aaronxujiachen"},"content":"        }","lastModifiedDate":"2023-09-21"},{"lineNumber":71,"author":{"gitId":"aaronxujiachen"},"content":"        return task;","lastModifiedDate":"2023-09-21"},{"lineNumber":72,"author":{"gitId":"aaronxujiachen"},"content":"    }","lastModifiedDate":"2023-09-21"},{"lineNumber":73,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":74,"author":{"gitId":"aaronxujiachen"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":75,"author":{"gitId":"aaronxujiachen"},"content":"     * Generates a string representation of the task, including its type, completion status, and description.","lastModifiedDate":"2023-10-03"},{"lineNumber":76,"author":{"gitId":"aaronxujiachen"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":77,"author":{"gitId":"aaronxujiachen"},"content":"     * @return A string representing the task.","lastModifiedDate":"2023-10-03"},{"lineNumber":78,"author":{"gitId":"aaronxujiachen"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":79,"author":{"gitId":"aaronxujiachen"},"content":"    @Override","lastModifiedDate":"2023-09-09"},{"lineNumber":80,"author":{"gitId":"aaronxujiachen"},"content":"    public String toString() {","lastModifiedDate":"2023-09-09"},{"lineNumber":81,"author":{"gitId":"aaronxujiachen"},"content":"        return type + getStatusIcon() + \" \" + description;","lastModifiedDate":"2023-09-21"},{"lineNumber":82,"author":{"gitId":"aaronxujiachen"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":83,"author":{"gitId":"aaronxujiachen"},"content":"}","lastModifiedDate":"2023-09-09"}],"authorContributionMap":{"aaronxujiachen":83}},{"path":"src/dude/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronxujiachen"},"content":"package dude;","lastModifiedDate":"2023-09-28"},{"lineNumber":2,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":3,"author":{"gitId":"aaronxujiachen"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-28"},{"lineNumber":4,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":5,"author":{"gitId":"aaronxujiachen"},"content":"/**","lastModifiedDate":"2023-10-03"},{"lineNumber":6,"author":{"gitId":"aaronxujiachen"},"content":" * The `TaskList` class manages a list of tasks, providing operations to interact","lastModifiedDate":"2023-10-03"},{"lineNumber":7,"author":{"gitId":"aaronxujiachen"},"content":" * with the tasks such as listing, adding, marking, and deleting tasks.","lastModifiedDate":"2023-10-03"},{"lineNumber":8,"author":{"gitId":"aaronxujiachen"},"content":" */","lastModifiedDate":"2023-10-03"},{"lineNumber":9,"author":{"gitId":"aaronxujiachen"},"content":"public class TaskList {","lastModifiedDate":"2023-09-28"},{"lineNumber":10,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":11,"author":{"gitId":"aaronxujiachen"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2023-09-28"},{"lineNumber":12,"author":{"gitId":"aaronxujiachen"},"content":"    private Storage storage;","lastModifiedDate":"2023-09-28"},{"lineNumber":13,"author":{"gitId":"aaronxujiachen"},"content":"    private Ui ui;","lastModifiedDate":"2023-09-28"},{"lineNumber":14,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":15,"author":{"gitId":"aaronxujiachen"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":16,"author":{"gitId":"aaronxujiachen"},"content":"     * Constructs a `TaskList` instance with the given list of tasks, storage, and user interface.","lastModifiedDate":"2023-10-03"},{"lineNumber":17,"author":{"gitId":"aaronxujiachen"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":18,"author":{"gitId":"aaronxujiachen"},"content":"     * @param tasks   The ArrayList of tasks to manage.","lastModifiedDate":"2023-10-03"},{"lineNumber":19,"author":{"gitId":"aaronxujiachen"},"content":"     * @param storage The Storage instance for saving and loading tasks.","lastModifiedDate":"2023-10-03"},{"lineNumber":20,"author":{"gitId":"aaronxujiachen"},"content":"     * @param ui      The Ui instance for user interactions.","lastModifiedDate":"2023-10-03"},{"lineNumber":21,"author":{"gitId":"aaronxujiachen"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":22,"author":{"gitId":"aaronxujiachen"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks, Storage storage, Ui ui) {","lastModifiedDate":"2023-09-28"},{"lineNumber":23,"author":{"gitId":"aaronxujiachen"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2023-09-28"},{"lineNumber":24,"author":{"gitId":"aaronxujiachen"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2023-09-28"},{"lineNumber":25,"author":{"gitId":"aaronxujiachen"},"content":"        this.ui \u003d ui;","lastModifiedDate":"2023-09-28"},{"lineNumber":26,"author":{"gitId":"aaronxujiachen"},"content":"    }","lastModifiedDate":"2023-09-28"},{"lineNumber":27,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":28,"author":{"gitId":"aaronxujiachen"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":29,"author":{"gitId":"aaronxujiachen"},"content":"     * Lists all tasks in the task list. If the list is empty, a message indicating no","lastModifiedDate":"2023-10-03"},{"lineNumber":30,"author":{"gitId":"aaronxujiachen"},"content":"     * tasks are present is shown.","lastModifiedDate":"2023-10-03"},{"lineNumber":31,"author":{"gitId":"aaronxujiachen"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":32,"author":{"gitId":"aaronxujiachen"},"content":"    public void listTasks() {","lastModifiedDate":"2023-09-28"},{"lineNumber":33,"author":{"gitId":"aaronxujiachen"},"content":"        if (tasks.isEmpty()) {","lastModifiedDate":"2023-09-28"},{"lineNumber":34,"author":{"gitId":"aaronxujiachen"},"content":"            ui.showMessage(\"You have no tasks in your list!\");","lastModifiedDate":"2023-09-28"},{"lineNumber":35,"author":{"gitId":"aaronxujiachen"},"content":"        } else {","lastModifiedDate":"2023-09-28"},{"lineNumber":36,"author":{"gitId":"aaronxujiachen"},"content":"            ui.showTasks(tasks);","lastModifiedDate":"2023-09-28"},{"lineNumber":37,"author":{"gitId":"aaronxujiachen"},"content":"        }","lastModifiedDate":"2023-09-28"},{"lineNumber":38,"author":{"gitId":"aaronxujiachen"},"content":"    }","lastModifiedDate":"2023-09-28"},{"lineNumber":39,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":40,"author":{"gitId":"aaronxujiachen"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":41,"author":{"gitId":"aaronxujiachen"},"content":"     * Adds a todo task to the task list based on user input.","lastModifiedDate":"2023-10-03"},{"lineNumber":42,"author":{"gitId":"aaronxujiachen"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":43,"author":{"gitId":"aaronxujiachen"},"content":"     * @param input The input command specifying the todo task.","lastModifiedDate":"2023-10-03"},{"lineNumber":44,"author":{"gitId":"aaronxujiachen"},"content":"     * @throws DudeException If the input validation or task addition fails.","lastModifiedDate":"2023-10-03"},{"lineNumber":45,"author":{"gitId":"aaronxujiachen"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":46,"author":{"gitId":"aaronxujiachen"},"content":"    public void addTodoTask(String input) throws DudeException {","lastModifiedDate":"2023-09-28"},{"lineNumber":47,"author":{"gitId":"aaronxujiachen"},"content":"        validateInput(input, 5, \"☹ OOPS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2023-09-28"},{"lineNumber":48,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":49,"author":{"gitId":"aaronxujiachen"},"content":"        String taskDescription \u003d input.substring(5).trim();","lastModifiedDate":"2023-09-28"},{"lineNumber":50,"author":{"gitId":"aaronxujiachen"},"content":"        Task newTask \u003d new Task(taskDescription);","lastModifiedDate":"2023-09-28"},{"lineNumber":51,"author":{"gitId":"aaronxujiachen"},"content":"        tasks.add(newTask);","lastModifiedDate":"2023-09-28"},{"lineNumber":52,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":53,"author":{"gitId":"aaronxujiachen"},"content":"        ui.showAddedTask(newTask, tasks.size());","lastModifiedDate":"2023-09-28"},{"lineNumber":54,"author":{"gitId":"aaronxujiachen"},"content":"        storage.saveToFile(tasks);","lastModifiedDate":"2023-09-28"},{"lineNumber":55,"author":{"gitId":"aaronxujiachen"},"content":"    }","lastModifiedDate":"2023-09-28"},{"lineNumber":56,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":57,"author":{"gitId":"aaronxujiachen"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":58,"author":{"gitId":"aaronxujiachen"},"content":"     * Adds a deadline task to the task list based on user input.","lastModifiedDate":"2023-10-03"},{"lineNumber":59,"author":{"gitId":"aaronxujiachen"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":60,"author":{"gitId":"aaronxujiachen"},"content":"     * @param input The input command specifying the deadline task.","lastModifiedDate":"2023-10-03"},{"lineNumber":61,"author":{"gitId":"aaronxujiachen"},"content":"     * @throws DudeException If the input validation or task addition fails.","lastModifiedDate":"2023-10-03"},{"lineNumber":62,"author":{"gitId":"aaronxujiachen"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":63,"author":{"gitId":"aaronxujiachen"},"content":"    public void addDeadlineTask(String input) throws DudeException {","lastModifiedDate":"2023-09-28"},{"lineNumber":64,"author":{"gitId":"aaronxujiachen"},"content":"        validateInput(input, 9, \"☹ OOPS!!! The description of a deadline cannot be empty.\");","lastModifiedDate":"2023-09-28"},{"lineNumber":65,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":66,"author":{"gitId":"aaronxujiachen"},"content":"        int byIndex \u003d input.indexOf(\"/by\");","lastModifiedDate":"2023-09-28"},{"lineNumber":67,"author":{"gitId":"aaronxujiachen"},"content":"        if (byIndex \u003d\u003d -1) {","lastModifiedDate":"2023-09-28"},{"lineNumber":68,"author":{"gitId":"aaronxujiachen"},"content":"            throw new DudeException(\"☹ OOPS!!! Please specify a deadline using /by.\");","lastModifiedDate":"2023-09-28"},{"lineNumber":69,"author":{"gitId":"aaronxujiachen"},"content":"        }","lastModifiedDate":"2023-09-28"},{"lineNumber":70,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":71,"author":{"gitId":"aaronxujiachen"},"content":"        String taskDescription \u003d input.substring(9, byIndex).trim();","lastModifiedDate":"2023-09-28"},{"lineNumber":72,"author":{"gitId":"aaronxujiachen"},"content":"        String by \u003d input.substring(byIndex + 4).trim();","lastModifiedDate":"2023-09-28"},{"lineNumber":73,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":74,"author":{"gitId":"aaronxujiachen"},"content":"        Deadline newDeadline \u003d new Deadline(taskDescription, by);","lastModifiedDate":"2023-09-28"},{"lineNumber":75,"author":{"gitId":"aaronxujiachen"},"content":"        tasks.add(newDeadline);","lastModifiedDate":"2023-09-28"},{"lineNumber":76,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":77,"author":{"gitId":"aaronxujiachen"},"content":"        ui.showAddedTask(newDeadline, tasks.size());","lastModifiedDate":"2023-09-28"},{"lineNumber":78,"author":{"gitId":"aaronxujiachen"},"content":"        storage.saveToFile(tasks);","lastModifiedDate":"2023-09-28"},{"lineNumber":79,"author":{"gitId":"aaronxujiachen"},"content":"    }","lastModifiedDate":"2023-09-28"},{"lineNumber":80,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":81,"author":{"gitId":"aaronxujiachen"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":82,"author":{"gitId":"aaronxujiachen"},"content":"     * Adds an event task to the task list based on user input.","lastModifiedDate":"2023-10-03"},{"lineNumber":83,"author":{"gitId":"aaronxujiachen"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":84,"author":{"gitId":"aaronxujiachen"},"content":"     * @param input The input command specifying the event task.","lastModifiedDate":"2023-10-03"},{"lineNumber":85,"author":{"gitId":"aaronxujiachen"},"content":"     * @throws DudeException If the input validation or task addition fails.","lastModifiedDate":"2023-10-03"},{"lineNumber":86,"author":{"gitId":"aaronxujiachen"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":87,"author":{"gitId":"aaronxujiachen"},"content":"    public void addEventTask(String input) throws DudeException {","lastModifiedDate":"2023-09-28"},{"lineNumber":88,"author":{"gitId":"aaronxujiachen"},"content":"        validateInput(input, 6, \"☹ OOPS!!! The description of an event cannot be empty.\");","lastModifiedDate":"2023-09-28"},{"lineNumber":89,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":90,"author":{"gitId":"aaronxujiachen"},"content":"        int fromIndex \u003d input.indexOf(\"/from\");","lastModifiedDate":"2023-09-28"},{"lineNumber":91,"author":{"gitId":"aaronxujiachen"},"content":"        int toIndex \u003d input.indexOf(\"/to\");","lastModifiedDate":"2023-09-28"},{"lineNumber":92,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":93,"author":{"gitId":"aaronxujiachen"},"content":"        if (fromIndex \u003d\u003d -1 || toIndex \u003d\u003d -1) {","lastModifiedDate":"2023-09-28"},{"lineNumber":94,"author":{"gitId":"aaronxujiachen"},"content":"            throw new DudeException(\"☹ OOPS!!! Please specify event time using /from and /to.\");","lastModifiedDate":"2023-09-28"},{"lineNumber":95,"author":{"gitId":"aaronxujiachen"},"content":"        }","lastModifiedDate":"2023-09-28"},{"lineNumber":96,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":97,"author":{"gitId":"aaronxujiachen"},"content":"        String taskDescription \u003d input.substring(6, fromIndex).trim();","lastModifiedDate":"2023-09-28"},{"lineNumber":98,"author":{"gitId":"aaronxujiachen"},"content":"        String from \u003d input.substring(fromIndex + 6, toIndex).trim();","lastModifiedDate":"2023-09-28"},{"lineNumber":99,"author":{"gitId":"aaronxujiachen"},"content":"        String to \u003d input.substring(toIndex + 4).trim();","lastModifiedDate":"2023-09-28"},{"lineNumber":100,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":101,"author":{"gitId":"aaronxujiachen"},"content":"        Event newEvent \u003d new Event(taskDescription, from, to);","lastModifiedDate":"2023-09-28"},{"lineNumber":102,"author":{"gitId":"aaronxujiachen"},"content":"        tasks.add(newEvent);","lastModifiedDate":"2023-09-28"},{"lineNumber":103,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":104,"author":{"gitId":"aaronxujiachen"},"content":"        ui.showAddedTask(newEvent, tasks.size());","lastModifiedDate":"2023-09-28"},{"lineNumber":105,"author":{"gitId":"aaronxujiachen"},"content":"        storage.saveToFile(tasks);","lastModifiedDate":"2023-09-28"},{"lineNumber":106,"author":{"gitId":"aaronxujiachen"},"content":"    }","lastModifiedDate":"2023-09-28"},{"lineNumber":107,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":108,"author":{"gitId":"aaronxujiachen"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":109,"author":{"gitId":"aaronxujiachen"},"content":"     * Marks or unmarks a task as done based on user input.","lastModifiedDate":"2023-10-03"},{"lineNumber":110,"author":{"gitId":"aaronxujiachen"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":111,"author":{"gitId":"aaronxujiachen"},"content":"     * @param input The input command specifying the task to mark/unmark.","lastModifiedDate":"2023-10-03"},{"lineNumber":112,"author":{"gitId":"aaronxujiachen"},"content":"     * @param mark  True if the task should be marked as done, false if unmarked.","lastModifiedDate":"2023-10-03"},{"lineNumber":113,"author":{"gitId":"aaronxujiachen"},"content":"     * @throws DudeException If the input validation or task marking fails.","lastModifiedDate":"2023-10-03"},{"lineNumber":114,"author":{"gitId":"aaronxujiachen"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":115,"author":{"gitId":"aaronxujiachen"},"content":"    public void markOrUnmarkTask(String input, boolean mark) throws DudeException {","lastModifiedDate":"2023-09-28"},{"lineNumber":116,"author":{"gitId":"aaronxujiachen"},"content":"        int index \u003d parseTaskIndex(input);","lastModifiedDate":"2023-09-28"},{"lineNumber":117,"author":{"gitId":"aaronxujiachen"},"content":"        Task task \u003d tasks.get(index);","lastModifiedDate":"2023-09-28"},{"lineNumber":118,"author":{"gitId":"aaronxujiachen"},"content":"        task.setDone(mark);","lastModifiedDate":"2023-09-28"},{"lineNumber":119,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":120,"author":{"gitId":"aaronxujiachen"},"content":"        ui.showMarkedTask(task, mark);","lastModifiedDate":"2023-09-28"},{"lineNumber":121,"author":{"gitId":"aaronxujiachen"},"content":"        storage.saveToFile(tasks);","lastModifiedDate":"2023-09-28"},{"lineNumber":122,"author":{"gitId":"aaronxujiachen"},"content":"    }","lastModifiedDate":"2023-09-28"},{"lineNumber":123,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":124,"author":{"gitId":"aaronxujiachen"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":125,"author":{"gitId":"aaronxujiachen"},"content":"     * Deletes a task from the task list based on user input.","lastModifiedDate":"2023-10-03"},{"lineNumber":126,"author":{"gitId":"aaronxujiachen"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":127,"author":{"gitId":"aaronxujiachen"},"content":"     * @param input The input command specifying the task to delete.","lastModifiedDate":"2023-10-03"},{"lineNumber":128,"author":{"gitId":"aaronxujiachen"},"content":"     * @throws DudeException If the input validation or task deletion fails.","lastModifiedDate":"2023-10-03"},{"lineNumber":129,"author":{"gitId":"aaronxujiachen"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":130,"author":{"gitId":"aaronxujiachen"},"content":"    public void deleteTask(String input) throws DudeException {","lastModifiedDate":"2023-09-28"},{"lineNumber":131,"author":{"gitId":"aaronxujiachen"},"content":"        int index \u003d parseTaskIndex(input);","lastModifiedDate":"2023-09-28"},{"lineNumber":132,"author":{"gitId":"aaronxujiachen"},"content":"        Task removedTask \u003d tasks.remove(index);","lastModifiedDate":"2023-09-28"},{"lineNumber":133,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":134,"author":{"gitId":"aaronxujiachen"},"content":"        ui.showRemovedTask(removedTask, tasks.size());","lastModifiedDate":"2023-09-28"},{"lineNumber":135,"author":{"gitId":"aaronxujiachen"},"content":"        storage.saveToFile(tasks);","lastModifiedDate":"2023-09-28"},{"lineNumber":136,"author":{"gitId":"aaronxujiachen"},"content":"    }","lastModifiedDate":"2023-09-28"},{"lineNumber":137,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":138,"author":{"gitId":"aaronxujiachen"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":139,"author":{"gitId":"aaronxujiachen"},"content":"     * Parses the task index from user input and returns it.","lastModifiedDate":"2023-10-03"},{"lineNumber":140,"author":{"gitId":"aaronxujiachen"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":141,"author":{"gitId":"aaronxujiachen"},"content":"     * @param input The user input containing the task index.","lastModifiedDate":"2023-10-03"},{"lineNumber":142,"author":{"gitId":"aaronxujiachen"},"content":"     * @return The parsed task index.","lastModifiedDate":"2023-10-03"},{"lineNumber":143,"author":{"gitId":"aaronxujiachen"},"content":"     * @throws DudeException If the input format is invalid or the index is out of range.","lastModifiedDate":"2023-10-03"},{"lineNumber":144,"author":{"gitId":"aaronxujiachen"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":145,"author":{"gitId":"aaronxujiachen"},"content":"    private int parseTaskIndex(String input) throws DudeException {","lastModifiedDate":"2023-09-28"},{"lineNumber":146,"author":{"gitId":"aaronxujiachen"},"content":"        String[] arrOfInput \u003d input.split(\" \");","lastModifiedDate":"2023-09-28"},{"lineNumber":147,"author":{"gitId":"aaronxujiachen"},"content":"        if (arrOfInput.length \u003c 2) {","lastModifiedDate":"2023-09-28"},{"lineNumber":148,"author":{"gitId":"aaronxujiachen"},"content":"            throw new DudeException(\"Please specify the task index.\");","lastModifiedDate":"2023-09-28"},{"lineNumber":149,"author":{"gitId":"aaronxujiachen"},"content":"        }","lastModifiedDate":"2023-09-28"},{"lineNumber":150,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":151,"author":{"gitId":"aaronxujiachen"},"content":"        try {","lastModifiedDate":"2023-09-28"},{"lineNumber":152,"author":{"gitId":"aaronxujiachen"},"content":"            int index \u003d Integer.parseInt(arrOfInput[1]) - 1;","lastModifiedDate":"2023-09-28"},{"lineNumber":153,"author":{"gitId":"aaronxujiachen"},"content":"            if (index \u003c 0 || index \u003e\u003d tasks.size()) {","lastModifiedDate":"2023-09-28"},{"lineNumber":154,"author":{"gitId":"aaronxujiachen"},"content":"                throw new DudeException(\"Task index out of range.\");","lastModifiedDate":"2023-09-28"},{"lineNumber":155,"author":{"gitId":"aaronxujiachen"},"content":"            }","lastModifiedDate":"2023-09-28"},{"lineNumber":156,"author":{"gitId":"aaronxujiachen"},"content":"            return index;","lastModifiedDate":"2023-09-28"},{"lineNumber":157,"author":{"gitId":"aaronxujiachen"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-09-28"},{"lineNumber":158,"author":{"gitId":"aaronxujiachen"},"content":"            throw new DudeException(\"Invalid task index format.\");","lastModifiedDate":"2023-09-28"},{"lineNumber":159,"author":{"gitId":"aaronxujiachen"},"content":"        }","lastModifiedDate":"2023-09-28"},{"lineNumber":160,"author":{"gitId":"aaronxujiachen"},"content":"    }","lastModifiedDate":"2023-09-28"},{"lineNumber":161,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":162,"author":{"gitId":"aaronxujiachen"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":163,"author":{"gitId":"aaronxujiachen"},"content":"     * Validates the input against a minimum length and displays an error message if","lastModifiedDate":"2023-10-03"},{"lineNumber":164,"author":{"gitId":"aaronxujiachen"},"content":"     * the input is invalid.","lastModifiedDate":"2023-10-03"},{"lineNumber":165,"author":{"gitId":"aaronxujiachen"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":166,"author":{"gitId":"aaronxujiachen"},"content":"     * @param input        The input to validate.","lastModifiedDate":"2023-10-03"},{"lineNumber":167,"author":{"gitId":"aaronxujiachen"},"content":"     * @param minLength    The minimum length of the input.","lastModifiedDate":"2023-10-03"},{"lineNumber":168,"author":{"gitId":"aaronxujiachen"},"content":"     * @param errorMessage The error message to display if validation fails.","lastModifiedDate":"2023-10-03"},{"lineNumber":169,"author":{"gitId":"aaronxujiachen"},"content":"     * @throws DudeException If the input validation fails.","lastModifiedDate":"2023-10-03"},{"lineNumber":170,"author":{"gitId":"aaronxujiachen"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":171,"author":{"gitId":"aaronxujiachen"},"content":"    public ArrayList\u003cTask\u003e findTasksByKeyword(String keyword) {","lastModifiedDate":"2023-09-30"},{"lineNumber":172,"author":{"gitId":"aaronxujiachen"},"content":"        ArrayList\u003cTask\u003e matchingTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-30"},{"lineNumber":173,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-30"},{"lineNumber":174,"author":{"gitId":"aaronxujiachen"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2023-09-30"},{"lineNumber":175,"author":{"gitId":"aaronxujiachen"},"content":"            if (task.getDescription().toLowerCase().contains(keyword.toLowerCase())) {","lastModifiedDate":"2023-09-30"},{"lineNumber":176,"author":{"gitId":"aaronxujiachen"},"content":"                matchingTasks.add(task);","lastModifiedDate":"2023-09-30"},{"lineNumber":177,"author":{"gitId":"aaronxujiachen"},"content":"            }","lastModifiedDate":"2023-09-30"},{"lineNumber":178,"author":{"gitId":"aaronxujiachen"},"content":"        }","lastModifiedDate":"2023-09-30"},{"lineNumber":179,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-30"},{"lineNumber":180,"author":{"gitId":"aaronxujiachen"},"content":"        return matchingTasks;","lastModifiedDate":"2023-09-30"},{"lineNumber":181,"author":{"gitId":"aaronxujiachen"},"content":"    }","lastModifiedDate":"2023-09-30"},{"lineNumber":182,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-30"},{"lineNumber":183,"author":{"gitId":"aaronxujiachen"},"content":"    private void validateInput(String input, int minLength, String errorMessage) throws DudeException {","lastModifiedDate":"2023-09-28"},{"lineNumber":184,"author":{"gitId":"aaronxujiachen"},"content":"        if (input.length() \u003c\u003d minLength || input.substring(minLength).trim().isEmpty()) {","lastModifiedDate":"2023-09-28"},{"lineNumber":185,"author":{"gitId":"aaronxujiachen"},"content":"            throw new DudeException(errorMessage);","lastModifiedDate":"2023-09-28"},{"lineNumber":186,"author":{"gitId":"aaronxujiachen"},"content":"        }","lastModifiedDate":"2023-09-28"},{"lineNumber":187,"author":{"gitId":"aaronxujiachen"},"content":"    }","lastModifiedDate":"2023-09-28"},{"lineNumber":188,"author":{"gitId":"aaronxujiachen"},"content":"}","lastModifiedDate":"2023-09-28"}],"authorContributionMap":{"aaronxujiachen":188}},{"path":"src/dude/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronxujiachen"},"content":"package dude;","lastModifiedDate":"2023-09-28"},{"lineNumber":2,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":3,"author":{"gitId":"aaronxujiachen"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-28"},{"lineNumber":4,"author":{"gitId":"aaronxujiachen"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-09-28"},{"lineNumber":5,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":6,"author":{"gitId":"aaronxujiachen"},"content":"/**","lastModifiedDate":"2023-10-03"},{"lineNumber":7,"author":{"gitId":"aaronxujiachen"},"content":" * The `Ui` class handles user interface interactions, including displaying messages,","lastModifiedDate":"2023-10-03"},{"lineNumber":8,"author":{"gitId":"aaronxujiachen"},"content":" * reading user input, and formatting output for the Dude task manager.","lastModifiedDate":"2023-10-03"},{"lineNumber":9,"author":{"gitId":"aaronxujiachen"},"content":" */","lastModifiedDate":"2023-10-03"},{"lineNumber":10,"author":{"gitId":"aaronxujiachen"},"content":"public class Ui {","lastModifiedDate":"2023-09-28"},{"lineNumber":11,"author":{"gitId":"aaronxujiachen"},"content":"    private final Scanner scanner;","lastModifiedDate":"2023-09-28"},{"lineNumber":12,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":13,"author":{"gitId":"aaronxujiachen"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":14,"author":{"gitId":"aaronxujiachen"},"content":"     * Constructs a new `Ui` instance with a scanner for reading user input from the console.","lastModifiedDate":"2023-10-03"},{"lineNumber":15,"author":{"gitId":"aaronxujiachen"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":16,"author":{"gitId":"aaronxujiachen"},"content":"    public Ui() {","lastModifiedDate":"2023-09-28"},{"lineNumber":17,"author":{"gitId":"aaronxujiachen"},"content":"        this.scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-09-28"},{"lineNumber":18,"author":{"gitId":"aaronxujiachen"},"content":"    }","lastModifiedDate":"2023-09-28"},{"lineNumber":19,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":20,"author":{"gitId":"aaronxujiachen"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":21,"author":{"gitId":"aaronxujiachen"},"content":"     * Draws a horizontal line of underscores to visually separate sections of output.","lastModifiedDate":"2023-10-03"},{"lineNumber":22,"author":{"gitId":"aaronxujiachen"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":23,"author":{"gitId":"aaronxujiachen"},"content":"    public void drawLine() {","lastModifiedDate":"2023-09-28"},{"lineNumber":24,"author":{"gitId":"aaronxujiachen"},"content":"        for (int i \u003d 0; i \u003c 30; i++) {","lastModifiedDate":"2023-09-28"},{"lineNumber":25,"author":{"gitId":"aaronxujiachen"},"content":"            System.out.print(\"_\");","lastModifiedDate":"2023-09-28"},{"lineNumber":26,"author":{"gitId":"aaronxujiachen"},"content":"        }","lastModifiedDate":"2023-09-28"},{"lineNumber":27,"author":{"gitId":"aaronxujiachen"},"content":"        System.out.println();","lastModifiedDate":"2023-09-28"},{"lineNumber":28,"author":{"gitId":"aaronxujiachen"},"content":"    }","lastModifiedDate":"2023-09-28"},{"lineNumber":29,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":30,"author":{"gitId":"aaronxujiachen"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":31,"author":{"gitId":"aaronxujiachen"},"content":"     * Displays a greeting message and the Dude logo when the application starts.","lastModifiedDate":"2023-10-03"},{"lineNumber":32,"author":{"gitId":"aaronxujiachen"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":33,"author":{"gitId":"aaronxujiachen"},"content":"    public void showGreeting() {","lastModifiedDate":"2023-09-28"},{"lineNumber":34,"author":{"gitId":"aaronxujiachen"},"content":"        String logo \u003d \"###            #        \\n\"","lastModifiedDate":"2023-09-28"},{"lineNumber":35,"author":{"gitId":"aaronxujiachen"},"content":"                + \"#  #           #        \\n\"","lastModifiedDate":"2023-09-28"},{"lineNumber":36,"author":{"gitId":"aaronxujiachen"},"content":"                + \"#  #  #  #   ###   ##   \\n\"","lastModifiedDate":"2023-09-28"},{"lineNumber":37,"author":{"gitId":"aaronxujiachen"},"content":"                + \"#  #  #  #  #  #  # ##  \\n\"","lastModifiedDate":"2023-09-28"},{"lineNumber":38,"author":{"gitId":"aaronxujiachen"},"content":"                + \"#  #  #  #  #  #  ##    \\n\"","lastModifiedDate":"2023-09-28"},{"lineNumber":39,"author":{"gitId":"aaronxujiachen"},"content":"                + \"###    ###   ###   ##   \\n\";","lastModifiedDate":"2023-09-28"},{"lineNumber":40,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":41,"author":{"gitId":"aaronxujiachen"},"content":"        System.out.println(\"Hello from\\n\" + logo);","lastModifiedDate":"2023-09-28"},{"lineNumber":42,"author":{"gitId":"aaronxujiachen"},"content":"        drawLine();","lastModifiedDate":"2023-09-28"},{"lineNumber":43,"author":{"gitId":"aaronxujiachen"},"content":"        System.out.println(\"Hello! I\u0027m your best dude:)\");","lastModifiedDate":"2023-09-28"},{"lineNumber":44,"author":{"gitId":"aaronxujiachen"},"content":"        System.out.println(\"What can I do for you?\");","lastModifiedDate":"2023-09-28"},{"lineNumber":45,"author":{"gitId":"aaronxujiachen"},"content":"        drawLine();","lastModifiedDate":"2023-09-28"},{"lineNumber":46,"author":{"gitId":"aaronxujiachen"},"content":"    }","lastModifiedDate":"2023-09-28"},{"lineNumber":47,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":48,"author":{"gitId":"aaronxujiachen"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":49,"author":{"gitId":"aaronxujiachen"},"content":"     * Displays a farewell message when the user exits the application.","lastModifiedDate":"2023-10-03"},{"lineNumber":50,"author":{"gitId":"aaronxujiachen"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":51,"author":{"gitId":"aaronxujiachen"},"content":"    public void showFarewell() {","lastModifiedDate":"2023-09-28"},{"lineNumber":52,"author":{"gitId":"aaronxujiachen"},"content":"        drawLine();","lastModifiedDate":"2023-09-28"},{"lineNumber":53,"author":{"gitId":"aaronxujiachen"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-09-28"},{"lineNumber":54,"author":{"gitId":"aaronxujiachen"},"content":"        drawLine();","lastModifiedDate":"2023-09-28"},{"lineNumber":55,"author":{"gitId":"aaronxujiachen"},"content":"    }","lastModifiedDate":"2023-09-28"},{"lineNumber":56,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":57,"author":{"gitId":"aaronxujiachen"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":58,"author":{"gitId":"aaronxujiachen"},"content":"     * Displays a general message to the user with a horizontal line separator.","lastModifiedDate":"2023-10-03"},{"lineNumber":59,"author":{"gitId":"aaronxujiachen"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":60,"author":{"gitId":"aaronxujiachen"},"content":"     * @param message The message to display.","lastModifiedDate":"2023-10-03"},{"lineNumber":61,"author":{"gitId":"aaronxujiachen"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":62,"author":{"gitId":"aaronxujiachen"},"content":"    public void showMessage(String message) {","lastModifiedDate":"2023-09-28"},{"lineNumber":63,"author":{"gitId":"aaronxujiachen"},"content":"        drawLine();","lastModifiedDate":"2023-09-28"},{"lineNumber":64,"author":{"gitId":"aaronxujiachen"},"content":"        System.out.println(message);","lastModifiedDate":"2023-09-28"},{"lineNumber":65,"author":{"gitId":"aaronxujiachen"},"content":"        drawLine();","lastModifiedDate":"2023-09-28"},{"lineNumber":66,"author":{"gitId":"aaronxujiachen"},"content":"    }","lastModifiedDate":"2023-09-28"},{"lineNumber":67,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":68,"author":{"gitId":"aaronxujiachen"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":69,"author":{"gitId":"aaronxujiachen"},"content":"     * Displays an error message with an \"OOPS!!!\" prefix and a horizontal line separator.","lastModifiedDate":"2023-10-03"},{"lineNumber":70,"author":{"gitId":"aaronxujiachen"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":71,"author":{"gitId":"aaronxujiachen"},"content":"     * @param message The error message to display.","lastModifiedDate":"2023-10-03"},{"lineNumber":72,"author":{"gitId":"aaronxujiachen"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":73,"author":{"gitId":"aaronxujiachen"},"content":"    public void showError(String message) {","lastModifiedDate":"2023-09-28"},{"lineNumber":74,"author":{"gitId":"aaronxujiachen"},"content":"        drawLine();","lastModifiedDate":"2023-09-28"},{"lineNumber":75,"author":{"gitId":"aaronxujiachen"},"content":"        System.out.println(\"☹ OOPS!!! \" + message);","lastModifiedDate":"2023-09-28"},{"lineNumber":76,"author":{"gitId":"aaronxujiachen"},"content":"        drawLine();","lastModifiedDate":"2023-09-28"},{"lineNumber":77,"author":{"gitId":"aaronxujiachen"},"content":"    }","lastModifiedDate":"2023-09-28"},{"lineNumber":78,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":79,"author":{"gitId":"aaronxujiachen"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":80,"author":{"gitId":"aaronxujiachen"},"content":"     * Displays a list of tasks with their descriptions and numbers.","lastModifiedDate":"2023-10-03"},{"lineNumber":81,"author":{"gitId":"aaronxujiachen"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":82,"author":{"gitId":"aaronxujiachen"},"content":"     * @param tasks The list of tasks to display.","lastModifiedDate":"2023-10-03"},{"lineNumber":83,"author":{"gitId":"aaronxujiachen"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":84,"author":{"gitId":"aaronxujiachen"},"content":"    public void showTasks(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-09-28"},{"lineNumber":85,"author":{"gitId":"aaronxujiachen"},"content":"        drawLine();","lastModifiedDate":"2023-09-28"},{"lineNumber":86,"author":{"gitId":"aaronxujiachen"},"content":"        System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2023-09-28"},{"lineNumber":87,"author":{"gitId":"aaronxujiachen"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-09-28"},{"lineNumber":88,"author":{"gitId":"aaronxujiachen"},"content":"            System.out.println((i + 1) + \". \" + tasks.get(i));","lastModifiedDate":"2023-09-28"},{"lineNumber":89,"author":{"gitId":"aaronxujiachen"},"content":"        }","lastModifiedDate":"2023-09-28"},{"lineNumber":90,"author":{"gitId":"aaronxujiachen"},"content":"        drawLine();","lastModifiedDate":"2023-09-28"},{"lineNumber":91,"author":{"gitId":"aaronxujiachen"},"content":"    }","lastModifiedDate":"2023-09-28"},{"lineNumber":92,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":93,"author":{"gitId":"aaronxujiachen"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":94,"author":{"gitId":"aaronxujiachen"},"content":"     * Displays a message confirming the addition of a new task and the current total","lastModifiedDate":"2023-10-03"},{"lineNumber":95,"author":{"gitId":"aaronxujiachen"},"content":"     * number of tasks in the list.","lastModifiedDate":"2023-10-03"},{"lineNumber":96,"author":{"gitId":"aaronxujiachen"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":97,"author":{"gitId":"aaronxujiachen"},"content":"     * @param task      The task that was added.","lastModifiedDate":"2023-10-03"},{"lineNumber":98,"author":{"gitId":"aaronxujiachen"},"content":"     * @param taskCount The total number of tasks after adding the new task.","lastModifiedDate":"2023-10-03"},{"lineNumber":99,"author":{"gitId":"aaronxujiachen"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":100,"author":{"gitId":"aaronxujiachen"},"content":"    public void showAddedTask(Task task, int taskCount) {","lastModifiedDate":"2023-09-28"},{"lineNumber":101,"author":{"gitId":"aaronxujiachen"},"content":"        drawLine();","lastModifiedDate":"2023-09-28"},{"lineNumber":102,"author":{"gitId":"aaronxujiachen"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2023-09-28"},{"lineNumber":103,"author":{"gitId":"aaronxujiachen"},"content":"        System.out.println(\"  \" + task);","lastModifiedDate":"2023-09-28"},{"lineNumber":104,"author":{"gitId":"aaronxujiachen"},"content":"        System.out.println(\"Now you have \" + taskCount + (taskCount \u003d\u003d 1 ? \" task\" : \" tasks\") + \" in the list.\");","lastModifiedDate":"2023-09-28"},{"lineNumber":105,"author":{"gitId":"aaronxujiachen"},"content":"        drawLine();","lastModifiedDate":"2023-09-28"},{"lineNumber":106,"author":{"gitId":"aaronxujiachen"},"content":"    }","lastModifiedDate":"2023-09-28"},{"lineNumber":107,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":108,"author":{"gitId":"aaronxujiachen"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":109,"author":{"gitId":"aaronxujiachen"},"content":"     * Displays a message confirming the removal of a task and the current total","lastModifiedDate":"2023-10-03"},{"lineNumber":110,"author":{"gitId":"aaronxujiachen"},"content":"     * number of tasks in the list.","lastModifiedDate":"2023-10-03"},{"lineNumber":111,"author":{"gitId":"aaronxujiachen"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":112,"author":{"gitId":"aaronxujiachen"},"content":"     * @param task      The task that was removed.","lastModifiedDate":"2023-10-03"},{"lineNumber":113,"author":{"gitId":"aaronxujiachen"},"content":"     * @param taskCount The total number of tasks after removing the task.","lastModifiedDate":"2023-10-03"},{"lineNumber":114,"author":{"gitId":"aaronxujiachen"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":115,"author":{"gitId":"aaronxujiachen"},"content":"    public void showRemovedTask(Task task, int taskCount) {","lastModifiedDate":"2023-09-28"},{"lineNumber":116,"author":{"gitId":"aaronxujiachen"},"content":"        drawLine();","lastModifiedDate":"2023-09-28"},{"lineNumber":117,"author":{"gitId":"aaronxujiachen"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2023-09-28"},{"lineNumber":118,"author":{"gitId":"aaronxujiachen"},"content":"        System.out.println(\"  \" + task);","lastModifiedDate":"2023-09-28"},{"lineNumber":119,"author":{"gitId":"aaronxujiachen"},"content":"        System.out.println(\"Now you have \" + taskCount + (taskCount \u003d\u003d 1 ? \" task\" : \" tasks\") + \" in the list.\");","lastModifiedDate":"2023-09-28"},{"lineNumber":120,"author":{"gitId":"aaronxujiachen"},"content":"        drawLine();","lastModifiedDate":"2023-09-28"},{"lineNumber":121,"author":{"gitId":"aaronxujiachen"},"content":"    }","lastModifiedDate":"2023-09-28"},{"lineNumber":122,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":123,"author":{"gitId":"aaronxujiachen"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":124,"author":{"gitId":"aaronxujiachen"},"content":"     * Displays a message confirming the marking of a task as done or not done,","lastModifiedDate":"2023-10-03"},{"lineNumber":125,"author":{"gitId":"aaronxujiachen"},"content":"     * along with the task\u0027s status.","lastModifiedDate":"2023-10-03"},{"lineNumber":126,"author":{"gitId":"aaronxujiachen"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":127,"author":{"gitId":"aaronxujiachen"},"content":"     * @param task   The task that was marked.","lastModifiedDate":"2023-10-03"},{"lineNumber":128,"author":{"gitId":"aaronxujiachen"},"content":"     * @param isDone A boolean indicating whether the task is marked as done or not done.","lastModifiedDate":"2023-10-03"},{"lineNumber":129,"author":{"gitId":"aaronxujiachen"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":130,"author":{"gitId":"aaronxujiachen"},"content":"    public void showMarkedTask(Task task, boolean isDone) {","lastModifiedDate":"2023-09-28"},{"lineNumber":131,"author":{"gitId":"aaronxujiachen"},"content":"        drawLine();","lastModifiedDate":"2023-09-28"},{"lineNumber":132,"author":{"gitId":"aaronxujiachen"},"content":"        String message \u003d isDone ? \"Nice! I\u0027ve marked this task as done:\" : \"OK, I\u0027ve marked this task as not done yet:\";","lastModifiedDate":"2023-09-28"},{"lineNumber":133,"author":{"gitId":"aaronxujiachen"},"content":"        System.out.println(message);","lastModifiedDate":"2023-09-28"},{"lineNumber":134,"author":{"gitId":"aaronxujiachen"},"content":"        System.out.println(\"   \" + task);","lastModifiedDate":"2023-09-28"},{"lineNumber":135,"author":{"gitId":"aaronxujiachen"},"content":"        drawLine();","lastModifiedDate":"2023-09-28"},{"lineNumber":136,"author":{"gitId":"aaronxujiachen"},"content":"    }","lastModifiedDate":"2023-09-28"},{"lineNumber":137,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":138,"author":{"gitId":"aaronxujiachen"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":139,"author":{"gitId":"aaronxujiachen"},"content":"     * Reads a command entered by the user from the console and returns it as a string.","lastModifiedDate":"2023-10-03"},{"lineNumber":140,"author":{"gitId":"aaronxujiachen"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":141,"author":{"gitId":"aaronxujiachen"},"content":"     * @return The user\u0027s input command.","lastModifiedDate":"2023-10-03"},{"lineNumber":142,"author":{"gitId":"aaronxujiachen"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":143,"author":{"gitId":"aaronxujiachen"},"content":"    public void showFoundTasks(ArrayList\u003cTask\u003e matchingTasks) {","lastModifiedDate":"2023-09-30"},{"lineNumber":144,"author":{"gitId":"aaronxujiachen"},"content":"        drawLine();","lastModifiedDate":"2023-09-30"},{"lineNumber":145,"author":{"gitId":"aaronxujiachen"},"content":"        System.out.println(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2023-09-30"},{"lineNumber":146,"author":{"gitId":"aaronxujiachen"},"content":"        for (int i \u003d 0; i \u003c matchingTasks.size(); i++) {","lastModifiedDate":"2023-09-30"},{"lineNumber":147,"author":{"gitId":"aaronxujiachen"},"content":"            System.out.println((i + 1) + \". \" + matchingTasks.get(i));","lastModifiedDate":"2023-09-30"},{"lineNumber":148,"author":{"gitId":"aaronxujiachen"},"content":"        }","lastModifiedDate":"2023-09-30"},{"lineNumber":149,"author":{"gitId":"aaronxujiachen"},"content":"        drawLine();","lastModifiedDate":"2023-09-30"},{"lineNumber":150,"author":{"gitId":"aaronxujiachen"},"content":"    }","lastModifiedDate":"2023-09-30"},{"lineNumber":151,"author":{"gitId":"aaronxujiachen"},"content":"","lastModifiedDate":"2023-09-30"},{"lineNumber":152,"author":{"gitId":"aaronxujiachen"},"content":"    public String readCommand() {","lastModifiedDate":"2023-09-28"},{"lineNumber":153,"author":{"gitId":"aaronxujiachen"},"content":"        return scanner.nextLine();","lastModifiedDate":"2023-09-28"},{"lineNumber":154,"author":{"gitId":"aaronxujiachen"},"content":"    }","lastModifiedDate":"2023-09-28"},{"lineNumber":155,"author":{"gitId":"aaronxujiachen"},"content":"}","lastModifiedDate":"2023-09-28"}],"authorContributionMap":{"aaronxujiachen":155}}]
