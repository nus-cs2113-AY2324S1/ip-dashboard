[{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"SebasFok"},"content":"# SIMON User Guide","lastModifiedDate":"2023-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Features ","lastModifiedDate":"2019-07-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"SebasFok"},"content":"```","lastModifiedDate":"2023-10-05"},{"lineNumber":6,"author":{"gitId":"SebasFok"},"content":"Notes about the command format:","lastModifiedDate":"2023-10-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":8,"author":{"gitId":"SebasFok"},"content":"Words in UPPER_CASE are the parameters to be supplied by the user.","lastModifiedDate":"2023-10-05"},{"lineNumber":9,"author":{"gitId":"SebasFok"},"content":"e.g. in \u0027todo DESCRIPTION\u0027, DESCRIPTION is a parameter which can be used as \u0027todo read book\u0027.","lastModifiedDate":"2023-10-05"},{"lineNumber":10,"author":{"gitId":"SebasFok"},"content":"```","lastModifiedDate":"2023-10-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":12,"author":{"gitId":"SebasFok"},"content":"### Add todo task: `todo`","lastModifiedDate":"2023-10-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":14,"author":{"gitId":"SebasFok"},"content":"Adds a todo task to the task list.","lastModifiedDate":"2023-10-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":16,"author":{"gitId":"SebasFok"},"content":"Format: `todo DESCRIPTION`","lastModifiedDate":"2023-10-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":18,"author":{"gitId":"SebasFok"},"content":"### Add deadline task: `deadline`","lastModifiedDate":"2023-10-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":20,"author":{"gitId":"SebasFok"},"content":"Adds a deadline task to the task list.","lastModifiedDate":"2023-10-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":22,"author":{"gitId":"SebasFok"},"content":"Format: `deadline DESCRIPTION /by BY`","lastModifiedDate":"2023-10-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":24,"author":{"gitId":"SebasFok"},"content":"### Add event task: `event`","lastModifiedDate":"2023-10-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":26,"author":{"gitId":"SebasFok"},"content":"Adds an event task to the task list.","lastModifiedDate":"2023-10-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":28,"author":{"gitId":"SebasFok"},"content":"Format: `event DESCRIPTION /from FROM /to TO`","lastModifiedDate":"2023-10-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":30,"author":{"gitId":"SebasFok"},"content":"### View list: `list`","lastModifiedDate":"2023-10-05"},{"lineNumber":31,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":32,"author":{"gitId":"SebasFok"},"content":"View the current list of tasks.","lastModifiedDate":"2023-10-05"},{"lineNumber":33,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":34,"author":{"gitId":"SebasFok"},"content":"Format: `list`","lastModifiedDate":"2023-10-05"},{"lineNumber":35,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":36,"author":{"gitId":"SebasFok"},"content":"### Mark as Done: `mark`","lastModifiedDate":"2023-10-05"},{"lineNumber":37,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":38,"author":{"gitId":"SebasFok"},"content":"Marks a chosen task as done","lastModifiedDate":"2023-10-05"},{"lineNumber":39,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":40,"author":{"gitId":"SebasFok"},"content":"Format: `mark TASKNUMBER`","lastModifiedDate":"2023-10-05"},{"lineNumber":41,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":42,"author":{"gitId":"SebasFok"},"content":"### Unmark as Done: `unmark`","lastModifiedDate":"2023-10-05"},{"lineNumber":43,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":44,"author":{"gitId":"SebasFok"},"content":"Unmarks a chosen task as done","lastModifiedDate":"2023-10-05"},{"lineNumber":45,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":46,"author":{"gitId":"SebasFok"},"content":"Format: `unmark TASKNUMBER`","lastModifiedDate":"2023-10-05"},{"lineNumber":47,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":48,"author":{"gitId":"SebasFok"},"content":"### Delete task: `delete`","lastModifiedDate":"2023-10-05"},{"lineNumber":49,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":50,"author":{"gitId":"SebasFok"},"content":"Deletes a chosen task","lastModifiedDate":"2023-10-05"},{"lineNumber":51,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":52,"author":{"gitId":"SebasFok"},"content":"Format: `delete TASKNUMBER`","lastModifiedDate":"2023-10-05"},{"lineNumber":53,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":54,"author":{"gitId":"SebasFok"},"content":"### Find matching task: `find`","lastModifiedDate":"2023-10-05"},{"lineNumber":55,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":56,"author":{"gitId":"SebasFok"},"content":"Find tasks that contain a specific keyword","lastModifiedDate":"2023-10-05"},{"lineNumber":57,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":58,"author":{"gitId":"SebasFok"},"content":"Format: `find KEYWORD`","lastModifiedDate":"2023-10-05"},{"lineNumber":59,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":60,"author":{"gitId":"SebasFok"},"content":"### Close application: `bye`","lastModifiedDate":"2023-10-05"},{"lineNumber":61,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":62,"author":{"gitId":"SebasFok"},"content":"Closes the application","lastModifiedDate":"2023-10-05"},{"lineNumber":63,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":64,"author":{"gitId":"SebasFok"},"content":"Format: `bye`","lastModifiedDate":"2023-10-05"},{"lineNumber":65,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":66,"author":{"gitId":"SebasFok"},"content":"### Saving the data","lastModifiedDate":"2023-10-05"},{"lineNumber":67,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":68,"author":{"gitId":"SebasFok"},"content":"Simon\u0027s data is saved in the hard disk automatically after any command that changes the data. There is no need to ","lastModifiedDate":"2023-10-05"},{"lineNumber":69,"author":{"gitId":"SebasFok"},"content":"save manually.","lastModifiedDate":"2023-10-05"},{"lineNumber":70,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":71,"author":{"gitId":"SebasFok"},"content":"### Editing the data file","lastModifiedDate":"2023-10-05"},{"lineNumber":72,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":73,"author":{"gitId":"SebasFok"},"content":"Simon\u0027s data is saved automatically as a txt file `[JAR file location]/data/simon.txt`.  Advanced users are welcome to ","lastModifiedDate":"2023-10-05"},{"lineNumber":74,"author":{"gitId":"SebasFok"},"content":"update data directly by editing that data file.","lastModifiedDate":"2023-10-05"}],"authorContributionMap":{"SebasFok":60,"-":14}},{"path":"src/main/java/Simon.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SebasFok"},"content":"import UI.Ui;","lastModifiedDate":"2023-10-04"},{"lineNumber":2,"author":{"gitId":"SebasFok"},"content":"import data.Storage;","lastModifiedDate":"2023-10-04"},{"lineNumber":3,"author":{"gitId":"SebasFok"},"content":"import exception.*;","lastModifiedDate":"2023-09-23"},{"lineNumber":4,"author":{"gitId":"SebasFok"},"content":"import task.*;","lastModifiedDate":"2023-09-23"},{"lineNumber":5,"author":{"gitId":"SebasFok"},"content":"import commands.Parser;","lastModifiedDate":"2023-10-04"},{"lineNumber":6,"author":{"gitId":"SebasFok"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-09-20"},{"lineNumber":7,"author":{"gitId":"SebasFok"},"content":"import static data.Loader.readToList;","lastModifiedDate":"2023-10-04"},{"lineNumber":8,"author":{"gitId":"SebasFok"},"content":"import static data.SimonFilePath.simontxtFilePath;","lastModifiedDate":"2023-09-24"},{"lineNumber":9,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":10,"author":{"gitId":"SebasFok"},"content":"/**","lastModifiedDate":"2023-10-05"},{"lineNumber":11,"author":{"gitId":"SebasFok"},"content":" * Initialises the Simon application by introducing Storage, TaskList and Ui classes. Also loads the txt file containing","lastModifiedDate":"2023-10-05"},{"lineNumber":12,"author":{"gitId":"SebasFok"},"content":" * tasks and creates a new one if it does not exist.","lastModifiedDate":"2023-10-05"},{"lineNumber":13,"author":{"gitId":"SebasFok"},"content":" */","lastModifiedDate":"2023-10-05"},{"lineNumber":14,"author":{"gitId":"SebasFok"},"content":"public class Simon {","lastModifiedDate":"2023-10-04"},{"lineNumber":15,"author":{"gitId":"SebasFok"},"content":"    String userDirectory \u003d System.getProperty(\"user.dir\");","lastModifiedDate":"2023-09-24"},{"lineNumber":16,"author":{"gitId":"SebasFok"},"content":"    private final Storage storage;","lastModifiedDate":"2023-10-04"},{"lineNumber":17,"author":{"gitId":"SebasFok"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-10-04"},{"lineNumber":18,"author":{"gitId":"SebasFok"},"content":"    private final Ui ui;","lastModifiedDate":"2023-10-04"},{"lineNumber":19,"author":{"gitId":"SebasFok"},"content":"    public Simon(String filePath) {","lastModifiedDate":"2023-10-04"},{"lineNumber":20,"author":{"gitId":"SebasFok"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-10-04"},{"lineNumber":21,"author":{"gitId":"SebasFok"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2023-10-04"},{"lineNumber":22,"author":{"gitId":"SebasFok"},"content":"        try {","lastModifiedDate":"2023-10-04"},{"lineNumber":23,"author":{"gitId":"SebasFok"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2023-10-04"},{"lineNumber":24,"author":{"gitId":"SebasFok"},"content":"        } catch (SimonException e) {","lastModifiedDate":"2023-10-04"},{"lineNumber":25,"author":{"gitId":"SebasFok"},"content":"            ui.printMissingFileError();","lastModifiedDate":"2023-10-04"},{"lineNumber":26,"author":{"gitId":"SebasFok"},"content":"            storage.createSimonTxt(userDirectory);","lastModifiedDate":"2023-10-04"},{"lineNumber":27,"author":{"gitId":"SebasFok"},"content":"            tasks \u003d new TaskList(readToList(filePath));","lastModifiedDate":"2023-10-04"},{"lineNumber":28,"author":{"gitId":"SebasFok"},"content":"        }","lastModifiedDate":"2023-09-21"},{"lineNumber":29,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-10-04"},{"lineNumber":30,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":31,"author":{"gitId":"SebasFok"},"content":"    /**","lastModifiedDate":"2023-10-05"},{"lineNumber":32,"author":{"gitId":"SebasFok"},"content":"     * Runs the Simon application by taking in user input and parsing it.","lastModifiedDate":"2023-10-05"},{"lineNumber":33,"author":{"gitId":"SebasFok"},"content":"     */","lastModifiedDate":"2023-10-05"},{"lineNumber":34,"author":{"gitId":"SebasFok"},"content":"    public void run() {","lastModifiedDate":"2023-10-04"},{"lineNumber":35,"author":{"gitId":"SebasFok"},"content":"        String userInput \u003d \"\";","lastModifiedDate":"2023-10-04"},{"lineNumber":36,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":37,"author":{"gitId":"SebasFok"},"content":"        //Print out greeting when user starts the program.","lastModifiedDate":"2023-09-20"},{"lineNumber":38,"author":{"gitId":"SebasFok"},"content":"        ui.printGreeting();","lastModifiedDate":"2023-10-04"},{"lineNumber":39,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":40,"author":{"gitId":"SebasFok"},"content":"        //Take in user input","lastModifiedDate":"2023-09-20"},{"lineNumber":41,"author":{"gitId":"SebasFok"},"content":"        Scanner in \u003d new Scanner(System.in);","lastModifiedDate":"2023-09-20"},{"lineNumber":42,"author":{"gitId":"SebasFok"},"content":"        while (!userInput.equals(\"bye\")) {","lastModifiedDate":"2023-09-20"},{"lineNumber":43,"author":{"gitId":"SebasFok"},"content":"            userInput \u003d in.nextLine();","lastModifiedDate":"2023-09-20"},{"lineNumber":44,"author":{"gitId":"SebasFok"},"content":"            ui.printLine();","lastModifiedDate":"2023-10-04"},{"lineNumber":45,"author":{"gitId":"SebasFok"},"content":"            Parser.parse(userInput, tasks, ui, storage);","lastModifiedDate":"2023-10-04"},{"lineNumber":46,"author":{"gitId":"SebasFok"},"content":"            ui.printLine();","lastModifiedDate":"2023-10-04"},{"lineNumber":47,"author":{"gitId":"SebasFok"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":48,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":49,"author":{"gitId":"SebasFok"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-10-04"},{"lineNumber":50,"author":{"gitId":"SebasFok"},"content":"        new Simon(simontxtFilePath).run();","lastModifiedDate":"2023-10-04"},{"lineNumber":51,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":52,"author":{"gitId":"SebasFok"},"content":"}","lastModifiedDate":"2023-09-20"}],"authorContributionMap":{"SebasFok":52}},{"path":"src/main/java/UI/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SebasFok"},"content":"package UI;","lastModifiedDate":"2023-09-23"},{"lineNumber":2,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":3,"author":{"gitId":"SebasFok"},"content":"import task.Task;","lastModifiedDate":"2023-09-23"},{"lineNumber":4,"author":{"gitId":"SebasFok"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-21"},{"lineNumber":5,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":6,"author":{"gitId":"SebasFok"},"content":"public class Ui {","lastModifiedDate":"2023-10-04"},{"lineNumber":7,"author":{"gitId":"SebasFok"},"content":"    public static final String line \u003d \"____________________________________________________________\";","lastModifiedDate":"2023-09-20"},{"lineNumber":8,"author":{"gitId":"SebasFok"},"content":"    public static final String logo \u003d","lastModifiedDate":"2023-09-20"},{"lineNumber":9,"author":{"gitId":"SebasFok"},"content":"            \"\\t   _____ _____ __  __  ____  _   _ \\n\" +","lastModifiedDate":"2023-09-20"},{"lineNumber":10,"author":{"gitId":"SebasFok"},"content":"            \"\\t  / ____|_   _|  \\\\/  |/ __ \\\\| \\\\ | |\\n\" +","lastModifiedDate":"2023-09-20"},{"lineNumber":11,"author":{"gitId":"SebasFok"},"content":"            \"\\t | (___   | | | \\\\  / | |  | |  \\\\| |\\n\" +","lastModifiedDate":"2023-09-20"},{"lineNumber":12,"author":{"gitId":"SebasFok"},"content":"            \"\\t  \\\\___ \\\\  | | | |\\\\/| | |  | | . ` |\\n\" +","lastModifiedDate":"2023-09-20"},{"lineNumber":13,"author":{"gitId":"SebasFok"},"content":"            \"\\t  ____) |_| |_| |  | | |__| | |\\\\  |\\n\" +","lastModifiedDate":"2023-09-20"},{"lineNumber":14,"author":{"gitId":"SebasFok"},"content":"            \"\\t |_____/|_____|_|  |_|\\\\____/|_| \\\\_|\\n\" +","lastModifiedDate":"2023-09-20"},{"lineNumber":15,"author":{"gitId":"SebasFok"},"content":"            \"\\t                                   \\n\";","lastModifiedDate":"2023-09-20"},{"lineNumber":16,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":17,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":18,"author":{"gitId":"SebasFok"},"content":"    public void printLine() {","lastModifiedDate":"2023-10-04"},{"lineNumber":19,"author":{"gitId":"SebasFok"},"content":"        System.out.println(\"\\t\" + line);","lastModifiedDate":"2023-09-20"},{"lineNumber":20,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-10-04"},{"lineNumber":21,"author":{"gitId":"SebasFok"},"content":"    public void printGreeting() {","lastModifiedDate":"2023-10-04"},{"lineNumber":22,"author":{"gitId":"SebasFok"},"content":"        printLine();","lastModifiedDate":"2023-10-04"},{"lineNumber":23,"author":{"gitId":"SebasFok"},"content":"        System.out.println(\"\\t\" + \"Hello I\u0027m\\n\" + logo);","lastModifiedDate":"2023-09-20"},{"lineNumber":24,"author":{"gitId":"SebasFok"},"content":"        System.out.println(\"\\t\" + \"What can I do for you?\");","lastModifiedDate":"2023-09-20"},{"lineNumber":25,"author":{"gitId":"SebasFok"},"content":"        printLine();","lastModifiedDate":"2023-10-04"},{"lineNumber":26,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":27,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":28,"author":{"gitId":"SebasFok"},"content":"    public void  printUnknownInputMessage() {","lastModifiedDate":"2023-10-04"},{"lineNumber":29,"author":{"gitId":"SebasFok"},"content":"        System.out.println(\"\\t\" + \" ☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-09-20"},{"lineNumber":30,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":31,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":32,"author":{"gitId":"SebasFok"},"content":"    public void printFarewell() {","lastModifiedDate":"2023-10-04"},{"lineNumber":33,"author":{"gitId":"SebasFok"},"content":"        System.out.println(\"\\t\" + \"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-09-20"},{"lineNumber":34,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":35,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":36,"author":{"gitId":"SebasFok"},"content":"    /**","lastModifiedDate":"2023-10-05"},{"lineNumber":37,"author":{"gitId":"SebasFok"},"content":"     * Takes in an ArrayList of tasks and prints every task in the list","lastModifiedDate":"2023-10-05"},{"lineNumber":38,"author":{"gitId":"SebasFok"},"content":"     *","lastModifiedDate":"2023-10-05"},{"lineNumber":39,"author":{"gitId":"SebasFok"},"content":"     * @param tasks","lastModifiedDate":"2023-10-05"},{"lineNumber":40,"author":{"gitId":"SebasFok"},"content":"     */","lastModifiedDate":"2023-10-05"},{"lineNumber":41,"author":{"gitId":"SebasFok"},"content":"    public void printList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-10-04"},{"lineNumber":42,"author":{"gitId":"SebasFok"},"content":"        System.out.println(\"\\tHere are the tasks in your list:\");","lastModifiedDate":"2023-09-20"},{"lineNumber":43,"author":{"gitId":"SebasFok"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-10-04"},{"lineNumber":44,"author":{"gitId":"SebasFok"},"content":"            System.out.println(\"\\t\" + (i + 1) + \".\" + tasks.get(i));","lastModifiedDate":"2023-10-04"},{"lineNumber":45,"author":{"gitId":"SebasFok"},"content":"        }","lastModifiedDate":"2023-10-04"},{"lineNumber":46,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-10-04"},{"lineNumber":47,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":48,"author":{"gitId":"SebasFok"},"content":"    /**","lastModifiedDate":"2023-10-05"},{"lineNumber":49,"author":{"gitId":"SebasFok"},"content":"     * Takes in an ArrayList of matching tasks and prints every task in the list","lastModifiedDate":"2023-10-05"},{"lineNumber":50,"author":{"gitId":"SebasFok"},"content":"     *","lastModifiedDate":"2023-10-05"},{"lineNumber":51,"author":{"gitId":"SebasFok"},"content":"     * @param tasks","lastModifiedDate":"2023-10-05"},{"lineNumber":52,"author":{"gitId":"SebasFok"},"content":"     */","lastModifiedDate":"2023-10-05"},{"lineNumber":53,"author":{"gitId":"SebasFok"},"content":"    public void printMatchingList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-10-04"},{"lineNumber":54,"author":{"gitId":"SebasFok"},"content":"        System.out.println(\"\\tHere are the matching tasks in your list:\");","lastModifiedDate":"2023-10-04"},{"lineNumber":55,"author":{"gitId":"SebasFok"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-10-04"},{"lineNumber":56,"author":{"gitId":"SebasFok"},"content":"            System.out.println(\"\\t\" + (i + 1) + \".\" + tasks.get(i));","lastModifiedDate":"2023-09-21"},{"lineNumber":57,"author":{"gitId":"SebasFok"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":58,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":59,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":60,"author":{"gitId":"SebasFok"},"content":"    public void printAddTaskMessage(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-10-04"},{"lineNumber":61,"author":{"gitId":"SebasFok"},"content":"        System.out.println(\"\\t\" + \"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2023-09-20"},{"lineNumber":62,"author":{"gitId":"SebasFok"},"content":"        System.out.println(\"\\t  \" + tasks.get(Task.getNumberOfTask() - 1));","lastModifiedDate":"2023-09-21"},{"lineNumber":63,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":64,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":65,"author":{"gitId":"SebasFok"},"content":"    public void printNumberOfTasks(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-10-04"},{"lineNumber":66,"author":{"gitId":"SebasFok"},"content":"        System.out.println(\"\\tNow you have \" + Task.getNumberOfTask() + \" tasks in the list.\");","lastModifiedDate":"2023-09-20"},{"lineNumber":67,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":68,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":69,"author":{"gitId":"SebasFok"},"content":"    public void printMissingFileError() {","lastModifiedDate":"2023-10-04"},{"lineNumber":70,"author":{"gitId":"SebasFok"},"content":"        printLine();","lastModifiedDate":"2023-10-04"},{"lineNumber":71,"author":{"gitId":"SebasFok"},"content":"        System.out.println(\"\\tsimon.txt does not exist, creating simon.txt in \u0027data\u0027 folder\");","lastModifiedDate":"2023-10-04"},{"lineNumber":72,"author":{"gitId":"SebasFok"},"content":"        printLine();","lastModifiedDate":"2023-10-04"},{"lineNumber":73,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-10-04"},{"lineNumber":74,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":75,"author":{"gitId":"SebasFok"},"content":"    public void printMarkAsDone(Task task) {","lastModifiedDate":"2023-10-04"},{"lineNumber":76,"author":{"gitId":"SebasFok"},"content":"        System.out.println(\"\\tNice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2023-10-04"},{"lineNumber":77,"author":{"gitId":"SebasFok"},"content":"        System.out.println(\"\\t  [X] \" + task.getDescription());","lastModifiedDate":"2023-10-04"},{"lineNumber":78,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-10-04"},{"lineNumber":79,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":80,"author":{"gitId":"SebasFok"},"content":"    public void printUnmarkAsDone(Task task) {","lastModifiedDate":"2023-10-04"},{"lineNumber":81,"author":{"gitId":"SebasFok"},"content":"        System.out.println(\"\\tOkay, I\u0027ve marked this task as not done yet:\");","lastModifiedDate":"2023-10-04"},{"lineNumber":82,"author":{"gitId":"SebasFok"},"content":"        System.out.println(\"\\t  [ ] \" + task.getDescription());","lastModifiedDate":"2023-10-04"},{"lineNumber":83,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-10-04"},{"lineNumber":84,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":85,"author":{"gitId":"SebasFok"},"content":"    public void printDeleteTask(Task task) {","lastModifiedDate":"2023-10-04"},{"lineNumber":86,"author":{"gitId":"SebasFok"},"content":"        System.out.println(\"\\tNoted. I\u0027ve removed this task: \");","lastModifiedDate":"2023-10-04"},{"lineNumber":87,"author":{"gitId":"SebasFok"},"content":"        System.out.println(\"\\t  \" + task);","lastModifiedDate":"2023-10-04"},{"lineNumber":88,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-10-04"},{"lineNumber":89,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":90,"author":{"gitId":"SebasFok"},"content":"    public void printOutOfBoundsError(ArrayList\u003cTask\u003e task) {","lastModifiedDate":"2023-10-04"},{"lineNumber":91,"author":{"gitId":"SebasFok"},"content":"        System.out.println(\"\\tSorry! The task number inputted is out of bounds\");","lastModifiedDate":"2023-10-04"},{"lineNumber":92,"author":{"gitId":"SebasFok"},"content":"        System.out.println(\"\\tPlease key in a number from 1-\" + Task.getNumberOfTask());","lastModifiedDate":"2023-10-04"},{"lineNumber":93,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-10-04"},{"lineNumber":94,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":95,"author":{"gitId":"SebasFok"},"content":"    public void printEmptyDescriptionError(String task) {","lastModifiedDate":"2023-10-04"},{"lineNumber":96,"author":{"gitId":"SebasFok"},"content":"        System.out.println(\"\\t☹ OOPS!!! The description of \" + task + \" cannot be empty.\");","lastModifiedDate":"2023-10-04"},{"lineNumber":97,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-10-04"},{"lineNumber":98,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":99,"author":{"gitId":"SebasFok"},"content":"    public void printEventFormat() {","lastModifiedDate":"2023-10-04"},{"lineNumber":100,"author":{"gitId":"SebasFok"},"content":"        System.out.println(\"\\tPlease include when the time of your event in the following format:\");","lastModifiedDate":"2023-10-04"},{"lineNumber":101,"author":{"gitId":"SebasFok"},"content":"        System.out.println(\"\\tevent [description] /from [start time] /to [end time]\");","lastModifiedDate":"2023-10-04"},{"lineNumber":102,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-10-04"},{"lineNumber":103,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":104,"author":{"gitId":"SebasFok"},"content":"    public void printDeadlineFormat() {","lastModifiedDate":"2023-10-04"},{"lineNumber":105,"author":{"gitId":"SebasFok"},"content":"        System.out.println(\"\\tPlease include when the deadline of your task is in the following format:\");","lastModifiedDate":"2023-10-04"},{"lineNumber":106,"author":{"gitId":"SebasFok"},"content":"        System.out.println(\"\\tdeadline [description] /by [deadline]\");","lastModifiedDate":"2023-10-04"},{"lineNumber":107,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-10-04"},{"lineNumber":108,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":109,"author":{"gitId":"SebasFok"},"content":"    public void printNumberFormatError() {","lastModifiedDate":"2023-10-05"},{"lineNumber":110,"author":{"gitId":"SebasFok"},"content":"        System.out.println(\"\\tPlease type an integer to specify your task.\");","lastModifiedDate":"2023-10-05"},{"lineNumber":111,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-10-05"},{"lineNumber":112,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":113,"author":{"gitId":"SebasFok"},"content":"}","lastModifiedDate":"2023-09-20"}],"authorContributionMap":{"SebasFok":113}},{"path":"src/main/java/commands/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SebasFok"},"content":"package commands;","lastModifiedDate":"2023-10-04"},{"lineNumber":2,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":3,"author":{"gitId":"SebasFok"},"content":"import UI.Ui;","lastModifiedDate":"2023-10-04"},{"lineNumber":4,"author":{"gitId":"SebasFok"},"content":"import data.Storage;","lastModifiedDate":"2023-10-04"},{"lineNumber":5,"author":{"gitId":"SebasFok"},"content":"import exception.SimonException;","lastModifiedDate":"2023-10-04"},{"lineNumber":6,"author":{"gitId":"SebasFok"},"content":"import exception.SimonException2;","lastModifiedDate":"2023-10-04"},{"lineNumber":7,"author":{"gitId":"SebasFok"},"content":"import task.TaskList;","lastModifiedDate":"2023-10-04"},{"lineNumber":8,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":9,"author":{"gitId":"SebasFok"},"content":"/**","lastModifiedDate":"2023-10-05"},{"lineNumber":10,"author":{"gitId":"SebasFok"},"content":" * Class containing methods to make sense of the user command","lastModifiedDate":"2023-10-05"},{"lineNumber":11,"author":{"gitId":"SebasFok"},"content":" */","lastModifiedDate":"2023-10-05"},{"lineNumber":12,"author":{"gitId":"SebasFok"},"content":"public class Parser {","lastModifiedDate":"2023-10-04"},{"lineNumber":13,"author":{"gitId":"SebasFok"},"content":"    public Parser() {","lastModifiedDate":"2023-10-04"},{"lineNumber":14,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":15,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-10-04"},{"lineNumber":16,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":17,"author":{"gitId":"SebasFok"},"content":"    /**","lastModifiedDate":"2023-10-05"},{"lineNumber":18,"author":{"gitId":"SebasFok"},"content":"     * Takes in the user input from the command line and decides what the next course of","lastModifiedDate":"2023-10-05"},{"lineNumber":19,"author":{"gitId":"SebasFok"},"content":"     * action is based on certain key words","lastModifiedDate":"2023-10-05"},{"lineNumber":20,"author":{"gitId":"SebasFok"},"content":"     *","lastModifiedDate":"2023-10-05"},{"lineNumber":21,"author":{"gitId":"SebasFok"},"content":"     * @param userInput User input from command line","lastModifiedDate":"2023-10-05"},{"lineNumber":22,"author":{"gitId":"SebasFok"},"content":"     * @param tasks Contains the task list and its operations","lastModifiedDate":"2023-10-05"},{"lineNumber":23,"author":{"gitId":"SebasFok"},"content":"     * @param ui Deals with interactions with the user","lastModifiedDate":"2023-10-05"},{"lineNumber":24,"author":{"gitId":"SebasFok"},"content":"     * @param storage Deals with loading tasks from the file and saving tasks in the file","lastModifiedDate":"2023-10-05"},{"lineNumber":25,"author":{"gitId":"SebasFok"},"content":"     */","lastModifiedDate":"2023-10-05"},{"lineNumber":26,"author":{"gitId":"SebasFok"},"content":"    public static void parse(String userInput, TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-10-04"},{"lineNumber":27,"author":{"gitId":"SebasFok"},"content":"        String[] splitInputs \u003d userInput.split(\" \", 2);","lastModifiedDate":"2023-10-04"},{"lineNumber":28,"author":{"gitId":"SebasFok"},"content":"        switch (splitInputs[0]) {","lastModifiedDate":"2023-10-04"},{"lineNumber":29,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":30,"author":{"gitId":"SebasFok"},"content":"        case \"list\":","lastModifiedDate":"2023-10-04"},{"lineNumber":31,"author":{"gitId":"SebasFok"},"content":"            ui.printList(tasks.getTaskList());","lastModifiedDate":"2023-10-04"},{"lineNumber":32,"author":{"gitId":"SebasFok"},"content":"            break;","lastModifiedDate":"2023-10-04"},{"lineNumber":33,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":34,"author":{"gitId":"SebasFok"},"content":"        case \"find\":","lastModifiedDate":"2023-10-04"},{"lineNumber":35,"author":{"gitId":"SebasFok"},"content":"            try {","lastModifiedDate":"2023-10-04"},{"lineNumber":36,"author":{"gitId":"SebasFok"},"content":"                tasks.printMatchingTasks(splitInputs[1], ui);","lastModifiedDate":"2023-10-04"},{"lineNumber":37,"author":{"gitId":"SebasFok"},"content":"            } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-10-04"},{"lineNumber":38,"author":{"gitId":"SebasFok"},"content":"                ui.printEmptyDescriptionError(splitInputs[0]);","lastModifiedDate":"2023-10-04"},{"lineNumber":39,"author":{"gitId":"SebasFok"},"content":"            }","lastModifiedDate":"2023-10-04"},{"lineNumber":40,"author":{"gitId":"SebasFok"},"content":"            break;","lastModifiedDate":"2023-10-04"},{"lineNumber":41,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":42,"author":{"gitId":"SebasFok"},"content":"        case \"mark\":","lastModifiedDate":"2023-10-04"},{"lineNumber":43,"author":{"gitId":"SebasFok"},"content":"            try {","lastModifiedDate":"2023-10-05"},{"lineNumber":44,"author":{"gitId":"SebasFok"},"content":"                tasks.markTask(splitInputs[1], ui);","lastModifiedDate":"2023-10-04"},{"lineNumber":45,"author":{"gitId":"SebasFok"},"content":"                storage.markTask(splitInputs[1], tasks.getTaskList());","lastModifiedDate":"2023-10-04"},{"lineNumber":46,"author":{"gitId":"SebasFok"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2023-10-05"},{"lineNumber":47,"author":{"gitId":"SebasFok"},"content":"                ui.printNumberFormatError();","lastModifiedDate":"2023-10-05"},{"lineNumber":48,"author":{"gitId":"SebasFok"},"content":"            }","lastModifiedDate":"2023-10-05"},{"lineNumber":49,"author":{"gitId":"SebasFok"},"content":"            break;","lastModifiedDate":"2023-10-04"},{"lineNumber":50,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":51,"author":{"gitId":"SebasFok"},"content":"        case \"unmark\":","lastModifiedDate":"2023-10-04"},{"lineNumber":52,"author":{"gitId":"SebasFok"},"content":"            try {","lastModifiedDate":"2023-10-05"},{"lineNumber":53,"author":{"gitId":"SebasFok"},"content":"                tasks.unmarkTask(splitInputs[1], ui);","lastModifiedDate":"2023-10-04"},{"lineNumber":54,"author":{"gitId":"SebasFok"},"content":"                storage.unmarkTask(splitInputs[1], tasks.getTaskList());","lastModifiedDate":"2023-10-04"},{"lineNumber":55,"author":{"gitId":"SebasFok"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2023-10-05"},{"lineNumber":56,"author":{"gitId":"SebasFok"},"content":"                ui.printNumberFormatError();","lastModifiedDate":"2023-10-05"},{"lineNumber":57,"author":{"gitId":"SebasFok"},"content":"            }","lastModifiedDate":"2023-10-05"},{"lineNumber":58,"author":{"gitId":"SebasFok"},"content":"            break;","lastModifiedDate":"2023-10-04"},{"lineNumber":59,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":60,"author":{"gitId":"SebasFok"},"content":"        case \"delete\":","lastModifiedDate":"2023-10-04"},{"lineNumber":61,"author":{"gitId":"SebasFok"},"content":"            try {","lastModifiedDate":"2023-10-05"},{"lineNumber":62,"author":{"gitId":"SebasFok"},"content":"                tasks.deleteTask(splitInputs[1], ui);","lastModifiedDate":"2023-10-04"},{"lineNumber":63,"author":{"gitId":"SebasFok"},"content":"                storage.deleteTask(splitInputs[1], tasks.getTaskList());","lastModifiedDate":"2023-10-04"},{"lineNumber":64,"author":{"gitId":"SebasFok"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2023-10-05"},{"lineNumber":65,"author":{"gitId":"SebasFok"},"content":"                ui.printNumberFormatError();","lastModifiedDate":"2023-10-05"},{"lineNumber":66,"author":{"gitId":"SebasFok"},"content":"            }","lastModifiedDate":"2023-10-05"},{"lineNumber":67,"author":{"gitId":"SebasFok"},"content":"            break;","lastModifiedDate":"2023-10-04"},{"lineNumber":68,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":69,"author":{"gitId":"SebasFok"},"content":"        case \"todo\":","lastModifiedDate":"2023-10-04"},{"lineNumber":70,"author":{"gitId":"SebasFok"},"content":"            try {","lastModifiedDate":"2023-10-04"},{"lineNumber":71,"author":{"gitId":"SebasFok"},"content":"                tasks.addTodo(splitInputs[1], ui);","lastModifiedDate":"2023-10-04"},{"lineNumber":72,"author":{"gitId":"SebasFok"},"content":"                storage.addTodo(splitInputs[1], tasks.getTaskList());","lastModifiedDate":"2023-10-04"},{"lineNumber":73,"author":{"gitId":"SebasFok"},"content":"            } catch (IndexOutOfBoundsException | SimonException e) { //Empty description","lastModifiedDate":"2023-10-04"},{"lineNumber":74,"author":{"gitId":"SebasFok"},"content":"                ui.printEmptyDescriptionError(splitInputs[0]);","lastModifiedDate":"2023-10-04"},{"lineNumber":75,"author":{"gitId":"SebasFok"},"content":"            }","lastModifiedDate":"2023-10-04"},{"lineNumber":76,"author":{"gitId":"SebasFok"},"content":"            break;","lastModifiedDate":"2023-10-04"},{"lineNumber":77,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":78,"author":{"gitId":"SebasFok"},"content":"        case \"event\":","lastModifiedDate":"2023-10-04"},{"lineNumber":79,"author":{"gitId":"SebasFok"},"content":"            try {","lastModifiedDate":"2023-10-04"},{"lineNumber":80,"author":{"gitId":"SebasFok"},"content":"                tasks.addEvent(splitInputs[1], ui);","lastModifiedDate":"2023-10-04"},{"lineNumber":81,"author":{"gitId":"SebasFok"},"content":"                storage.addEvent(splitInputs[1], tasks.getTaskList());","lastModifiedDate":"2023-10-04"},{"lineNumber":82,"author":{"gitId":"SebasFok"},"content":"            } catch (IndexOutOfBoundsException | SimonException e) { //Empty description","lastModifiedDate":"2023-10-04"},{"lineNumber":83,"author":{"gitId":"SebasFok"},"content":"                ui.printEmptyDescriptionError(splitInputs[0]);","lastModifiedDate":"2023-10-04"},{"lineNumber":84,"author":{"gitId":"SebasFok"},"content":"            } catch (SimonException2 f) { //Wrong format","lastModifiedDate":"2023-10-04"},{"lineNumber":85,"author":{"gitId":"SebasFok"},"content":"                ui.printEventFormat();","lastModifiedDate":"2023-10-04"},{"lineNumber":86,"author":{"gitId":"SebasFok"},"content":"            }","lastModifiedDate":"2023-10-04"},{"lineNumber":87,"author":{"gitId":"SebasFok"},"content":"            break;","lastModifiedDate":"2023-10-04"},{"lineNumber":88,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":89,"author":{"gitId":"SebasFok"},"content":"        case \"deadline\":","lastModifiedDate":"2023-10-04"},{"lineNumber":90,"author":{"gitId":"SebasFok"},"content":"            try {","lastModifiedDate":"2023-10-04"},{"lineNumber":91,"author":{"gitId":"SebasFok"},"content":"                tasks.addDeadline(splitInputs[1], ui);","lastModifiedDate":"2023-10-04"},{"lineNumber":92,"author":{"gitId":"SebasFok"},"content":"                storage.addDeadline(splitInputs[1], tasks.getTaskList());","lastModifiedDate":"2023-10-05"},{"lineNumber":93,"author":{"gitId":"SebasFok"},"content":"            } catch (IndexOutOfBoundsException | SimonException e) { //Empty description","lastModifiedDate":"2023-10-04"},{"lineNumber":94,"author":{"gitId":"SebasFok"},"content":"                ui.printEmptyDescriptionError(splitInputs[0]);","lastModifiedDate":"2023-10-04"},{"lineNumber":95,"author":{"gitId":"SebasFok"},"content":"            } catch (SimonException2 f) { //Wrong format","lastModifiedDate":"2023-10-04"},{"lineNumber":96,"author":{"gitId":"SebasFok"},"content":"                ui.printDeadlineFormat();","lastModifiedDate":"2023-10-04"},{"lineNumber":97,"author":{"gitId":"SebasFok"},"content":"            }","lastModifiedDate":"2023-10-04"},{"lineNumber":98,"author":{"gitId":"SebasFok"},"content":"            break;","lastModifiedDate":"2023-10-04"},{"lineNumber":99,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":100,"author":{"gitId":"SebasFok"},"content":"        case \"bye\":","lastModifiedDate":"2023-10-04"},{"lineNumber":101,"author":{"gitId":"SebasFok"},"content":"            ui.printFarewell();","lastModifiedDate":"2023-10-04"},{"lineNumber":102,"author":{"gitId":"SebasFok"},"content":"            break;","lastModifiedDate":"2023-10-04"},{"lineNumber":103,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":104,"author":{"gitId":"SebasFok"},"content":"        default:","lastModifiedDate":"2023-10-04"},{"lineNumber":105,"author":{"gitId":"SebasFok"},"content":"            //If unable to understand user input","lastModifiedDate":"2023-10-04"},{"lineNumber":106,"author":{"gitId":"SebasFok"},"content":"            ui.printUnknownInputMessage();","lastModifiedDate":"2023-10-04"},{"lineNumber":107,"author":{"gitId":"SebasFok"},"content":"        }","lastModifiedDate":"2023-10-04"},{"lineNumber":108,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-10-04"},{"lineNumber":109,"author":{"gitId":"SebasFok"},"content":"}","lastModifiedDate":"2023-10-04"}],"authorContributionMap":{"SebasFok":109}},{"path":"src/main/java/data/DataMethods.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SebasFok"},"content":"package data;","lastModifiedDate":"2023-09-25"},{"lineNumber":2,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":3,"author":{"gitId":"SebasFok"},"content":"import java.io.*;","lastModifiedDate":"2023-09-24"},{"lineNumber":4,"author":{"gitId":"SebasFok"},"content":"import java.nio.file.*;","lastModifiedDate":"2023-09-21"},{"lineNumber":5,"author":{"gitId":"SebasFok"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-22"},{"lineNumber":6,"author":{"gitId":"SebasFok"},"content":"import java.util.List;","lastModifiedDate":"2023-09-22"},{"lineNumber":7,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":8,"author":{"gitId":"SebasFok"},"content":"/**","lastModifiedDate":"2023-10-05"},{"lineNumber":9,"author":{"gitId":"SebasFok"},"content":" * Class containing methods that handle data e.g. creating files and editing files","lastModifiedDate":"2023-10-05"},{"lineNumber":10,"author":{"gitId":"SebasFok"},"content":" */","lastModifiedDate":"2023-10-05"},{"lineNumber":11,"author":{"gitId":"SebasFok"},"content":"public class DataMethods {","lastModifiedDate":"2023-09-25"},{"lineNumber":12,"author":{"gitId":"SebasFok"},"content":"    /**","lastModifiedDate":"2023-10-05"},{"lineNumber":13,"author":{"gitId":"SebasFok"},"content":"     * This method takes in a path and creates a directory at that location. Should the","lastModifiedDate":"2023-10-05"},{"lineNumber":14,"author":{"gitId":"SebasFok"},"content":"     * directory already exist, no new directory will be created.","lastModifiedDate":"2023-10-05"},{"lineNumber":15,"author":{"gitId":"SebasFok"},"content":"     *","lastModifiedDate":"2023-10-05"},{"lineNumber":16,"author":{"gitId":"SebasFok"},"content":"     * @param folderPath the location of where the directory should be created","lastModifiedDate":"2023-10-05"},{"lineNumber":17,"author":{"gitId":"SebasFok"},"content":"     */","lastModifiedDate":"2023-10-05"},{"lineNumber":18,"author":{"gitId":"SebasFok"},"content":"    public static void createDirectory(String folderPath) {","lastModifiedDate":"2023-09-24"},{"lineNumber":19,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-24"},{"lineNumber":20,"author":{"gitId":"SebasFok"},"content":"        File folder \u003d new File(folderPath);","lastModifiedDate":"2023-09-24"},{"lineNumber":21,"author":{"gitId":"SebasFok"},"content":"        if (folder.mkdir()) {","lastModifiedDate":"2023-09-24"},{"lineNumber":22,"author":{"gitId":"SebasFok"},"content":"            System.out.println(\"\\tFolder created successfully.\");","lastModifiedDate":"2023-09-25"},{"lineNumber":23,"author":{"gitId":"SebasFok"},"content":"        } else {","lastModifiedDate":"2023-09-24"},{"lineNumber":24,"author":{"gitId":"SebasFok"},"content":"            System.out.println(\"\\tFolder already exists\");","lastModifiedDate":"2023-09-25"},{"lineNumber":25,"author":{"gitId":"SebasFok"},"content":"        }","lastModifiedDate":"2023-09-24"},{"lineNumber":26,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-09-24"},{"lineNumber":27,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-25"},{"lineNumber":28,"author":{"gitId":"SebasFok"},"content":"    /**","lastModifiedDate":"2023-10-05"},{"lineNumber":29,"author":{"gitId":"SebasFok"},"content":"     * This method takes in the path of a directory and creates a file \u0027fileName\u0027 in","lastModifiedDate":"2023-10-05"},{"lineNumber":30,"author":{"gitId":"SebasFok"},"content":"     * the directory. Should the file already exist, no new file will be created.","lastModifiedDate":"2023-10-05"},{"lineNumber":31,"author":{"gitId":"SebasFok"},"content":"     *","lastModifiedDate":"2023-10-05"},{"lineNumber":32,"author":{"gitId":"SebasFok"},"content":"     * @param directoryPath the location of the directory where the file should be created","lastModifiedDate":"2023-10-05"},{"lineNumber":33,"author":{"gitId":"SebasFok"},"content":"     * @param fileName the name of the file to be created","lastModifiedDate":"2023-10-05"},{"lineNumber":34,"author":{"gitId":"SebasFok"},"content":"     */","lastModifiedDate":"2023-10-05"},{"lineNumber":35,"author":{"gitId":"SebasFok"},"content":"    public static void createFileInDirectory(String directoryPath, String fileName) {","lastModifiedDate":"2023-09-24"},{"lineNumber":36,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-24"},{"lineNumber":37,"author":{"gitId":"SebasFok"},"content":"        // Create the full path to the text file","lastModifiedDate":"2023-09-24"},{"lineNumber":38,"author":{"gitId":"SebasFok"},"content":"        String filePath \u003d directoryPath + \"/\" + fileName;","lastModifiedDate":"2023-09-24"},{"lineNumber":39,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-24"},{"lineNumber":40,"author":{"gitId":"SebasFok"},"content":"        File file \u003d new File(filePath);","lastModifiedDate":"2023-09-25"},{"lineNumber":41,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-24"},{"lineNumber":42,"author":{"gitId":"SebasFok"},"content":"        try {","lastModifiedDate":"2023-09-25"},{"lineNumber":43,"author":{"gitId":"SebasFok"},"content":"            // Create the file","lastModifiedDate":"2023-09-25"},{"lineNumber":44,"author":{"gitId":"SebasFok"},"content":"            if (file.createNewFile()) {","lastModifiedDate":"2023-09-25"},{"lineNumber":45,"author":{"gitId":"SebasFok"},"content":"                System.out.println(\"\\tText file created successfully at: \" + filePath);","lastModifiedDate":"2023-09-25"},{"lineNumber":46,"author":{"gitId":"SebasFok"},"content":"            } else {","lastModifiedDate":"2023-09-25"},{"lineNumber":47,"author":{"gitId":"SebasFok"},"content":"                System.out.println(\"\\tFile already exists.\");","lastModifiedDate":"2023-09-25"},{"lineNumber":48,"author":{"gitId":"SebasFok"},"content":"            }","lastModifiedDate":"2023-09-25"},{"lineNumber":49,"author":{"gitId":"SebasFok"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-24"},{"lineNumber":50,"author":{"gitId":"SebasFok"},"content":"            System.out.println(\"\\tAn IOException occurred: \" + e.getMessage());","lastModifiedDate":"2023-09-25"},{"lineNumber":51,"author":{"gitId":"SebasFok"},"content":"        }","lastModifiedDate":"2023-09-24"},{"lineNumber":52,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-09-24"},{"lineNumber":53,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-25"},{"lineNumber":54,"author":{"gitId":"SebasFok"},"content":"    /**","lastModifiedDate":"2023-10-05"},{"lineNumber":55,"author":{"gitId":"SebasFok"},"content":"     * This method takes in the path of a txt file and adds \u0027textToAdd\u0027 to the last line","lastModifiedDate":"2023-10-05"},{"lineNumber":56,"author":{"gitId":"SebasFok"},"content":"     * of the file","lastModifiedDate":"2023-10-05"},{"lineNumber":57,"author":{"gitId":"SebasFok"},"content":"     *","lastModifiedDate":"2023-10-05"},{"lineNumber":58,"author":{"gitId":"SebasFok"},"content":"     * @param filePath location of the file to be edited","lastModifiedDate":"2023-10-05"},{"lineNumber":59,"author":{"gitId":"SebasFok"},"content":"     * @param textToAdd String to be added to the end of the txt file","lastModifiedDate":"2023-10-05"},{"lineNumber":60,"author":{"gitId":"SebasFok"},"content":"     */","lastModifiedDate":"2023-10-05"},{"lineNumber":61,"author":{"gitId":"SebasFok"},"content":"    public static void addTextToFile(String filePath, String textToAdd) {","lastModifiedDate":"2023-09-21"},{"lineNumber":62,"author":{"gitId":"SebasFok"},"content":"        try {","lastModifiedDate":"2023-09-21"},{"lineNumber":63,"author":{"gitId":"SebasFok"},"content":"            // Create a FileWriter object with the specified file path in append mode (true).","lastModifiedDate":"2023-09-21"},{"lineNumber":64,"author":{"gitId":"SebasFok"},"content":"            FileWriter fileWriter \u003d new FileWriter(filePath, true);","lastModifiedDate":"2023-09-21"},{"lineNumber":65,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":66,"author":{"gitId":"SebasFok"},"content":"            // Create a BufferedWriter to efficiently write text.","lastModifiedDate":"2023-09-21"},{"lineNumber":67,"author":{"gitId":"SebasFok"},"content":"            BufferedWriter bufferedWriter \u003d new BufferedWriter(fileWriter);","lastModifiedDate":"2023-09-21"},{"lineNumber":68,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":69,"author":{"gitId":"SebasFok"},"content":"            // Write the text to the file.","lastModifiedDate":"2023-09-21"},{"lineNumber":70,"author":{"gitId":"SebasFok"},"content":"            bufferedWriter.write(textToAdd);","lastModifiedDate":"2023-09-21"},{"lineNumber":71,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":72,"author":{"gitId":"SebasFok"},"content":"            // Write a newline character to separate lines.","lastModifiedDate":"2023-09-21"},{"lineNumber":73,"author":{"gitId":"SebasFok"},"content":"            bufferedWriter.newLine();","lastModifiedDate":"2023-09-21"},{"lineNumber":74,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":75,"author":{"gitId":"SebasFok"},"content":"            // Close the BufferedWriter to release resources.","lastModifiedDate":"2023-09-21"},{"lineNumber":76,"author":{"gitId":"SebasFok"},"content":"            bufferedWriter.close();","lastModifiedDate":"2023-09-21"},{"lineNumber":77,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":78,"author":{"gitId":"SebasFok"},"content":"            //System.out.println(\"Text added to the file successfully.\");","lastModifiedDate":"2023-09-21"},{"lineNumber":79,"author":{"gitId":"SebasFok"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-21"},{"lineNumber":80,"author":{"gitId":"SebasFok"},"content":"            System.out.println(\"An IOException occurred: \" + e.getMessage());","lastModifiedDate":"2023-09-25"},{"lineNumber":81,"author":{"gitId":"SebasFok"},"content":"        }","lastModifiedDate":"2023-09-21"},{"lineNumber":82,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-09-21"},{"lineNumber":83,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":84,"author":{"gitId":"SebasFok"},"content":"    /**","lastModifiedDate":"2023-10-05"},{"lineNumber":85,"author":{"gitId":"SebasFok"},"content":"     * This method takes in the path to a txt file and replaces a specific line of the","lastModifiedDate":"2023-10-05"},{"lineNumber":86,"author":{"gitId":"SebasFok"},"content":"     * txt file with \u0027newText\u0027","lastModifiedDate":"2023-10-05"},{"lineNumber":87,"author":{"gitId":"SebasFok"},"content":"     *","lastModifiedDate":"2023-10-05"},{"lineNumber":88,"author":{"gitId":"SebasFok"},"content":"     * @param filePath location of the file to be edited","lastModifiedDate":"2023-10-05"},{"lineNumber":89,"author":{"gitId":"SebasFok"},"content":"     * @param newText String to replace a line of text","lastModifiedDate":"2023-10-05"},{"lineNumber":90,"author":{"gitId":"SebasFok"},"content":"     * @param lineNumber line number of text to be replaced","lastModifiedDate":"2023-10-05"},{"lineNumber":91,"author":{"gitId":"SebasFok"},"content":"     */","lastModifiedDate":"2023-10-05"},{"lineNumber":92,"author":{"gitId":"SebasFok"},"content":"    public static void editTextFile(String filePath, String newText, int lineNumber) {","lastModifiedDate":"2023-09-21"},{"lineNumber":93,"author":{"gitId":"SebasFok"},"content":"        try {","lastModifiedDate":"2023-09-21"},{"lineNumber":94,"author":{"gitId":"SebasFok"},"content":"            // Read the existing content of the file into memory.","lastModifiedDate":"2023-09-21"},{"lineNumber":95,"author":{"gitId":"SebasFok"},"content":"            FileReader fileReader \u003d new FileReader(filePath);","lastModifiedDate":"2023-09-21"},{"lineNumber":96,"author":{"gitId":"SebasFok"},"content":"            BufferedReader bufferedReader \u003d new BufferedReader(fileReader);","lastModifiedDate":"2023-09-21"},{"lineNumber":97,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":98,"author":{"gitId":"SebasFok"},"content":"            StringBuilder fileContent \u003d new StringBuilder();","lastModifiedDate":"2023-09-21"},{"lineNumber":99,"author":{"gitId":"SebasFok"},"content":"            String line;","lastModifiedDate":"2023-09-21"},{"lineNumber":100,"author":{"gitId":"SebasFok"},"content":"            int currentLine \u003d 1;","lastModifiedDate":"2023-09-21"},{"lineNumber":101,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":102,"author":{"gitId":"SebasFok"},"content":"            while ((line \u003d bufferedReader.readLine()) !\u003d null) {","lastModifiedDate":"2023-09-21"},{"lineNumber":103,"author":{"gitId":"SebasFok"},"content":"                if (currentLine \u003d\u003d lineNumber) {","lastModifiedDate":"2023-09-21"},{"lineNumber":104,"author":{"gitId":"SebasFok"},"content":"                    // Replace the line if the line number matches.","lastModifiedDate":"2023-09-21"},{"lineNumber":105,"author":{"gitId":"SebasFok"},"content":"                    fileContent.append(newText).append(\"\\n\");","lastModifiedDate":"2023-09-21"},{"lineNumber":106,"author":{"gitId":"SebasFok"},"content":"                } else {","lastModifiedDate":"2023-09-21"},{"lineNumber":107,"author":{"gitId":"SebasFok"},"content":"                    fileContent.append(line).append(\"\\n\");","lastModifiedDate":"2023-09-21"},{"lineNumber":108,"author":{"gitId":"SebasFok"},"content":"                }","lastModifiedDate":"2023-09-21"},{"lineNumber":109,"author":{"gitId":"SebasFok"},"content":"                currentLine++;","lastModifiedDate":"2023-09-21"},{"lineNumber":110,"author":{"gitId":"SebasFok"},"content":"            }","lastModifiedDate":"2023-09-21"},{"lineNumber":111,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":112,"author":{"gitId":"SebasFok"},"content":"            // Close the BufferedReader to release resources.","lastModifiedDate":"2023-09-21"},{"lineNumber":113,"author":{"gitId":"SebasFok"},"content":"            bufferedReader.close();","lastModifiedDate":"2023-09-21"},{"lineNumber":114,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":115,"author":{"gitId":"SebasFok"},"content":"            // Write the modified content back to the file.","lastModifiedDate":"2023-09-21"},{"lineNumber":116,"author":{"gitId":"SebasFok"},"content":"            FileWriter fileWriter \u003d new FileWriter(filePath);","lastModifiedDate":"2023-09-21"},{"lineNumber":117,"author":{"gitId":"SebasFok"},"content":"            BufferedWriter bufferedWriter \u003d new BufferedWriter(fileWriter);","lastModifiedDate":"2023-09-21"},{"lineNumber":118,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":119,"author":{"gitId":"SebasFok"},"content":"            bufferedWriter.write(fileContent.toString());","lastModifiedDate":"2023-09-21"},{"lineNumber":120,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":121,"author":{"gitId":"SebasFok"},"content":"            // Close the BufferedWriter to release resources.","lastModifiedDate":"2023-09-21"},{"lineNumber":122,"author":{"gitId":"SebasFok"},"content":"            bufferedWriter.close();","lastModifiedDate":"2023-09-21"},{"lineNumber":123,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":124,"author":{"gitId":"SebasFok"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-21"},{"lineNumber":125,"author":{"gitId":"SebasFok"},"content":"            System.out.println(\"An IOException occurred: \" + e.getMessage());","lastModifiedDate":"2023-09-25"},{"lineNumber":126,"author":{"gitId":"SebasFok"},"content":"        }","lastModifiedDate":"2023-09-21"},{"lineNumber":127,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-09-21"},{"lineNumber":128,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":129,"author":{"gitId":"SebasFok"},"content":"    /**","lastModifiedDate":"2023-10-05"},{"lineNumber":130,"author":{"gitId":"SebasFok"},"content":"     * Takes in the location of the file in question and returns whether the file exist","lastModifiedDate":"2023-10-05"},{"lineNumber":131,"author":{"gitId":"SebasFok"},"content":"     *","lastModifiedDate":"2023-10-05"},{"lineNumber":132,"author":{"gitId":"SebasFok"},"content":"     * @param filePath","lastModifiedDate":"2023-10-05"},{"lineNumber":133,"author":{"gitId":"SebasFok"},"content":"     * @return return true if the file exist,return false otherwise","lastModifiedDate":"2023-10-05"},{"lineNumber":134,"author":{"gitId":"SebasFok"},"content":"     */","lastModifiedDate":"2023-10-05"},{"lineNumber":135,"author":{"gitId":"SebasFok"},"content":"    public static boolean isFileExist(String filePath) {","lastModifiedDate":"2023-09-21"},{"lineNumber":136,"author":{"gitId":"SebasFok"},"content":"        Path path \u003d Paths.get(filePath);","lastModifiedDate":"2023-09-21"},{"lineNumber":137,"author":{"gitId":"SebasFok"},"content":"        return Files.exists(path);","lastModifiedDate":"2023-09-21"},{"lineNumber":138,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-09-21"},{"lineNumber":139,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":140,"author":{"gitId":"SebasFok"},"content":"    /**","lastModifiedDate":"2023-10-05"},{"lineNumber":141,"author":{"gitId":"SebasFok"},"content":"     * Takes in the location of a txt file and deletes the specified line from the file","lastModifiedDate":"2023-10-05"},{"lineNumber":142,"author":{"gitId":"SebasFok"},"content":"     *","lastModifiedDate":"2023-10-05"},{"lineNumber":143,"author":{"gitId":"SebasFok"},"content":"     * @param filePath location of txt file","lastModifiedDate":"2023-10-05"},{"lineNumber":144,"author":{"gitId":"SebasFok"},"content":"     * @param lineToDelete line number to delete from txt file","lastModifiedDate":"2023-10-05"},{"lineNumber":145,"author":{"gitId":"SebasFok"},"content":"     */","lastModifiedDate":"2023-10-05"},{"lineNumber":146,"author":{"gitId":"SebasFok"},"content":"    public static void deleteLineFromFile(String filePath, int lineToDelete) {","lastModifiedDate":"2023-09-22"},{"lineNumber":147,"author":{"gitId":"SebasFok"},"content":"        try {","lastModifiedDate":"2023-09-22"},{"lineNumber":148,"author":{"gitId":"SebasFok"},"content":"            // Read the existing content of the file into memory.","lastModifiedDate":"2023-09-22"},{"lineNumber":149,"author":{"gitId":"SebasFok"},"content":"            FileReader fileReader \u003d new FileReader(filePath);","lastModifiedDate":"2023-09-22"},{"lineNumber":150,"author":{"gitId":"SebasFok"},"content":"            BufferedReader bufferedReader \u003d new BufferedReader(fileReader);","lastModifiedDate":"2023-09-22"},{"lineNumber":151,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":152,"author":{"gitId":"SebasFok"},"content":"            List\u003cString\u003e fileContent \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-22"},{"lineNumber":153,"author":{"gitId":"SebasFok"},"content":"            String line;","lastModifiedDate":"2023-09-22"},{"lineNumber":154,"author":{"gitId":"SebasFok"},"content":"            while ((line \u003d bufferedReader.readLine()) !\u003d null) {","lastModifiedDate":"2023-09-22"},{"lineNumber":155,"author":{"gitId":"SebasFok"},"content":"                fileContent.add(line);","lastModifiedDate":"2023-09-22"},{"lineNumber":156,"author":{"gitId":"SebasFok"},"content":"            }","lastModifiedDate":"2023-09-22"},{"lineNumber":157,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":158,"author":{"gitId":"SebasFok"},"content":"            // Close the BufferedReader to release resources.","lastModifiedDate":"2023-09-22"},{"lineNumber":159,"author":{"gitId":"SebasFok"},"content":"            bufferedReader.close();","lastModifiedDate":"2023-09-22"},{"lineNumber":160,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":161,"author":{"gitId":"SebasFok"},"content":"            // Remove the specified line from the list.","lastModifiedDate":"2023-09-22"},{"lineNumber":162,"author":{"gitId":"SebasFok"},"content":"            fileContent.remove(lineToDelete);","lastModifiedDate":"2023-09-22"},{"lineNumber":163,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":164,"author":{"gitId":"SebasFok"},"content":"            // Write the modified content back to the file.","lastModifiedDate":"2023-09-22"},{"lineNumber":165,"author":{"gitId":"SebasFok"},"content":"            FileWriter fileWriter \u003d new FileWriter(filePath);","lastModifiedDate":"2023-09-22"},{"lineNumber":166,"author":{"gitId":"SebasFok"},"content":"            BufferedWriter bufferedWriter \u003d new BufferedWriter(fileWriter);","lastModifiedDate":"2023-09-22"},{"lineNumber":167,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":168,"author":{"gitId":"SebasFok"},"content":"            for (String contentLine : fileContent) {","lastModifiedDate":"2023-09-22"},{"lineNumber":169,"author":{"gitId":"SebasFok"},"content":"                bufferedWriter.write(contentLine);","lastModifiedDate":"2023-09-22"},{"lineNumber":170,"author":{"gitId":"SebasFok"},"content":"                bufferedWriter.newLine(); // Add a newline character after each line.","lastModifiedDate":"2023-09-22"},{"lineNumber":171,"author":{"gitId":"SebasFok"},"content":"            }","lastModifiedDate":"2023-09-22"},{"lineNumber":172,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":173,"author":{"gitId":"SebasFok"},"content":"            // Close the BufferedWriter to release resources.","lastModifiedDate":"2023-09-22"},{"lineNumber":174,"author":{"gitId":"SebasFok"},"content":"            bufferedWriter.close();","lastModifiedDate":"2023-09-22"},{"lineNumber":175,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":176,"author":{"gitId":"SebasFok"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-22"},{"lineNumber":177,"author":{"gitId":"SebasFok"},"content":"            System.out.println(\"An IOException occurred: \" + e.getMessage());","lastModifiedDate":"2023-09-25"},{"lineNumber":178,"author":{"gitId":"SebasFok"},"content":"        }","lastModifiedDate":"2023-09-22"},{"lineNumber":179,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":180,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":181,"author":{"gitId":"SebasFok"},"content":"}","lastModifiedDate":"2023-09-21"}],"authorContributionMap":{"SebasFok":181}},{"path":"src/main/java/data/Loader.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SebasFok"},"content":"package data;","lastModifiedDate":"2023-09-23"},{"lineNumber":2,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":3,"author":{"gitId":"SebasFok"},"content":"import task.*;","lastModifiedDate":"2023-09-23"},{"lineNumber":4,"author":{"gitId":"SebasFok"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2023-09-21"},{"lineNumber":5,"author":{"gitId":"SebasFok"},"content":"import java.io.FileReader;","lastModifiedDate":"2023-09-21"},{"lineNumber":6,"author":{"gitId":"SebasFok"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-21"},{"lineNumber":7,"author":{"gitId":"SebasFok"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-21"},{"lineNumber":8,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":9,"author":{"gitId":"SebasFok"},"content":"/**","lastModifiedDate":"2023-10-05"},{"lineNumber":10,"author":{"gitId":"SebasFok"},"content":" * Class that contains method to read simon.txt into an ArrayList","lastModifiedDate":"2023-10-05"},{"lineNumber":11,"author":{"gitId":"SebasFok"},"content":" */","lastModifiedDate":"2023-10-05"},{"lineNumber":12,"author":{"gitId":"SebasFok"},"content":"public class Loader {","lastModifiedDate":"2023-10-04"},{"lineNumber":13,"author":{"gitId":"SebasFok"},"content":"    /**","lastModifiedDate":"2023-10-05"},{"lineNumber":14,"author":{"gitId":"SebasFok"},"content":"     * Takes in the location of simon.txt and loads the contents of the","lastModifiedDate":"2023-10-05"},{"lineNumber":15,"author":{"gitId":"SebasFok"},"content":"     * file to an ArrayList","lastModifiedDate":"2023-10-05"},{"lineNumber":16,"author":{"gitId":"SebasFok"},"content":"     *","lastModifiedDate":"2023-10-05"},{"lineNumber":17,"author":{"gitId":"SebasFok"},"content":"     * @param filePath location of simon.txt","lastModifiedDate":"2023-10-05"},{"lineNumber":18,"author":{"gitId":"SebasFok"},"content":"     * @return ArrayList containing tasks stored in simon.txt","lastModifiedDate":"2023-10-05"},{"lineNumber":19,"author":{"gitId":"SebasFok"},"content":"     */","lastModifiedDate":"2023-10-05"},{"lineNumber":20,"author":{"gitId":"SebasFok"},"content":"    public static ArrayList\u003cTask\u003e readToList (String filePath) {","lastModifiedDate":"2023-09-21"},{"lineNumber":21,"author":{"gitId":"SebasFok"},"content":"        ArrayList\u003cTask\u003e newList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-21"},{"lineNumber":22,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":23,"author":{"gitId":"SebasFok"},"content":"        try {","lastModifiedDate":"2023-09-21"},{"lineNumber":24,"author":{"gitId":"SebasFok"},"content":"            // Create a FileReader and BufferedReader to read the file.","lastModifiedDate":"2023-09-21"},{"lineNumber":25,"author":{"gitId":"SebasFok"},"content":"            FileReader fileReader \u003d new FileReader(filePath);","lastModifiedDate":"2023-09-21"},{"lineNumber":26,"author":{"gitId":"SebasFok"},"content":"            BufferedReader bufferedReader \u003d new BufferedReader(fileReader);","lastModifiedDate":"2023-09-21"},{"lineNumber":27,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":28,"author":{"gitId":"SebasFok"},"content":"            String line;","lastModifiedDate":"2023-09-21"},{"lineNumber":29,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":30,"author":{"gitId":"SebasFok"},"content":"            // Read lines from the file and add them to the ArrayList.","lastModifiedDate":"2023-09-21"},{"lineNumber":31,"author":{"gitId":"SebasFok"},"content":"            while ((line \u003d bufferedReader.readLine()) !\u003d null) {","lastModifiedDate":"2023-09-21"},{"lineNumber":32,"author":{"gitId":"SebasFok"},"content":"                String[] splitInputs \u003d line.split(\" \\\\| \");","lastModifiedDate":"2023-09-21"},{"lineNumber":33,"author":{"gitId":"SebasFok"},"content":"                switch(splitInputs[0]) {","lastModifiedDate":"2023-09-21"},{"lineNumber":34,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":35,"author":{"gitId":"SebasFok"},"content":"                case \"T\":","lastModifiedDate":"2023-09-21"},{"lineNumber":36,"author":{"gitId":"SebasFok"},"content":"                    newList.add(new Todo(splitInputs[2]));","lastModifiedDate":"2023-09-21"},{"lineNumber":37,"author":{"gitId":"SebasFok"},"content":"                    if (splitInputs[1].equals(\"X\")) {","lastModifiedDate":"2023-09-21"},{"lineNumber":38,"author":{"gitId":"SebasFok"},"content":"                        newList.get(Task.getNumberOfTask() - 1).markAsDone();","lastModifiedDate":"2023-09-21"},{"lineNumber":39,"author":{"gitId":"SebasFok"},"content":"                    }","lastModifiedDate":"2023-09-21"},{"lineNumber":40,"author":{"gitId":"SebasFok"},"content":"                    break;","lastModifiedDate":"2023-09-21"},{"lineNumber":41,"author":{"gitId":"SebasFok"},"content":"                case \"D\":","lastModifiedDate":"2023-09-21"},{"lineNumber":42,"author":{"gitId":"SebasFok"},"content":"                    newList.add(new Deadline(splitInputs[2], splitInputs[3]));","lastModifiedDate":"2023-09-21"},{"lineNumber":43,"author":{"gitId":"SebasFok"},"content":"                    if (splitInputs[1].equals(\"X\")) {","lastModifiedDate":"2023-09-21"},{"lineNumber":44,"author":{"gitId":"SebasFok"},"content":"                        newList.get(Task.getNumberOfTask() - 1).markAsDone();","lastModifiedDate":"2023-09-21"},{"lineNumber":45,"author":{"gitId":"SebasFok"},"content":"                    }","lastModifiedDate":"2023-09-21"},{"lineNumber":46,"author":{"gitId":"SebasFok"},"content":"                    break;","lastModifiedDate":"2023-09-21"},{"lineNumber":47,"author":{"gitId":"SebasFok"},"content":"                case \"E\":","lastModifiedDate":"2023-09-21"},{"lineNumber":48,"author":{"gitId":"SebasFok"},"content":"                    String[] timings \u003d splitInputs[3].split(\" - \");","lastModifiedDate":"2023-09-21"},{"lineNumber":49,"author":{"gitId":"SebasFok"},"content":"                    newList.add(new Event(splitInputs[2], timings[0], timings[1]));","lastModifiedDate":"2023-09-21"},{"lineNumber":50,"author":{"gitId":"SebasFok"},"content":"                    if (splitInputs[1].equals(\"X\")) {","lastModifiedDate":"2023-09-21"},{"lineNumber":51,"author":{"gitId":"SebasFok"},"content":"                        newList.get(Task.getNumberOfTask() - 1).markAsDone();","lastModifiedDate":"2023-09-21"},{"lineNumber":52,"author":{"gitId":"SebasFok"},"content":"                    }","lastModifiedDate":"2023-09-21"},{"lineNumber":53,"author":{"gitId":"SebasFok"},"content":"                    break;","lastModifiedDate":"2023-09-21"},{"lineNumber":54,"author":{"gitId":"SebasFok"},"content":"                default:","lastModifiedDate":"2023-09-21"},{"lineNumber":55,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":56,"author":{"gitId":"SebasFok"},"content":"                }","lastModifiedDate":"2023-09-21"},{"lineNumber":57,"author":{"gitId":"SebasFok"},"content":"            }","lastModifiedDate":"2023-09-21"},{"lineNumber":58,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":59,"author":{"gitId":"SebasFok"},"content":"            // Close the BufferedReader to release resources.","lastModifiedDate":"2023-09-21"},{"lineNumber":60,"author":{"gitId":"SebasFok"},"content":"            bufferedReader.close();","lastModifiedDate":"2023-09-21"},{"lineNumber":61,"author":{"gitId":"SebasFok"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-21"},{"lineNumber":62,"author":{"gitId":"SebasFok"},"content":"            System.out.println(\"An IOException occurred: \" + e.getMessage());","lastModifiedDate":"2023-09-25"},{"lineNumber":63,"author":{"gitId":"SebasFok"},"content":"        }","lastModifiedDate":"2023-09-21"},{"lineNumber":64,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":65,"author":{"gitId":"SebasFok"},"content":"        return newList;","lastModifiedDate":"2023-09-21"},{"lineNumber":66,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-09-21"},{"lineNumber":67,"author":{"gitId":"SebasFok"},"content":"}","lastModifiedDate":"2023-09-21"}],"authorContributionMap":{"SebasFok":67}},{"path":"src/main/java/data/SimonFilePath.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SebasFok"},"content":"package data;","lastModifiedDate":"2023-09-24"},{"lineNumber":2,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-24"},{"lineNumber":3,"author":{"gitId":"SebasFok"},"content":"public class SimonFilePath {","lastModifiedDate":"2023-09-24"},{"lineNumber":4,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-24"},{"lineNumber":5,"author":{"gitId":"SebasFok"},"content":"    public static final String simontxtFilePath \u003d \"./data/simon.txt\";","lastModifiedDate":"2023-09-24"},{"lineNumber":6,"author":{"gitId":"SebasFok"},"content":"}","lastModifiedDate":"2023-09-24"}],"authorContributionMap":{"SebasFok":6}},{"path":"src/main/java/data/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SebasFok"},"content":"package data;","lastModifiedDate":"2023-10-04"},{"lineNumber":2,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":3,"author":{"gitId":"SebasFok"},"content":"import exception.SimonException;","lastModifiedDate":"2023-10-04"},{"lineNumber":4,"author":{"gitId":"SebasFok"},"content":"import task.*;","lastModifiedDate":"2023-10-04"},{"lineNumber":5,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":6,"author":{"gitId":"SebasFok"},"content":"import static data.DataMethods.*;","lastModifiedDate":"2023-10-04"},{"lineNumber":7,"author":{"gitId":"SebasFok"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-04"},{"lineNumber":8,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":9,"author":{"gitId":"SebasFok"},"content":"import static data.Loader.readToList;","lastModifiedDate":"2023-10-04"},{"lineNumber":10,"author":{"gitId":"SebasFok"},"content":"import static data.SimonFilePath.simontxtFilePath;","lastModifiedDate":"2023-10-04"},{"lineNumber":11,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":12,"author":{"gitId":"SebasFok"},"content":"/**","lastModifiedDate":"2023-10-05"},{"lineNumber":13,"author":{"gitId":"SebasFok"},"content":" * The Storage class handles file storage operations for a task management application.","lastModifiedDate":"2023-10-05"},{"lineNumber":14,"author":{"gitId":"SebasFok"},"content":" * It allows loading, creating, marking, unmarking, deleting, and adding tasks to a file.","lastModifiedDate":"2023-10-05"},{"lineNumber":15,"author":{"gitId":"SebasFok"},"content":" */","lastModifiedDate":"2023-10-05"},{"lineNumber":16,"author":{"gitId":"SebasFok"},"content":"public class Storage {","lastModifiedDate":"2023-10-04"},{"lineNumber":17,"author":{"gitId":"SebasFok"},"content":"    private String filePath;","lastModifiedDate":"2023-10-04"},{"lineNumber":18,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":19,"author":{"gitId":"SebasFok"},"content":"    /**","lastModifiedDate":"2023-10-05"},{"lineNumber":20,"author":{"gitId":"SebasFok"},"content":"     * Constructs a new Storage instance with the specified file path.","lastModifiedDate":"2023-10-05"},{"lineNumber":21,"author":{"gitId":"SebasFok"},"content":"     *","lastModifiedDate":"2023-10-05"},{"lineNumber":22,"author":{"gitId":"SebasFok"},"content":"     * @param filePath The path to the storage file.","lastModifiedDate":"2023-10-05"},{"lineNumber":23,"author":{"gitId":"SebasFok"},"content":"     */","lastModifiedDate":"2023-10-05"},{"lineNumber":24,"author":{"gitId":"SebasFok"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2023-10-04"},{"lineNumber":25,"author":{"gitId":"SebasFok"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-10-04"},{"lineNumber":26,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-10-04"},{"lineNumber":27,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":28,"author":{"gitId":"SebasFok"},"content":"    /**","lastModifiedDate":"2023-10-05"},{"lineNumber":29,"author":{"gitId":"SebasFok"},"content":"     * Loads tasks from the storage file.","lastModifiedDate":"2023-10-05"},{"lineNumber":30,"author":{"gitId":"SebasFok"},"content":"     *","lastModifiedDate":"2023-10-05"},{"lineNumber":31,"author":{"gitId":"SebasFok"},"content":"     * @return An ArrayList of Task objects loaded from the file.","lastModifiedDate":"2023-10-05"},{"lineNumber":32,"author":{"gitId":"SebasFok"},"content":"     * @throws SimonException If the file does not exist or an error occurs while reading.","lastModifiedDate":"2023-10-05"},{"lineNumber":33,"author":{"gitId":"SebasFok"},"content":"     */","lastModifiedDate":"2023-10-05"},{"lineNumber":34,"author":{"gitId":"SebasFok"},"content":"    public ArrayList\u003cTask\u003e load() throws SimonException {","lastModifiedDate":"2023-10-04"},{"lineNumber":35,"author":{"gitId":"SebasFok"},"content":"        if (!isFileExist(filePath)) {","lastModifiedDate":"2023-10-05"},{"lineNumber":36,"author":{"gitId":"SebasFok"},"content":"            throw new SimonException();","lastModifiedDate":"2023-10-04"},{"lineNumber":37,"author":{"gitId":"SebasFok"},"content":"        }","lastModifiedDate":"2023-10-04"},{"lineNumber":38,"author":{"gitId":"SebasFok"},"content":"        return readToList(filePath);","lastModifiedDate":"2023-10-04"},{"lineNumber":39,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-10-04"},{"lineNumber":40,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":41,"author":{"gitId":"SebasFok"},"content":"    /**","lastModifiedDate":"2023-10-05"},{"lineNumber":42,"author":{"gitId":"SebasFok"},"content":"     * Creates a \"simon.txt\" file in the specified user directory.","lastModifiedDate":"2023-10-05"},{"lineNumber":43,"author":{"gitId":"SebasFok"},"content":"     *","lastModifiedDate":"2023-10-05"},{"lineNumber":44,"author":{"gitId":"SebasFok"},"content":"     * @param userDirectory The user\u0027s directory where the \"simon.txt\" file will be created.","lastModifiedDate":"2023-10-05"},{"lineNumber":45,"author":{"gitId":"SebasFok"},"content":"     */","lastModifiedDate":"2023-10-05"},{"lineNumber":46,"author":{"gitId":"SebasFok"},"content":"    public void createSimonTxt(String userDirectory) {","lastModifiedDate":"2023-10-04"},{"lineNumber":47,"author":{"gitId":"SebasFok"},"content":"        String dataDirectory \u003d userDirectory + \"/\" + \"data\";","lastModifiedDate":"2023-10-04"},{"lineNumber":48,"author":{"gitId":"SebasFok"},"content":"        createDirectory(dataDirectory);","lastModifiedDate":"2023-10-04"},{"lineNumber":49,"author":{"gitId":"SebasFok"},"content":"        createFileInDirectory(dataDirectory, \"simon.txt\");","lastModifiedDate":"2023-10-04"},{"lineNumber":50,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-10-04"},{"lineNumber":51,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":52,"author":{"gitId":"SebasFok"},"content":"    /**","lastModifiedDate":"2023-10-05"},{"lineNumber":53,"author":{"gitId":"SebasFok"},"content":"     * Marks a task as done by updating its status in the file.","lastModifiedDate":"2023-10-05"},{"lineNumber":54,"author":{"gitId":"SebasFok"},"content":"     *","lastModifiedDate":"2023-10-05"},{"lineNumber":55,"author":{"gitId":"SebasFok"},"content":"     * @param taskNumber The task number to mark as done.","lastModifiedDate":"2023-10-05"},{"lineNumber":56,"author":{"gitId":"SebasFok"},"content":"     * @param taskList   The list of tasks to update.","lastModifiedDate":"2023-10-05"},{"lineNumber":57,"author":{"gitId":"SebasFok"},"content":"     */","lastModifiedDate":"2023-10-05"},{"lineNumber":58,"author":{"gitId":"SebasFok"},"content":"    public void markTask(String taskNumber, ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2023-10-04"},{"lineNumber":59,"author":{"gitId":"SebasFok"},"content":"        // Convert task number to element in tasks array","lastModifiedDate":"2023-10-04"},{"lineNumber":60,"author":{"gitId":"SebasFok"},"content":"        int target \u003d Integer.parseInt(taskNumber) - 1;","lastModifiedDate":"2023-10-04"},{"lineNumber":61,"author":{"gitId":"SebasFok"},"content":"        try {","lastModifiedDate":"2023-10-04"},{"lineNumber":62,"author":{"gitId":"SebasFok"},"content":"            Task task \u003d taskList.get(target);","lastModifiedDate":"2023-10-04"},{"lineNumber":63,"author":{"gitId":"SebasFok"},"content":"            String newText \u003d task.toText();","lastModifiedDate":"2023-10-04"},{"lineNumber":64,"author":{"gitId":"SebasFok"},"content":"            editTextFile(filePath, newText, target + 1);","lastModifiedDate":"2023-10-05"},{"lineNumber":65,"author":{"gitId":"SebasFok"},"content":"        } catch (IndexOutOfBoundsException ignored) {","lastModifiedDate":"2023-10-04"},{"lineNumber":66,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":67,"author":{"gitId":"SebasFok"},"content":"        }","lastModifiedDate":"2023-10-04"},{"lineNumber":68,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-10-04"},{"lineNumber":69,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":70,"author":{"gitId":"SebasFok"},"content":"    /**","lastModifiedDate":"2023-10-05"},{"lineNumber":71,"author":{"gitId":"SebasFok"},"content":"     * Unmarks a previously marked task by updating its status in the file.","lastModifiedDate":"2023-10-05"},{"lineNumber":72,"author":{"gitId":"SebasFok"},"content":"     *","lastModifiedDate":"2023-10-05"},{"lineNumber":73,"author":{"gitId":"SebasFok"},"content":"     * @param taskNumber The task number to unmark.","lastModifiedDate":"2023-10-05"},{"lineNumber":74,"author":{"gitId":"SebasFok"},"content":"     * @param taskList   The list of tasks to update.","lastModifiedDate":"2023-10-05"},{"lineNumber":75,"author":{"gitId":"SebasFok"},"content":"     */","lastModifiedDate":"2023-10-05"},{"lineNumber":76,"author":{"gitId":"SebasFok"},"content":"    public void unmarkTask(String taskNumber, ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2023-10-04"},{"lineNumber":77,"author":{"gitId":"SebasFok"},"content":"        // Convert task number to element in tasks array","lastModifiedDate":"2023-10-04"},{"lineNumber":78,"author":{"gitId":"SebasFok"},"content":"        int target \u003d Integer.parseInt(taskNumber) - 1;","lastModifiedDate":"2023-10-04"},{"lineNumber":79,"author":{"gitId":"SebasFok"},"content":"        try {","lastModifiedDate":"2023-10-04"},{"lineNumber":80,"author":{"gitId":"SebasFok"},"content":"            String newText \u003d taskList.get(target).toText();","lastModifiedDate":"2023-10-04"},{"lineNumber":81,"author":{"gitId":"SebasFok"},"content":"            editTextFile(filePath, newText, target + 1);","lastModifiedDate":"2023-10-05"},{"lineNumber":82,"author":{"gitId":"SebasFok"},"content":"        } catch (IndexOutOfBoundsException ignored) {","lastModifiedDate":"2023-10-04"},{"lineNumber":83,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":84,"author":{"gitId":"SebasFok"},"content":"        }","lastModifiedDate":"2023-10-04"},{"lineNumber":85,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-10-04"},{"lineNumber":86,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":87,"author":{"gitId":"SebasFok"},"content":"    /**","lastModifiedDate":"2023-10-05"},{"lineNumber":88,"author":{"gitId":"SebasFok"},"content":"     * Deletes a task from the file and updates the remaining task numbers.","lastModifiedDate":"2023-10-05"},{"lineNumber":89,"author":{"gitId":"SebasFok"},"content":"     *","lastModifiedDate":"2023-10-05"},{"lineNumber":90,"author":{"gitId":"SebasFok"},"content":"     * @param taskNumber The task number to delete.","lastModifiedDate":"2023-10-05"},{"lineNumber":91,"author":{"gitId":"SebasFok"},"content":"     * @param taskList   The list of tasks to update.","lastModifiedDate":"2023-10-05"},{"lineNumber":92,"author":{"gitId":"SebasFok"},"content":"     */","lastModifiedDate":"2023-10-05"},{"lineNumber":93,"author":{"gitId":"SebasFok"},"content":"    public void deleteTask(String taskNumber, ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2023-10-04"},{"lineNumber":94,"author":{"gitId":"SebasFok"},"content":"        int target \u003d Integer.parseInt(taskNumber) - 1;","lastModifiedDate":"2023-10-04"},{"lineNumber":95,"author":{"gitId":"SebasFok"},"content":"        try {","lastModifiedDate":"2023-10-04"},{"lineNumber":96,"author":{"gitId":"SebasFok"},"content":"            for (int i \u003d target; i \u003c Task.getNumberOfTask(); i++) {","lastModifiedDate":"2023-10-04"},{"lineNumber":97,"author":{"gitId":"SebasFok"},"content":"                String newText \u003d taskList.get(i).toText();","lastModifiedDate":"2023-10-04"},{"lineNumber":98,"author":{"gitId":"SebasFok"},"content":"                editTextFile(filePath, newText, i + 1);","lastModifiedDate":"2023-10-05"},{"lineNumber":99,"author":{"gitId":"SebasFok"},"content":"            }","lastModifiedDate":"2023-10-04"},{"lineNumber":100,"author":{"gitId":"SebasFok"},"content":"            deleteLineFromFile(filePath, Task.getNumberOfTask());","lastModifiedDate":"2023-10-05"},{"lineNumber":101,"author":{"gitId":"SebasFok"},"content":"        } catch (IndexOutOfBoundsException ignored) {","lastModifiedDate":"2023-10-04"},{"lineNumber":102,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":103,"author":{"gitId":"SebasFok"},"content":"        }","lastModifiedDate":"2023-10-04"},{"lineNumber":104,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-10-04"},{"lineNumber":105,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":106,"author":{"gitId":"SebasFok"},"content":"    /**","lastModifiedDate":"2023-10-05"},{"lineNumber":107,"author":{"gitId":"SebasFok"},"content":"     * Adds a new todo task to the file.","lastModifiedDate":"2023-10-05"},{"lineNumber":108,"author":{"gitId":"SebasFok"},"content":"     *","lastModifiedDate":"2023-10-05"},{"lineNumber":109,"author":{"gitId":"SebasFok"},"content":"     * @param description The description of the todo task.","lastModifiedDate":"2023-10-05"},{"lineNumber":110,"author":{"gitId":"SebasFok"},"content":"     * @param taskList    The list of tasks to update.","lastModifiedDate":"2023-10-05"},{"lineNumber":111,"author":{"gitId":"SebasFok"},"content":"     * @throws SimonException If the description is empty.","lastModifiedDate":"2023-10-05"},{"lineNumber":112,"author":{"gitId":"SebasFok"},"content":"     */","lastModifiedDate":"2023-10-05"},{"lineNumber":113,"author":{"gitId":"SebasFok"},"content":"    public void addTodo(String description, ArrayList\u003cTask\u003e taskList) throws SimonException {","lastModifiedDate":"2023-10-04"},{"lineNumber":114,"author":{"gitId":"SebasFok"},"content":"        String[] splitDescriptions \u003d description.split(\" \");","lastModifiedDate":"2023-10-04"},{"lineNumber":115,"author":{"gitId":"SebasFok"},"content":"        if (splitDescriptions.length \u003d\u003d 0 || splitDescriptions[0].isEmpty()) {","lastModifiedDate":"2023-10-04"},{"lineNumber":116,"author":{"gitId":"SebasFok"},"content":"            throw new SimonException();","lastModifiedDate":"2023-10-04"},{"lineNumber":117,"author":{"gitId":"SebasFok"},"content":"        }","lastModifiedDate":"2023-10-04"},{"lineNumber":118,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":119,"author":{"gitId":"SebasFok"},"content":"        addTextToFile(filePath, taskList.get(Task.getNumberOfTask() - 1).toText());","lastModifiedDate":"2023-10-05"},{"lineNumber":120,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-10-04"},{"lineNumber":121,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":122,"author":{"gitId":"SebasFok"},"content":"    /**","lastModifiedDate":"2023-10-05"},{"lineNumber":123,"author":{"gitId":"SebasFok"},"content":"     * Adds a new event task to the file.","lastModifiedDate":"2023-10-05"},{"lineNumber":124,"author":{"gitId":"SebasFok"},"content":"     *","lastModifiedDate":"2023-10-05"},{"lineNumber":125,"author":{"gitId":"SebasFok"},"content":"     * @param event     The event task description and details.","lastModifiedDate":"2023-10-05"},{"lineNumber":126,"author":{"gitId":"SebasFok"},"content":"     * @param taskList  The list of tasks to update.","lastModifiedDate":"2023-10-05"},{"lineNumber":127,"author":{"gitId":"SebasFok"},"content":"     * @throws SimonException If the description is empty.","lastModifiedDate":"2023-10-05"},{"lineNumber":128,"author":{"gitId":"SebasFok"},"content":"     */","lastModifiedDate":"2023-10-05"},{"lineNumber":129,"author":{"gitId":"SebasFok"},"content":"    public void addEvent(String event, ArrayList\u003cTask\u003e taskList) throws SimonException {","lastModifiedDate":"2023-10-04"},{"lineNumber":130,"author":{"gitId":"SebasFok"},"content":"        try {","lastModifiedDate":"2023-10-04"},{"lineNumber":131,"author":{"gitId":"SebasFok"},"content":"            // Split between \u0027description\u0027 and \u0027/from and /to\u0027","lastModifiedDate":"2023-10-04"},{"lineNumber":132,"author":{"gitId":"SebasFok"},"content":"            String[] splitElements \u003d event.split(\" /from \", 2);","lastModifiedDate":"2023-10-04"},{"lineNumber":133,"author":{"gitId":"SebasFok"},"content":"            String description \u003d splitElements[0];","lastModifiedDate":"2023-10-04"},{"lineNumber":134,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":135,"author":{"gitId":"SebasFok"},"content":"            String[] splitDescriptions \u003d description.split(\" \");","lastModifiedDate":"2023-10-04"},{"lineNumber":136,"author":{"gitId":"SebasFok"},"content":"            if (splitDescriptions.length \u003d\u003d 0 || splitDescriptions[0].isEmpty()) {","lastModifiedDate":"2023-10-04"},{"lineNumber":137,"author":{"gitId":"SebasFok"},"content":"                throw new SimonException();","lastModifiedDate":"2023-10-04"},{"lineNumber":138,"author":{"gitId":"SebasFok"},"content":"            }","lastModifiedDate":"2023-10-04"},{"lineNumber":139,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":140,"author":{"gitId":"SebasFok"},"content":"            addTextToFile(filePath, taskList.get(Task.getNumberOfTask() - 1).toText());","lastModifiedDate":"2023-10-05"},{"lineNumber":141,"author":{"gitId":"SebasFok"},"content":"        } catch (IndexOutOfBoundsException ignored) {","lastModifiedDate":"2023-10-04"},{"lineNumber":142,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":143,"author":{"gitId":"SebasFok"},"content":"        }","lastModifiedDate":"2023-10-04"},{"lineNumber":144,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-10-04"},{"lineNumber":145,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":146,"author":{"gitId":"SebasFok"},"content":"    /**","lastModifiedDate":"2023-10-05"},{"lineNumber":147,"author":{"gitId":"SebasFok"},"content":"     * Adds a new deadline task to the file.","lastModifiedDate":"2023-10-05"},{"lineNumber":148,"author":{"gitId":"SebasFok"},"content":"     *","lastModifiedDate":"2023-10-05"},{"lineNumber":149,"author":{"gitId":"SebasFok"},"content":"     * @param deadline  The deadline task description and due date.","lastModifiedDate":"2023-10-05"},{"lineNumber":150,"author":{"gitId":"SebasFok"},"content":"     * @param taskList  The list of tasks to update.","lastModifiedDate":"2023-10-05"},{"lineNumber":151,"author":{"gitId":"SebasFok"},"content":"     * @throws SimonException If the description is empty.","lastModifiedDate":"2023-10-05"},{"lineNumber":152,"author":{"gitId":"SebasFok"},"content":"     */","lastModifiedDate":"2023-10-05"},{"lineNumber":153,"author":{"gitId":"SebasFok"},"content":"    public void addDeadline(String deadline, ArrayList\u003cTask\u003e taskList) throws SimonException {","lastModifiedDate":"2023-10-04"},{"lineNumber":154,"author":{"gitId":"SebasFok"},"content":"        try {","lastModifiedDate":"2023-10-04"},{"lineNumber":155,"author":{"gitId":"SebasFok"},"content":"            // Split between \u0027description\u0027 and \u0027/by\u0027","lastModifiedDate":"2023-10-04"},{"lineNumber":156,"author":{"gitId":"SebasFok"},"content":"            String[] splitElements \u003d deadline.split(\" /by \", 2);","lastModifiedDate":"2023-10-04"},{"lineNumber":157,"author":{"gitId":"SebasFok"},"content":"            String description \u003d splitElements[0];","lastModifiedDate":"2023-10-04"},{"lineNumber":158,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":159,"author":{"gitId":"SebasFok"},"content":"            String[] splitDescriptions \u003d description.split(\" \");","lastModifiedDate":"2023-10-04"},{"lineNumber":160,"author":{"gitId":"SebasFok"},"content":"            if (splitDescriptions.length \u003d\u003d 0 || splitDescriptions[0].isEmpty()) {","lastModifiedDate":"2023-10-04"},{"lineNumber":161,"author":{"gitId":"SebasFok"},"content":"                throw new SimonException();","lastModifiedDate":"2023-10-04"},{"lineNumber":162,"author":{"gitId":"SebasFok"},"content":"            }","lastModifiedDate":"2023-10-04"},{"lineNumber":163,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":164,"author":{"gitId":"SebasFok"},"content":"            addTextToFile(filePath, taskList.get(Task.getNumberOfTask() - 1).toText());","lastModifiedDate":"2023-10-05"},{"lineNumber":165,"author":{"gitId":"SebasFok"},"content":"        } catch (IndexOutOfBoundsException ignored) {","lastModifiedDate":"2023-10-04"},{"lineNumber":166,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":167,"author":{"gitId":"SebasFok"},"content":"        }","lastModifiedDate":"2023-10-04"},{"lineNumber":168,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-10-04"},{"lineNumber":169,"author":{"gitId":"SebasFok"},"content":"}","lastModifiedDate":"2023-10-04"},{"lineNumber":170,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-05"}],"authorContributionMap":{"SebasFok":170}},{"path":"src/main/java/exception/SimonException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SebasFok"},"content":"package exception;","lastModifiedDate":"2023-09-23"},{"lineNumber":2,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":3,"author":{"gitId":"SebasFok"},"content":"public class SimonException extends Exception{","lastModifiedDate":"2023-09-16"},{"lineNumber":4,"author":{"gitId":"SebasFok"},"content":"}","lastModifiedDate":"2023-09-16"}],"authorContributionMap":{"SebasFok":4}},{"path":"src/main/java/exception/SimonException2.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SebasFok"},"content":"package exception;","lastModifiedDate":"2023-10-04"},{"lineNumber":2,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":3,"author":{"gitId":"SebasFok"},"content":"public class SimonException2 extends Exception{","lastModifiedDate":"2023-10-04"},{"lineNumber":4,"author":{"gitId":"SebasFok"},"content":"}","lastModifiedDate":"2023-10-04"}],"authorContributionMap":{"SebasFok":4}},{"path":"src/main/java/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SebasFok"},"content":"package task;","lastModifiedDate":"2023-09-23"},{"lineNumber":2,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":3,"author":{"gitId":"SebasFok"},"content":"/**","lastModifiedDate":"2023-10-05"},{"lineNumber":4,"author":{"gitId":"SebasFok"},"content":" * The Deadline class represents a task with a description and a specific deadline.","lastModifiedDate":"2023-10-05"},{"lineNumber":5,"author":{"gitId":"SebasFok"},"content":" * It is a subclass of the Task class and includes additional functionality for managing deadlines.","lastModifiedDate":"2023-10-05"},{"lineNumber":6,"author":{"gitId":"SebasFok"},"content":" */","lastModifiedDate":"2023-10-05"},{"lineNumber":7,"author":{"gitId":"SebasFok"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-09-08"},{"lineNumber":8,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":9,"author":{"gitId":"SebasFok"},"content":"    protected String by;","lastModifiedDate":"2023-09-08"},{"lineNumber":10,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":11,"author":{"gitId":"SebasFok"},"content":"    /**","lastModifiedDate":"2023-10-05"},{"lineNumber":12,"author":{"gitId":"SebasFok"},"content":"     * Constructs a new Deadline task with the given description and deadline.","lastModifiedDate":"2023-10-05"},{"lineNumber":13,"author":{"gitId":"SebasFok"},"content":"     *","lastModifiedDate":"2023-10-05"},{"lineNumber":14,"author":{"gitId":"SebasFok"},"content":"     * @param description The description of the task.","lastModifiedDate":"2023-10-05"},{"lineNumber":15,"author":{"gitId":"SebasFok"},"content":"     * @param by          The deadline of the task.","lastModifiedDate":"2023-10-05"},{"lineNumber":16,"author":{"gitId":"SebasFok"},"content":"     */","lastModifiedDate":"2023-10-05"},{"lineNumber":17,"author":{"gitId":"SebasFok"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2023-09-08"},{"lineNumber":18,"author":{"gitId":"SebasFok"},"content":"        super(description);","lastModifiedDate":"2023-09-08"},{"lineNumber":19,"author":{"gitId":"SebasFok"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-09-08"},{"lineNumber":20,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":21,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":22,"author":{"gitId":"SebasFok"},"content":"    /**","lastModifiedDate":"2023-10-05"},{"lineNumber":23,"author":{"gitId":"SebasFok"},"content":"     * Returns a string representation of the Deadline task for display purposes.","lastModifiedDate":"2023-10-05"},{"lineNumber":24,"author":{"gitId":"SebasFok"},"content":"     *","lastModifiedDate":"2023-10-05"},{"lineNumber":25,"author":{"gitId":"SebasFok"},"content":"     * @return A formatted string containing \"[D]\" for deadline tasks, the status icon, description,","lastModifiedDate":"2023-10-05"},{"lineNumber":26,"author":{"gitId":"SebasFok"},"content":"     *         and the deadline.","lastModifiedDate":"2023-10-05"},{"lineNumber":27,"author":{"gitId":"SebasFok"},"content":"     */","lastModifiedDate":"2023-10-05"},{"lineNumber":28,"author":{"gitId":"SebasFok"},"content":"    @Override","lastModifiedDate":"2023-09-08"},{"lineNumber":29,"author":{"gitId":"SebasFok"},"content":"    public String toString() {","lastModifiedDate":"2023-09-08"},{"lineNumber":30,"author":{"gitId":"SebasFok"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";","lastModifiedDate":"2023-09-08"},{"lineNumber":31,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":32,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":33,"author":{"gitId":"SebasFok"},"content":"    /**","lastModifiedDate":"2023-10-05"},{"lineNumber":34,"author":{"gitId":"SebasFok"},"content":"     * Returns a string representation of the Deadline task suitable for saving to a text file.","lastModifiedDate":"2023-10-05"},{"lineNumber":35,"author":{"gitId":"SebasFok"},"content":"     *","lastModifiedDate":"2023-10-05"},{"lineNumber":36,"author":{"gitId":"SebasFok"},"content":"     * @return A formatted string containing \"D\" to identify deadline tasks, the status icon,","lastModifiedDate":"2023-10-05"},{"lineNumber":37,"author":{"gitId":"SebasFok"},"content":"     *         description, and the deadline.","lastModifiedDate":"2023-10-05"},{"lineNumber":38,"author":{"gitId":"SebasFok"},"content":"     */","lastModifiedDate":"2023-10-05"},{"lineNumber":39,"author":{"gitId":"SebasFok"},"content":"    @Override","lastModifiedDate":"2023-09-21"},{"lineNumber":40,"author":{"gitId":"SebasFok"},"content":"    public String toText() {","lastModifiedDate":"2023-09-21"},{"lineNumber":41,"author":{"gitId":"SebasFok"},"content":"        return \"D\" + \" | \" + getStatusIcon() + \" | \" + getDescription() + \" | \" + by;","lastModifiedDate":"2023-09-21"},{"lineNumber":42,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-09-21"},{"lineNumber":43,"author":{"gitId":"SebasFok"},"content":"}","lastModifiedDate":"2023-09-08"}],"authorContributionMap":{"SebasFok":43}},{"path":"src/main/java/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SebasFok"},"content":"package task;","lastModifiedDate":"2023-09-23"},{"lineNumber":2,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":3,"author":{"gitId":"SebasFok"},"content":"/**","lastModifiedDate":"2023-10-05"},{"lineNumber":4,"author":{"gitId":"SebasFok"},"content":" * The Event class represents a task with a description and a specific event duration.","lastModifiedDate":"2023-10-05"},{"lineNumber":5,"author":{"gitId":"SebasFok"},"content":" * It is a subclass of the Task class and includes additional functionality for managing events.","lastModifiedDate":"2023-10-05"},{"lineNumber":6,"author":{"gitId":"SebasFok"},"content":" */","lastModifiedDate":"2023-10-05"},{"lineNumber":7,"author":{"gitId":"SebasFok"},"content":"public class Event extends Task {","lastModifiedDate":"2023-09-08"},{"lineNumber":8,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":9,"author":{"gitId":"SebasFok"},"content":"    protected String from;","lastModifiedDate":"2023-09-08"},{"lineNumber":10,"author":{"gitId":"SebasFok"},"content":"    protected String to;","lastModifiedDate":"2023-09-08"},{"lineNumber":11,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":12,"author":{"gitId":"SebasFok"},"content":"    /**","lastModifiedDate":"2023-10-05"},{"lineNumber":13,"author":{"gitId":"SebasFok"},"content":"     * Constructs a new Event task with the given description, start time, and end time.","lastModifiedDate":"2023-10-05"},{"lineNumber":14,"author":{"gitId":"SebasFok"},"content":"     *","lastModifiedDate":"2023-10-05"},{"lineNumber":15,"author":{"gitId":"SebasFok"},"content":"     * @param description The description of the event.","lastModifiedDate":"2023-10-05"},{"lineNumber":16,"author":{"gitId":"SebasFok"},"content":"     * @param from        The start time of the event.","lastModifiedDate":"2023-10-05"},{"lineNumber":17,"author":{"gitId":"SebasFok"},"content":"     * @param to          The end time of the event.","lastModifiedDate":"2023-10-05"},{"lineNumber":18,"author":{"gitId":"SebasFok"},"content":"     */","lastModifiedDate":"2023-10-05"},{"lineNumber":19,"author":{"gitId":"SebasFok"},"content":"    public Event(String description, String from, String to) {","lastModifiedDate":"2023-09-08"},{"lineNumber":20,"author":{"gitId":"SebasFok"},"content":"        super(description);","lastModifiedDate":"2023-09-08"},{"lineNumber":21,"author":{"gitId":"SebasFok"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-09-08"},{"lineNumber":22,"author":{"gitId":"SebasFok"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-09-08"},{"lineNumber":23,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":24,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":25,"author":{"gitId":"SebasFok"},"content":"    /**","lastModifiedDate":"2023-10-05"},{"lineNumber":26,"author":{"gitId":"SebasFok"},"content":"     * Returns a string representation of the Event task for display purposes.","lastModifiedDate":"2023-10-05"},{"lineNumber":27,"author":{"gitId":"SebasFok"},"content":"     *","lastModifiedDate":"2023-10-05"},{"lineNumber":28,"author":{"gitId":"SebasFok"},"content":"     * @return A formatted string containing \"[E]\" for event tasks, the status icon, description,","lastModifiedDate":"2023-10-05"},{"lineNumber":29,"author":{"gitId":"SebasFok"},"content":"     *         and the event duration.","lastModifiedDate":"2023-10-05"},{"lineNumber":30,"author":{"gitId":"SebasFok"},"content":"     */","lastModifiedDate":"2023-10-05"},{"lineNumber":31,"author":{"gitId":"SebasFok"},"content":"    @Override","lastModifiedDate":"2023-09-08"},{"lineNumber":32,"author":{"gitId":"SebasFok"},"content":"    public String toString() {","lastModifiedDate":"2023-09-08"},{"lineNumber":33,"author":{"gitId":"SebasFok"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + from + \" to: \" + to + \")\";","lastModifiedDate":"2023-09-08"},{"lineNumber":34,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":35,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":36,"author":{"gitId":"SebasFok"},"content":"    /**","lastModifiedDate":"2023-10-05"},{"lineNumber":37,"author":{"gitId":"SebasFok"},"content":"     * Returns a string representation of the Event task suitable for saving to a text file.","lastModifiedDate":"2023-10-05"},{"lineNumber":38,"author":{"gitId":"SebasFok"},"content":"     *","lastModifiedDate":"2023-10-05"},{"lineNumber":39,"author":{"gitId":"SebasFok"},"content":"     * @return A formatted string containing \"E\" to identify event tasks, the status icon,","lastModifiedDate":"2023-10-05"},{"lineNumber":40,"author":{"gitId":"SebasFok"},"content":"     *         description, and the event duration.","lastModifiedDate":"2023-10-05"},{"lineNumber":41,"author":{"gitId":"SebasFok"},"content":"     */","lastModifiedDate":"2023-10-05"},{"lineNumber":42,"author":{"gitId":"SebasFok"},"content":"    @Override","lastModifiedDate":"2023-09-21"},{"lineNumber":43,"author":{"gitId":"SebasFok"},"content":"    public String toText() {","lastModifiedDate":"2023-09-21"},{"lineNumber":44,"author":{"gitId":"SebasFok"},"content":"        return \"E\" + \" | \" + getStatusIcon() + \" | \" + getDescription() + \" | \" + from + \" - \" + to;","lastModifiedDate":"2023-09-21"},{"lineNumber":45,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-09-21"},{"lineNumber":46,"author":{"gitId":"SebasFok"},"content":"}","lastModifiedDate":"2023-09-08"}],"authorContributionMap":{"SebasFok":46}},{"path":"src/main/java/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SebasFok"},"content":"package task;","lastModifiedDate":"2023-09-23"},{"lineNumber":2,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":3,"author":{"gitId":"SebasFok"},"content":"/**","lastModifiedDate":"2023-10-05"},{"lineNumber":4,"author":{"gitId":"SebasFok"},"content":" * The Task class represents a task with a description and completion status.","lastModifiedDate":"2023-10-05"},{"lineNumber":5,"author":{"gitId":"SebasFok"},"content":" * It also keeps track of the total number of tasks created.","lastModifiedDate":"2023-10-05"},{"lineNumber":6,"author":{"gitId":"SebasFok"},"content":" */","lastModifiedDate":"2023-10-05"},{"lineNumber":7,"author":{"gitId":"SebasFok"},"content":"public class Task {","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"SebasFok"},"content":"    protected String description;","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"SebasFok"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-09-03"},{"lineNumber":10,"author":{"gitId":"SebasFok"},"content":"    private static int numberOfTask \u003d 0;","lastModifiedDate":"2023-09-03"},{"lineNumber":11,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":12,"author":{"gitId":"SebasFok"},"content":"    /**","lastModifiedDate":"2023-10-05"},{"lineNumber":13,"author":{"gitId":"SebasFok"},"content":"     * Constructs a new Task with the given description and marks it as not done.","lastModifiedDate":"2023-10-05"},{"lineNumber":14,"author":{"gitId":"SebasFok"},"content":"     *","lastModifiedDate":"2023-10-05"},{"lineNumber":15,"author":{"gitId":"SebasFok"},"content":"     * @param description The description of the task.","lastModifiedDate":"2023-10-05"},{"lineNumber":16,"author":{"gitId":"SebasFok"},"content":"     */","lastModifiedDate":"2023-10-05"},{"lineNumber":17,"author":{"gitId":"SebasFok"},"content":"    public Task(String description) {","lastModifiedDate":"2023-09-03"},{"lineNumber":18,"author":{"gitId":"SebasFok"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-09-03"},{"lineNumber":19,"author":{"gitId":"SebasFok"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-09-03"},{"lineNumber":20,"author":{"gitId":"SebasFok"},"content":"        numberOfTask++;","lastModifiedDate":"2023-09-03"},{"lineNumber":21,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":22,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":23,"author":{"gitId":"SebasFok"},"content":"    /**","lastModifiedDate":"2023-10-05"},{"lineNumber":24,"author":{"gitId":"SebasFok"},"content":"     * Gets the status icon for the task.","lastModifiedDate":"2023-10-05"},{"lineNumber":25,"author":{"gitId":"SebasFok"},"content":"     *","lastModifiedDate":"2023-10-05"},{"lineNumber":26,"author":{"gitId":"SebasFok"},"content":"     * @return \"X\" if the task is done, \" \" (a space) otherwise.","lastModifiedDate":"2023-10-05"},{"lineNumber":27,"author":{"gitId":"SebasFok"},"content":"     */","lastModifiedDate":"2023-10-05"},{"lineNumber":28,"author":{"gitId":"SebasFok"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-09-03"},{"lineNumber":29,"author":{"gitId":"SebasFok"},"content":"        return (isDone ? \"X\" : \" \");","lastModifiedDate":"2023-10-05"},{"lineNumber":30,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":31,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":32,"author":{"gitId":"SebasFok"},"content":"    /**","lastModifiedDate":"2023-10-05"},{"lineNumber":33,"author":{"gitId":"SebasFok"},"content":"     * Gets the description of the task.","lastModifiedDate":"2023-10-05"},{"lineNumber":34,"author":{"gitId":"SebasFok"},"content":"     *","lastModifiedDate":"2023-10-05"},{"lineNumber":35,"author":{"gitId":"SebasFok"},"content":"     * @return The task\u0027s description.","lastModifiedDate":"2023-10-05"},{"lineNumber":36,"author":{"gitId":"SebasFok"},"content":"     */","lastModifiedDate":"2023-10-05"},{"lineNumber":37,"author":{"gitId":"SebasFok"},"content":"    public String getDescription() {","lastModifiedDate":"2023-09-03"},{"lineNumber":38,"author":{"gitId":"SebasFok"},"content":"        return description;","lastModifiedDate":"2023-09-03"},{"lineNumber":39,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":40,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":41,"author":{"gitId":"SebasFok"},"content":"    /**","lastModifiedDate":"2023-10-05"},{"lineNumber":42,"author":{"gitId":"SebasFok"},"content":"     * Gets the completion status of the task.","lastModifiedDate":"2023-10-05"},{"lineNumber":43,"author":{"gitId":"SebasFok"},"content":"     *","lastModifiedDate":"2023-10-05"},{"lineNumber":44,"author":{"gitId":"SebasFok"},"content":"     * @return true if the task is done, false otherwise.","lastModifiedDate":"2023-10-05"},{"lineNumber":45,"author":{"gitId":"SebasFok"},"content":"     */","lastModifiedDate":"2023-10-05"},{"lineNumber":46,"author":{"gitId":"SebasFok"},"content":"    public boolean getStatus() {","lastModifiedDate":"2023-09-03"},{"lineNumber":47,"author":{"gitId":"SebasFok"},"content":"        return isDone;","lastModifiedDate":"2023-09-03"},{"lineNumber":48,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":49,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":50,"author":{"gitId":"SebasFok"},"content":"    /**","lastModifiedDate":"2023-10-05"},{"lineNumber":51,"author":{"gitId":"SebasFok"},"content":"     * Marks the task as done by setting its completion status to true.","lastModifiedDate":"2023-10-05"},{"lineNumber":52,"author":{"gitId":"SebasFok"},"content":"     */","lastModifiedDate":"2023-10-05"},{"lineNumber":53,"author":{"gitId":"SebasFok"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-09-03"},{"lineNumber":54,"author":{"gitId":"SebasFok"},"content":"        isDone \u003d true;","lastModifiedDate":"2023-09-03"},{"lineNumber":55,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":56,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":57,"author":{"gitId":"SebasFok"},"content":"    /**","lastModifiedDate":"2023-10-05"},{"lineNumber":58,"author":{"gitId":"SebasFok"},"content":"     * Marks the task as not done by setting its completion status to false.","lastModifiedDate":"2023-10-05"},{"lineNumber":59,"author":{"gitId":"SebasFok"},"content":"     */","lastModifiedDate":"2023-10-05"},{"lineNumber":60,"author":{"gitId":"SebasFok"},"content":"    public void unmarkAsDone() {","lastModifiedDate":"2023-09-03"},{"lineNumber":61,"author":{"gitId":"SebasFok"},"content":"        isDone \u003d false;","lastModifiedDate":"2023-09-03"},{"lineNumber":62,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":63,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":64,"author":{"gitId":"SebasFok"},"content":"    /**","lastModifiedDate":"2023-10-05"},{"lineNumber":65,"author":{"gitId":"SebasFok"},"content":"     * Gets the total number of tasks created.","lastModifiedDate":"2023-10-05"},{"lineNumber":66,"author":{"gitId":"SebasFok"},"content":"     *","lastModifiedDate":"2023-10-05"},{"lineNumber":67,"author":{"gitId":"SebasFok"},"content":"     * @return The number of tasks created.","lastModifiedDate":"2023-10-05"},{"lineNumber":68,"author":{"gitId":"SebasFok"},"content":"     */","lastModifiedDate":"2023-10-05"},{"lineNumber":69,"author":{"gitId":"SebasFok"},"content":"    public static int getNumberOfTask() {","lastModifiedDate":"2023-09-03"},{"lineNumber":70,"author":{"gitId":"SebasFok"},"content":"        return numberOfTask;","lastModifiedDate":"2023-09-03"},{"lineNumber":71,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":72,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":73,"author":{"gitId":"SebasFok"},"content":"    /**","lastModifiedDate":"2023-10-05"},{"lineNumber":74,"author":{"gitId":"SebasFok"},"content":"     * Decrements the total number of tasks created by one.","lastModifiedDate":"2023-10-05"},{"lineNumber":75,"author":{"gitId":"SebasFok"},"content":"     */","lastModifiedDate":"2023-10-05"},{"lineNumber":76,"author":{"gitId":"SebasFok"},"content":"    public static void deleteOneTask() {","lastModifiedDate":"2023-09-21"},{"lineNumber":77,"author":{"gitId":"SebasFok"},"content":"        numberOfTask--;","lastModifiedDate":"2023-09-21"},{"lineNumber":78,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-09-21"},{"lineNumber":79,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":80,"author":{"gitId":"SebasFok"},"content":"    /**","lastModifiedDate":"2023-10-05"},{"lineNumber":81,"author":{"gitId":"SebasFok"},"content":"     * Returns a string representation of the task for display purposes.","lastModifiedDate":"2023-10-05"},{"lineNumber":82,"author":{"gitId":"SebasFok"},"content":"     *","lastModifiedDate":"2023-10-05"},{"lineNumber":83,"author":{"gitId":"SebasFok"},"content":"     * @return A string containing the status icon and description.","lastModifiedDate":"2023-10-05"},{"lineNumber":84,"author":{"gitId":"SebasFok"},"content":"     */","lastModifiedDate":"2023-10-05"},{"lineNumber":85,"author":{"gitId":"SebasFok"},"content":"    public String toString() {","lastModifiedDate":"2023-10-05"},{"lineNumber":86,"author":{"gitId":"SebasFok"},"content":"        return \"[\" + getStatusIcon() + \"]\" + \" \" + getDescription();","lastModifiedDate":"2023-09-08"},{"lineNumber":87,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":88,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":89,"author":{"gitId":"SebasFok"},"content":"    /**","lastModifiedDate":"2023-10-05"},{"lineNumber":90,"author":{"gitId":"SebasFok"},"content":"     * Returns a string representation of the task suitable for saving to a text file.","lastModifiedDate":"2023-10-05"},{"lineNumber":91,"author":{"gitId":"SebasFok"},"content":"     *","lastModifiedDate":"2023-10-05"},{"lineNumber":92,"author":{"gitId":"SebasFok"},"content":"     * @return A formatted string containing the status icon and description.","lastModifiedDate":"2023-10-05"},{"lineNumber":93,"author":{"gitId":"SebasFok"},"content":"     */","lastModifiedDate":"2023-10-05"},{"lineNumber":94,"author":{"gitId":"SebasFok"},"content":"    public String toText() {","lastModifiedDate":"2023-09-21"},{"lineNumber":95,"author":{"gitId":"SebasFok"},"content":"        return \" \" + \" | \" + getStatusIcon() + \" | \" + getDescription();","lastModifiedDate":"2023-09-21"},{"lineNumber":96,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-09-21"},{"lineNumber":97,"author":{"gitId":"SebasFok"},"content":"}","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"SebasFok":97}},{"path":"src/main/java/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SebasFok"},"content":"package task;","lastModifiedDate":"2023-10-04"},{"lineNumber":2,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":3,"author":{"gitId":"SebasFok"},"content":"import UI.Ui;","lastModifiedDate":"2023-10-04"},{"lineNumber":4,"author":{"gitId":"SebasFok"},"content":"import exception.*;","lastModifiedDate":"2023-10-04"},{"lineNumber":5,"author":{"gitId":"SebasFok"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-04"},{"lineNumber":6,"author":{"gitId":"SebasFok"},"content":"import static java.util.stream.Collectors.toList;","lastModifiedDate":"2023-10-04"},{"lineNumber":7,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":8,"author":{"gitId":"SebasFok"},"content":"/**","lastModifiedDate":"2023-10-05"},{"lineNumber":9,"author":{"gitId":"SebasFok"},"content":" * Contains the task list and has operations to modify the list.","lastModifiedDate":"2023-10-05"},{"lineNumber":10,"author":{"gitId":"SebasFok"},"content":" */","lastModifiedDate":"2023-10-05"},{"lineNumber":11,"author":{"gitId":"SebasFok"},"content":"public class TaskList {","lastModifiedDate":"2023-10-04"},{"lineNumber":12,"author":{"gitId":"SebasFok"},"content":"    private ArrayList\u003cTask\u003e taskList;","lastModifiedDate":"2023-10-04"},{"lineNumber":13,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":14,"author":{"gitId":"SebasFok"},"content":"    /**","lastModifiedDate":"2023-10-05"},{"lineNumber":15,"author":{"gitId":"SebasFok"},"content":"     * Initialise the TaskList","lastModifiedDate":"2023-10-05"},{"lineNumber":16,"author":{"gitId":"SebasFok"},"content":"     *","lastModifiedDate":"2023-10-05"},{"lineNumber":17,"author":{"gitId":"SebasFok"},"content":"     * @param taskList","lastModifiedDate":"2023-10-05"},{"lineNumber":18,"author":{"gitId":"SebasFok"},"content":"     */","lastModifiedDate":"2023-10-05"},{"lineNumber":19,"author":{"gitId":"SebasFok"},"content":"    public TaskList(ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2023-10-04"},{"lineNumber":20,"author":{"gitId":"SebasFok"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2023-10-04"},{"lineNumber":21,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-10-04"},{"lineNumber":22,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":23,"author":{"gitId":"SebasFok"},"content":"    public ArrayList\u003cTask\u003e getTaskList() {","lastModifiedDate":"2023-10-04"},{"lineNumber":24,"author":{"gitId":"SebasFok"},"content":"        return taskList;","lastModifiedDate":"2023-10-04"},{"lineNumber":25,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-10-04"},{"lineNumber":26,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":27,"author":{"gitId":"SebasFok"},"content":"    /**","lastModifiedDate":"2023-10-05"},{"lineNumber":28,"author":{"gitId":"SebasFok"},"content":"     * Marks the task that the user specified using a task number as done and prints","lastModifiedDate":"2023-10-05"},{"lineNumber":29,"author":{"gitId":"SebasFok"},"content":"     * the marked task for the user. The task list will be updated. This method print","lastModifiedDate":"2023-10-05"},{"lineNumber":30,"author":{"gitId":"SebasFok"},"content":"     * an error message if the user inputs a wrong format or a task number that is out","lastModifiedDate":"2023-10-05"},{"lineNumber":31,"author":{"gitId":"SebasFok"},"content":"     * of bounds.","lastModifiedDate":"2023-10-05"},{"lineNumber":32,"author":{"gitId":"SebasFok"},"content":"     *","lastModifiedDate":"2023-10-05"},{"lineNumber":33,"author":{"gitId":"SebasFok"},"content":"     * @param taskNumber","lastModifiedDate":"2023-10-05"},{"lineNumber":34,"author":{"gitId":"SebasFok"},"content":"     * @param ui","lastModifiedDate":"2023-10-05"},{"lineNumber":35,"author":{"gitId":"SebasFok"},"content":"     */","lastModifiedDate":"2023-10-05"},{"lineNumber":36,"author":{"gitId":"SebasFok"},"content":"    public void markTask(String taskNumber, Ui ui) {","lastModifiedDate":"2023-10-04"},{"lineNumber":37,"author":{"gitId":"SebasFok"},"content":"        //Convert task number to element in tasks array","lastModifiedDate":"2023-10-04"},{"lineNumber":38,"author":{"gitId":"SebasFok"},"content":"        int target \u003d Integer.parseInt(taskNumber) - 1;","lastModifiedDate":"2023-10-04"},{"lineNumber":39,"author":{"gitId":"SebasFok"},"content":"        try {","lastModifiedDate":"2023-10-04"},{"lineNumber":40,"author":{"gitId":"SebasFok"},"content":"            Task task \u003d taskList.get(target);","lastModifiedDate":"2023-10-04"},{"lineNumber":41,"author":{"gitId":"SebasFok"},"content":"            task.markAsDone();","lastModifiedDate":"2023-10-04"},{"lineNumber":42,"author":{"gitId":"SebasFok"},"content":"            ui.printMarkAsDone(task);","lastModifiedDate":"2023-10-04"},{"lineNumber":43,"author":{"gitId":"SebasFok"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-10-04"},{"lineNumber":44,"author":{"gitId":"SebasFok"},"content":"            ui.printOutOfBoundsError(taskList);","lastModifiedDate":"2023-10-04"},{"lineNumber":45,"author":{"gitId":"SebasFok"},"content":"        }","lastModifiedDate":"2023-10-04"},{"lineNumber":46,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-10-04"},{"lineNumber":47,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":48,"author":{"gitId":"SebasFok"},"content":"    /**","lastModifiedDate":"2023-10-05"},{"lineNumber":49,"author":{"gitId":"SebasFok"},"content":"     * Unmarks the task that the user specified using a task number as done and prints","lastModifiedDate":"2023-10-05"},{"lineNumber":50,"author":{"gitId":"SebasFok"},"content":"     * the unmarked task for the user. The task list will be updated. This method print","lastModifiedDate":"2023-10-05"},{"lineNumber":51,"author":{"gitId":"SebasFok"},"content":"     * an error message if the user inputs a wrong format or a task number that is out","lastModifiedDate":"2023-10-05"},{"lineNumber":52,"author":{"gitId":"SebasFok"},"content":"     * of bounds.","lastModifiedDate":"2023-10-05"},{"lineNumber":53,"author":{"gitId":"SebasFok"},"content":"     *","lastModifiedDate":"2023-10-05"},{"lineNumber":54,"author":{"gitId":"SebasFok"},"content":"     * @param taskNumber","lastModifiedDate":"2023-10-05"},{"lineNumber":55,"author":{"gitId":"SebasFok"},"content":"     * @param ui","lastModifiedDate":"2023-10-05"},{"lineNumber":56,"author":{"gitId":"SebasFok"},"content":"     */","lastModifiedDate":"2023-10-05"},{"lineNumber":57,"author":{"gitId":"SebasFok"},"content":"    public void unmarkTask(String taskNumber, Ui ui) {","lastModifiedDate":"2023-10-04"},{"lineNumber":58,"author":{"gitId":"SebasFok"},"content":"        //Convert task number to element in tasks array","lastModifiedDate":"2023-10-04"},{"lineNumber":59,"author":{"gitId":"SebasFok"},"content":"        int target \u003d Integer.parseInt(taskNumber) - 1;","lastModifiedDate":"2023-10-04"},{"lineNumber":60,"author":{"gitId":"SebasFok"},"content":"        try {","lastModifiedDate":"2023-10-04"},{"lineNumber":61,"author":{"gitId":"SebasFok"},"content":"            Task task \u003d taskList.get(target);","lastModifiedDate":"2023-10-04"},{"lineNumber":62,"author":{"gitId":"SebasFok"},"content":"            task.unmarkAsDone();","lastModifiedDate":"2023-10-04"},{"lineNumber":63,"author":{"gitId":"SebasFok"},"content":"            ui.printUnmarkAsDone(task);","lastModifiedDate":"2023-10-04"},{"lineNumber":64,"author":{"gitId":"SebasFok"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-10-04"},{"lineNumber":65,"author":{"gitId":"SebasFok"},"content":"            ui.printOutOfBoundsError(taskList);","lastModifiedDate":"2023-10-04"},{"lineNumber":66,"author":{"gitId":"SebasFok"},"content":"        }","lastModifiedDate":"2023-10-04"},{"lineNumber":67,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-10-04"},{"lineNumber":68,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":69,"author":{"gitId":"SebasFok"},"content":"    /**","lastModifiedDate":"2023-10-05"},{"lineNumber":70,"author":{"gitId":"SebasFok"},"content":"     * Deletes the task that the user specified using a task number and prints","lastModifiedDate":"2023-10-05"},{"lineNumber":71,"author":{"gitId":"SebasFok"},"content":"     * the deleted task for the user. The task list will be updated. This method print","lastModifiedDate":"2023-10-05"},{"lineNumber":72,"author":{"gitId":"SebasFok"},"content":"     * an error message if the user inputs a wrong format or a task number that is out","lastModifiedDate":"2023-10-05"},{"lineNumber":73,"author":{"gitId":"SebasFok"},"content":"     * of bounds.","lastModifiedDate":"2023-10-05"},{"lineNumber":74,"author":{"gitId":"SebasFok"},"content":"     *","lastModifiedDate":"2023-10-05"},{"lineNumber":75,"author":{"gitId":"SebasFok"},"content":"     * @param taskNumber","lastModifiedDate":"2023-10-05"},{"lineNumber":76,"author":{"gitId":"SebasFok"},"content":"     * @param ui","lastModifiedDate":"2023-10-05"},{"lineNumber":77,"author":{"gitId":"SebasFok"},"content":"     */","lastModifiedDate":"2023-10-05"},{"lineNumber":78,"author":{"gitId":"SebasFok"},"content":"    public  void deleteTask(String taskNumber, Ui ui){","lastModifiedDate":"2023-10-04"},{"lineNumber":79,"author":{"gitId":"SebasFok"},"content":"        int target \u003d Integer.parseInt(taskNumber) - 1;","lastModifiedDate":"2023-10-04"},{"lineNumber":80,"author":{"gitId":"SebasFok"},"content":"        try {","lastModifiedDate":"2023-10-04"},{"lineNumber":81,"author":{"gitId":"SebasFok"},"content":"            Task task \u003d taskList.get(target);","lastModifiedDate":"2023-10-04"},{"lineNumber":82,"author":{"gitId":"SebasFok"},"content":"            taskList.remove(target);","lastModifiedDate":"2023-10-04"},{"lineNumber":83,"author":{"gitId":"SebasFok"},"content":"            Task.deleteOneTask();","lastModifiedDate":"2023-10-04"},{"lineNumber":84,"author":{"gitId":"SebasFok"},"content":"            ui.printDeleteTask(task);","lastModifiedDate":"2023-10-04"},{"lineNumber":85,"author":{"gitId":"SebasFok"},"content":"            ui.printNumberOfTasks(taskList);","lastModifiedDate":"2023-10-04"},{"lineNumber":86,"author":{"gitId":"SebasFok"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-10-04"},{"lineNumber":87,"author":{"gitId":"SebasFok"},"content":"            ui.printOutOfBoundsError(taskList);","lastModifiedDate":"2023-10-04"},{"lineNumber":88,"author":{"gitId":"SebasFok"},"content":"        }","lastModifiedDate":"2023-10-04"},{"lineNumber":89,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-10-04"},{"lineNumber":90,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":91,"author":{"gitId":"SebasFok"},"content":"    /**","lastModifiedDate":"2023-10-05"},{"lineNumber":92,"author":{"gitId":"SebasFok"},"content":"     * Creates a new todo task based on the description given. The tasks will be added","lastModifiedDate":"2023-10-05"},{"lineNumber":93,"author":{"gitId":"SebasFok"},"content":"     * to the task list, and an add task message will be printed along with the current","lastModifiedDate":"2023-10-05"},{"lineNumber":94,"author":{"gitId":"SebasFok"},"content":"     * number of tasks. Should the description be empty, SimonException will be thrown","lastModifiedDate":"2023-10-05"},{"lineNumber":95,"author":{"gitId":"SebasFok"},"content":"     *","lastModifiedDate":"2023-10-05"},{"lineNumber":96,"author":{"gitId":"SebasFok"},"content":"     * @param description","lastModifiedDate":"2023-10-05"},{"lineNumber":97,"author":{"gitId":"SebasFok"},"content":"     * @param ui","lastModifiedDate":"2023-10-05"},{"lineNumber":98,"author":{"gitId":"SebasFok"},"content":"     * @throws SimonException","lastModifiedDate":"2023-10-05"},{"lineNumber":99,"author":{"gitId":"SebasFok"},"content":"     */","lastModifiedDate":"2023-10-05"},{"lineNumber":100,"author":{"gitId":"SebasFok"},"content":"    public void addTodo(String description, Ui ui) throws SimonException {","lastModifiedDate":"2023-10-04"},{"lineNumber":101,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":102,"author":{"gitId":"SebasFok"},"content":"        String[] splitDescriptions \u003d description.split(\" \");","lastModifiedDate":"2023-10-04"},{"lineNumber":103,"author":{"gitId":"SebasFok"},"content":"        if (splitDescriptions.length \u003d\u003d 0 || splitDescriptions[0].isEmpty()) {","lastModifiedDate":"2023-10-04"},{"lineNumber":104,"author":{"gitId":"SebasFok"},"content":"            throw new SimonException();","lastModifiedDate":"2023-10-04"},{"lineNumber":105,"author":{"gitId":"SebasFok"},"content":"        }","lastModifiedDate":"2023-10-04"},{"lineNumber":106,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":107,"author":{"gitId":"SebasFok"},"content":"        taskList.add(new Todo(description));","lastModifiedDate":"2023-10-04"},{"lineNumber":108,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":109,"author":{"gitId":"SebasFok"},"content":"        ui.printAddTaskMessage(taskList);","lastModifiedDate":"2023-10-04"},{"lineNumber":110,"author":{"gitId":"SebasFok"},"content":"        ui.printNumberOfTasks(taskList);","lastModifiedDate":"2023-10-04"},{"lineNumber":111,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-10-04"},{"lineNumber":112,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":113,"author":{"gitId":"SebasFok"},"content":"    /**","lastModifiedDate":"2023-10-05"},{"lineNumber":114,"author":{"gitId":"SebasFok"},"content":"     * Creates a new event task based on the description given. The tasks will be added","lastModifiedDate":"2023-10-05"},{"lineNumber":115,"author":{"gitId":"SebasFok"},"content":"     * to the task list, and an add task message will be printed along with the current","lastModifiedDate":"2023-10-05"},{"lineNumber":116,"author":{"gitId":"SebasFok"},"content":"     * number of tasks. Should the description be empty, SimonException will be thrown.","lastModifiedDate":"2023-10-05"},{"lineNumber":117,"author":{"gitId":"SebasFok"},"content":"     * Should the format of the user input be incorrect, SimonException2 will be thrown.","lastModifiedDate":"2023-10-05"},{"lineNumber":118,"author":{"gitId":"SebasFok"},"content":"     *","lastModifiedDate":"2023-10-05"},{"lineNumber":119,"author":{"gitId":"SebasFok"},"content":"     * @param event","lastModifiedDate":"2023-10-05"},{"lineNumber":120,"author":{"gitId":"SebasFok"},"content":"     * @param ui","lastModifiedDate":"2023-10-05"},{"lineNumber":121,"author":{"gitId":"SebasFok"},"content":"     * @throws SimonException","lastModifiedDate":"2023-10-05"},{"lineNumber":122,"author":{"gitId":"SebasFok"},"content":"     * @throws SimonException2","lastModifiedDate":"2023-10-05"},{"lineNumber":123,"author":{"gitId":"SebasFok"},"content":"     */","lastModifiedDate":"2023-10-05"},{"lineNumber":124,"author":{"gitId":"SebasFok"},"content":"    public void addEvent(String event, Ui ui) throws SimonException, SimonException2 {","lastModifiedDate":"2023-10-04"},{"lineNumber":125,"author":{"gitId":"SebasFok"},"content":"        try {","lastModifiedDate":"2023-10-04"},{"lineNumber":126,"author":{"gitId":"SebasFok"},"content":"            //Split between \u0027description\u0027 and \u0027/from and /to\u0027","lastModifiedDate":"2023-10-04"},{"lineNumber":127,"author":{"gitId":"SebasFok"},"content":"            String[] splitElements \u003d event.split(\" /from \", 2);","lastModifiedDate":"2023-10-04"},{"lineNumber":128,"author":{"gitId":"SebasFok"},"content":"            String description \u003d splitElements[0];","lastModifiedDate":"2023-10-04"},{"lineNumber":129,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":130,"author":{"gitId":"SebasFok"},"content":"            String[] splitDescriptions \u003d description.split(\" \");","lastModifiedDate":"2023-10-04"},{"lineNumber":131,"author":{"gitId":"SebasFok"},"content":"            if (splitDescriptions.length \u003d\u003d 0 || splitDescriptions[0].isEmpty()) {","lastModifiedDate":"2023-10-04"},{"lineNumber":132,"author":{"gitId":"SebasFok"},"content":"                throw new SimonException();","lastModifiedDate":"2023-10-04"},{"lineNumber":133,"author":{"gitId":"SebasFok"},"content":"            }","lastModifiedDate":"2023-10-04"},{"lineNumber":134,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":135,"author":{"gitId":"SebasFok"},"content":"            //Split between \u0027/from\u0027 and \u0027/to\u0027","lastModifiedDate":"2023-10-04"},{"lineNumber":136,"author":{"gitId":"SebasFok"},"content":"            String[] time \u003d splitElements[1].split(\" /to \", 2);","lastModifiedDate":"2023-10-04"},{"lineNumber":137,"author":{"gitId":"SebasFok"},"content":"            String from \u003d time[0];","lastModifiedDate":"2023-10-04"},{"lineNumber":138,"author":{"gitId":"SebasFok"},"content":"            String to \u003d time[1];","lastModifiedDate":"2023-10-04"},{"lineNumber":139,"author":{"gitId":"SebasFok"},"content":"            taskList.add(new Event(description, from, to));","lastModifiedDate":"2023-10-04"},{"lineNumber":140,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":141,"author":{"gitId":"SebasFok"},"content":"            ui.printAddTaskMessage(taskList);","lastModifiedDate":"2023-10-04"},{"lineNumber":142,"author":{"gitId":"SebasFok"},"content":"            ui.printNumberOfTasks(taskList);","lastModifiedDate":"2023-10-04"},{"lineNumber":143,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":144,"author":{"gitId":"SebasFok"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-10-04"},{"lineNumber":145,"author":{"gitId":"SebasFok"},"content":"            throw new SimonException2();","lastModifiedDate":"2023-10-04"},{"lineNumber":146,"author":{"gitId":"SebasFok"},"content":"        }","lastModifiedDate":"2023-10-04"},{"lineNumber":147,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-10-04"},{"lineNumber":148,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":149,"author":{"gitId":"SebasFok"},"content":"    /**","lastModifiedDate":"2023-10-05"},{"lineNumber":150,"author":{"gitId":"SebasFok"},"content":"     * Creates a new deadline task based on the description given. The tasks will be added","lastModifiedDate":"2023-10-05"},{"lineNumber":151,"author":{"gitId":"SebasFok"},"content":"     * to the task list, and an add task message will be printed along with the current","lastModifiedDate":"2023-10-05"},{"lineNumber":152,"author":{"gitId":"SebasFok"},"content":"     * number of tasks. Should the description be empty, SimonException will be thrown.","lastModifiedDate":"2023-10-05"},{"lineNumber":153,"author":{"gitId":"SebasFok"},"content":"     * Should the format of the user input be incorrect, SimonException2 will be thrown.","lastModifiedDate":"2023-10-05"},{"lineNumber":154,"author":{"gitId":"SebasFok"},"content":"     *","lastModifiedDate":"2023-10-05"},{"lineNumber":155,"author":{"gitId":"SebasFok"},"content":"     * @param deadline","lastModifiedDate":"2023-10-05"},{"lineNumber":156,"author":{"gitId":"SebasFok"},"content":"     * @param ui","lastModifiedDate":"2023-10-05"},{"lineNumber":157,"author":{"gitId":"SebasFok"},"content":"     * @throws SimonException","lastModifiedDate":"2023-10-05"},{"lineNumber":158,"author":{"gitId":"SebasFok"},"content":"     * @throws SimonException2","lastModifiedDate":"2023-10-05"},{"lineNumber":159,"author":{"gitId":"SebasFok"},"content":"     */","lastModifiedDate":"2023-10-05"},{"lineNumber":160,"author":{"gitId":"SebasFok"},"content":"    public void addDeadline(String deadline, Ui ui) throws SimonException, SimonException2 {","lastModifiedDate":"2023-10-04"},{"lineNumber":161,"author":{"gitId":"SebasFok"},"content":"        try {","lastModifiedDate":"2023-10-04"},{"lineNumber":162,"author":{"gitId":"SebasFok"},"content":"            //Split between \u0027description\u0027 and \u0027/by\u0027","lastModifiedDate":"2023-10-04"},{"lineNumber":163,"author":{"gitId":"SebasFok"},"content":"            String[] splitElements \u003d deadline.split(\" /by \", 2);","lastModifiedDate":"2023-10-04"},{"lineNumber":164,"author":{"gitId":"SebasFok"},"content":"            String description \u003d splitElements[0];","lastModifiedDate":"2023-10-04"},{"lineNumber":165,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":166,"author":{"gitId":"SebasFok"},"content":"            String[] splitDescriptions \u003d description.split(\" \");","lastModifiedDate":"2023-10-04"},{"lineNumber":167,"author":{"gitId":"SebasFok"},"content":"            if (splitDescriptions.length \u003d\u003d 0 || splitDescriptions[0].isEmpty()) {","lastModifiedDate":"2023-10-04"},{"lineNumber":168,"author":{"gitId":"SebasFok"},"content":"                throw new SimonException();","lastModifiedDate":"2023-10-04"},{"lineNumber":169,"author":{"gitId":"SebasFok"},"content":"            }","lastModifiedDate":"2023-10-04"},{"lineNumber":170,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":171,"author":{"gitId":"SebasFok"},"content":"            String by \u003d splitElements[1];","lastModifiedDate":"2023-10-04"},{"lineNumber":172,"author":{"gitId":"SebasFok"},"content":"            taskList.add(new Deadline(description, by));","lastModifiedDate":"2023-10-04"},{"lineNumber":173,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":174,"author":{"gitId":"SebasFok"},"content":"            ui.printAddTaskMessage(taskList);","lastModifiedDate":"2023-10-04"},{"lineNumber":175,"author":{"gitId":"SebasFok"},"content":"            ui.printNumberOfTasks(taskList);","lastModifiedDate":"2023-10-04"},{"lineNumber":176,"author":{"gitId":"SebasFok"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-10-04"},{"lineNumber":177,"author":{"gitId":"SebasFok"},"content":"            throw new SimonException2();","lastModifiedDate":"2023-10-04"},{"lineNumber":178,"author":{"gitId":"SebasFok"},"content":"        }","lastModifiedDate":"2023-10-04"},{"lineNumber":179,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-10-04"},{"lineNumber":180,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":181,"author":{"gitId":"SebasFok"},"content":"    /**","lastModifiedDate":"2023-10-05"},{"lineNumber":182,"author":{"gitId":"SebasFok"},"content":"     * This method takes in a keyword and selects every task that contains the keyword.","lastModifiedDate":"2023-10-05"},{"lineNumber":183,"author":{"gitId":"SebasFok"},"content":"     * All the tasks will be placed in a new ArrayList and printed.","lastModifiedDate":"2023-10-05"},{"lineNumber":184,"author":{"gitId":"SebasFok"},"content":"     *","lastModifiedDate":"2023-10-05"},{"lineNumber":185,"author":{"gitId":"SebasFok"},"content":"     * @param word","lastModifiedDate":"2023-10-05"},{"lineNumber":186,"author":{"gitId":"SebasFok"},"content":"     * @param ui","lastModifiedDate":"2023-10-05"},{"lineNumber":187,"author":{"gitId":"SebasFok"},"content":"     */","lastModifiedDate":"2023-10-05"},{"lineNumber":188,"author":{"gitId":"SebasFok"},"content":"    public void printMatchingTasks(String word, Ui ui) {","lastModifiedDate":"2023-10-04"},{"lineNumber":189,"author":{"gitId":"SebasFok"},"content":"        ArrayList\u003cTask\u003e matchingList \u003d (ArrayList\u003cTask\u003e) taskList.stream()","lastModifiedDate":"2023-10-04"},{"lineNumber":190,"author":{"gitId":"SebasFok"},"content":"                .filter(n -\u003e n.getDescription().contains(word))","lastModifiedDate":"2023-10-04"},{"lineNumber":191,"author":{"gitId":"SebasFok"},"content":"                .collect(toList());","lastModifiedDate":"2023-10-04"},{"lineNumber":192,"author":{"gitId":"SebasFok"},"content":"        ui.printMatchingList(matchingList);","lastModifiedDate":"2023-10-04"},{"lineNumber":193,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-10-04"},{"lineNumber":194,"author":{"gitId":"SebasFok"},"content":"}","lastModifiedDate":"2023-10-04"}],"authorContributionMap":{"SebasFok":194}},{"path":"src/main/java/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SebasFok"},"content":"package task;","lastModifiedDate":"2023-09-23"},{"lineNumber":2,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":3,"author":{"gitId":"SebasFok"},"content":"/**","lastModifiedDate":"2023-10-05"},{"lineNumber":4,"author":{"gitId":"SebasFok"},"content":" * The Todo class represents a task with a description and no specific deadline or event time.","lastModifiedDate":"2023-10-05"},{"lineNumber":5,"author":{"gitId":"SebasFok"},"content":" * It is a subclass of the Task class and includes additional functionality for managing todo tasks.","lastModifiedDate":"2023-10-05"},{"lineNumber":6,"author":{"gitId":"SebasFok"},"content":" */","lastModifiedDate":"2023-10-05"},{"lineNumber":7,"author":{"gitId":"SebasFok"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-09-08"},{"lineNumber":8,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":9,"author":{"gitId":"SebasFok"},"content":"    /**","lastModifiedDate":"2023-10-05"},{"lineNumber":10,"author":{"gitId":"SebasFok"},"content":"     * Constructs a new Todo task with the given description.","lastModifiedDate":"2023-10-05"},{"lineNumber":11,"author":{"gitId":"SebasFok"},"content":"     *","lastModifiedDate":"2023-10-05"},{"lineNumber":12,"author":{"gitId":"SebasFok"},"content":"     * @param description The description of the todo task.","lastModifiedDate":"2023-10-05"},{"lineNumber":13,"author":{"gitId":"SebasFok"},"content":"     */","lastModifiedDate":"2023-10-05"},{"lineNumber":14,"author":{"gitId":"SebasFok"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-09-08"},{"lineNumber":15,"author":{"gitId":"SebasFok"},"content":"        super(description);","lastModifiedDate":"2023-09-08"},{"lineNumber":16,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":17,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":18,"author":{"gitId":"SebasFok"},"content":"    /**","lastModifiedDate":"2023-10-05"},{"lineNumber":19,"author":{"gitId":"SebasFok"},"content":"     * Returns a string representation of the Todo task for display purposes.","lastModifiedDate":"2023-10-05"},{"lineNumber":20,"author":{"gitId":"SebasFok"},"content":"     *","lastModifiedDate":"2023-10-05"},{"lineNumber":21,"author":{"gitId":"SebasFok"},"content":"     * @return A formatted string containing \"[T]\" for todo tasks, the status icon, and description.","lastModifiedDate":"2023-10-05"},{"lineNumber":22,"author":{"gitId":"SebasFok"},"content":"     */","lastModifiedDate":"2023-10-05"},{"lineNumber":23,"author":{"gitId":"SebasFok"},"content":"    @Override","lastModifiedDate":"2023-09-08"},{"lineNumber":24,"author":{"gitId":"SebasFok"},"content":"    public String toString() {","lastModifiedDate":"2023-09-08"},{"lineNumber":25,"author":{"gitId":"SebasFok"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-09-08"},{"lineNumber":26,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":27,"author":{"gitId":"SebasFok"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":28,"author":{"gitId":"SebasFok"},"content":"    /**","lastModifiedDate":"2023-10-05"},{"lineNumber":29,"author":{"gitId":"SebasFok"},"content":"     * Returns a string representation of the Todo task suitable for saving to a text file.","lastModifiedDate":"2023-10-05"},{"lineNumber":30,"author":{"gitId":"SebasFok"},"content":"     *","lastModifiedDate":"2023-10-05"},{"lineNumber":31,"author":{"gitId":"SebasFok"},"content":"     * @return A formatted string containing \"T\" to identify todo tasks, the status icon,","lastModifiedDate":"2023-10-05"},{"lineNumber":32,"author":{"gitId":"SebasFok"},"content":"     *         and description.","lastModifiedDate":"2023-10-05"},{"lineNumber":33,"author":{"gitId":"SebasFok"},"content":"     */","lastModifiedDate":"2023-10-05"},{"lineNumber":34,"author":{"gitId":"SebasFok"},"content":"    @Override","lastModifiedDate":"2023-09-21"},{"lineNumber":35,"author":{"gitId":"SebasFok"},"content":"    public String toText() {","lastModifiedDate":"2023-09-21"},{"lineNumber":36,"author":{"gitId":"SebasFok"},"content":"        return \"T\" + \" | \" + getStatusIcon() + \" | \" + getDescription();","lastModifiedDate":"2023-09-21"},{"lineNumber":37,"author":{"gitId":"SebasFok"},"content":"    }","lastModifiedDate":"2023-09-21"},{"lineNumber":38,"author":{"gitId":"SebasFok"},"content":"}","lastModifiedDate":"2023-09-08"}],"authorContributionMap":{"SebasFok":38}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"SebasFok"},"content":"java -classpath ..\\bin Simon \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-09-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"SebasFok":1,"-":20}}]
