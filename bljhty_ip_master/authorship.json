[{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bljhty"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"bljhty"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-09-05"},{"lineNumber":3,"author":{"gitId":"bljhty"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"bljhty"},"content":"import tasks.Deadline;","lastModifiedDate":"2023-09-13"},{"lineNumber":5,"author":{"gitId":"bljhty"},"content":"import tasks.Event;","lastModifiedDate":"2023-09-13"},{"lineNumber":6,"author":{"gitId":"bljhty"},"content":"import tasks.Task;","lastModifiedDate":"2023-09-13"},{"lineNumber":7,"author":{"gitId":"bljhty"},"content":"import tasks.Todo;","lastModifiedDate":"2023-09-13"},{"lineNumber":8,"author":{"gitId":"bljhty"},"content":"import tasks.DukeException;","lastModifiedDate":"2023-09-13"},{"lineNumber":9,"author":{"gitId":"bljhty"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":11,"author":{"gitId":"bljhty"},"content":"    public static final String lineDivider \u003d \"______________________________________________________________________\";","lastModifiedDate":"2023-09-13"},{"lineNumber":12,"author":{"gitId":"bljhty"},"content":"    private static final String COMMAND_EXIT \u003d \"bye\";","lastModifiedDate":"2023-09-19"},{"lineNumber":13,"author":{"gitId":"bljhty"},"content":"    private static final String COMMAND_LIST \u003d \"list\";","lastModifiedDate":"2023-09-19"},{"lineNumber":14,"author":{"gitId":"bljhty"},"content":"    private static final String COMMAND_TODO \u003d \"todo\";","lastModifiedDate":"2023-09-19"},{"lineNumber":15,"author":{"gitId":"bljhty"},"content":"    private static final String COMMAND_DEADLINE \u003d \"deadline\";","lastModifiedDate":"2023-09-19"},{"lineNumber":16,"author":{"gitId":"bljhty"},"content":"    private static final String COMMAND_EVENT \u003d \"event\";","lastModifiedDate":"2023-09-19"},{"lineNumber":17,"author":{"gitId":"bljhty"},"content":"    private static final String COMMAND_MARK \u003d \"mark\";","lastModifiedDate":"2023-09-19"},{"lineNumber":18,"author":{"gitId":"bljhty"},"content":"    private static final String COMMAND_UNMARK \u003d \"unmark\";","lastModifiedDate":"2023-09-19"},{"lineNumber":19,"author":{"gitId":"bljhty"},"content":"    private static final String COMMAND_DELETE \u003d \"delete\";","lastModifiedDate":"2023-09-19"},{"lineNumber":20,"author":{"gitId":"bljhty"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":21,"author":{"gitId":"bljhty"},"content":"    private static final String HELP_MESSAGE \u003d \"\\nHere are the list of commands that you can use:\\n\"","lastModifiedDate":"2023-09-19"},{"lineNumber":22,"author":{"gitId":"bljhty"},"content":"            + COMMAND_EXIT + \" - exits the program\\n\"","lastModifiedDate":"2023-09-19"},{"lineNumber":23,"author":{"gitId":"bljhty"},"content":"            + COMMAND_LIST + \" - lists all the tasks\\n\"","lastModifiedDate":"2023-09-19"},{"lineNumber":24,"author":{"gitId":"bljhty"},"content":"            + COMMAND_TODO + \" \u003cdescription\u003e - adds a ToDo task\\n\"","lastModifiedDate":"2023-09-19"},{"lineNumber":25,"author":{"gitId":"bljhty"},"content":"            + COMMAND_DEADLINE + \" \u003cdescription\u003e /by \u003ctime\u003e - adds a Deadline task\\n\"","lastModifiedDate":"2023-09-19"},{"lineNumber":26,"author":{"gitId":"bljhty"},"content":"            + COMMAND_EVENT + \" \u003cdescription\u003e /from \u003ctime\u003e /to \u003ctime\u003e - adds an Event task\\n\"","lastModifiedDate":"2023-09-19"},{"lineNumber":27,"author":{"gitId":"bljhty"},"content":"            + COMMAND_MARK + \" \u003ctask number\u003e - marks the task as done\\n\"","lastModifiedDate":"2023-09-19"},{"lineNumber":28,"author":{"gitId":"bljhty"},"content":"            + COMMAND_UNMARK + \" \u003ctask number\u003e - marks the task as not done yet\\n\"","lastModifiedDate":"2023-09-19"},{"lineNumber":29,"author":{"gitId":"bljhty"},"content":"            + COMMAND_DELETE + \" \u003ctask number\u003e - deletes the task\\n\";","lastModifiedDate":"2023-09-19"},{"lineNumber":30,"author":{"gitId":"bljhty"},"content":"    /*","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"bljhty"},"content":"     * This method prints the greetings message when the user starts the program.","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"bljhty"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"bljhty"},"content":"    public static void greet() {","lastModifiedDate":"2023-09-05"},{"lineNumber":34,"author":{"gitId":"bljhty"},"content":"        String logo \u003d \"  ____                  \\n\"","lastModifiedDate":"2023-08-26"},{"lineNumber":35,"author":{"gitId":"bljhty"},"content":"                + \" |  _ \\\\  ___  _ __ ___  \\n\"","lastModifiedDate":"2023-08-26"},{"lineNumber":36,"author":{"gitId":"bljhty"},"content":"                + \" | | | |/ _ \\\\| \u0027_ ` _ \\\\ \\n\"","lastModifiedDate":"2023-08-26"},{"lineNumber":37,"author":{"gitId":"bljhty"},"content":"                + \" | |_| | (_) | | | | | |\\n\"","lastModifiedDate":"2023-08-26"},{"lineNumber":38,"author":{"gitId":"bljhty"},"content":"                + \" |____/ \\\\___/|_| |_| |_|\\n\";","lastModifiedDate":"2023-08-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        System.out.println(\"Hello from\\n\" + logo);","lastModifiedDate":"2019-07-29"},{"lineNumber":40,"author":{"gitId":"bljhty"},"content":"        String greetings \u003d lineDivider +","lastModifiedDate":"2023-09-13"},{"lineNumber":41,"author":{"gitId":"bljhty"},"content":"                \"\\nHello! I\u0027m Dom\\n\" +","lastModifiedDate":"2023-09-13"},{"lineNumber":42,"author":{"gitId":"bljhty"},"content":"                \"What can I do for you?\\n\" +","lastModifiedDate":"2023-09-13"},{"lineNumber":43,"author":{"gitId":"bljhty"},"content":"                lineDivider;","lastModifiedDate":"2023-09-13"},{"lineNumber":44,"author":{"gitId":"bljhty"},"content":"        System.out.println(greetings);","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"bljhty"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"bljhty"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"bljhty"},"content":"    /*","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"bljhty"},"content":"     * This method prints the goodbye message when the user exits the program.","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"bljhty"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"bljhty"},"content":"    public static void goodbye() {","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"bljhty"},"content":"        echo(\"bye\");","lastModifiedDate":"2023-09-19"},{"lineNumber":52,"author":{"gitId":"bljhty"},"content":"        System.out.println(\"\\nBye. Hope to see you again soon!\");","lastModifiedDate":"2023-09-19"},{"lineNumber":53,"author":{"gitId":"bljhty"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"bljhty"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"bljhty"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":56,"author":{"gitId":"bljhty"},"content":"    /*","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"bljhty"},"content":"     * This method prints the input message.","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"bljhty"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"bljhty"},"content":"    public static void echo(String input) {","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"bljhty"},"content":"        System.out.println(input);","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"bljhty"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":62,"author":{"gitId":"bljhty"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"bljhty"},"content":"    /*","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"bljhty"},"content":"     * This method prints the list of tasks.","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"bljhty"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"bljhty"},"content":"    private static void listTasks(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"bljhty"},"content":"        if (tasks.isEmpty()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"bljhty"},"content":"            System.out.println(\"ERROR: â˜¹ OOPS!!! No tasks is available.\");","lastModifiedDate":"2023-09-19"},{"lineNumber":69,"author":{"gitId":"bljhty"},"content":"        } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":70,"author":{"gitId":"bljhty"},"content":"            System.out.println(\" Here are the tasks in your list:\");","lastModifiedDate":"2023-08-30"},{"lineNumber":71,"author":{"gitId":"bljhty"},"content":"            for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-08-30"},{"lineNumber":72,"author":{"gitId":"bljhty"},"content":"                Task task \u003d tasks.get(i);","lastModifiedDate":"2023-08-30"},{"lineNumber":73,"author":{"gitId":"bljhty"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":74,"author":{"gitId":"bljhty"},"content":"                /*","lastModifiedDate":"2023-09-13"},{"lineNumber":75,"author":{"gitId":"bljhty"},"content":"                 * checks if the task is a ToDo, Deadline or Event","lastModifiedDate":"2023-09-13"},{"lineNumber":76,"author":{"gitId":"bljhty"},"content":"                 * prints the task type, status icon and description","lastModifiedDate":"2023-09-13"},{"lineNumber":77,"author":{"gitId":"bljhty"},"content":"                 */","lastModifiedDate":"2023-09-13"},{"lineNumber":78,"author":{"gitId":"bljhty"},"content":"                String taskType \u003d task.getClass().equals(Todo.class) ? \"[T]\"","lastModifiedDate":"2023-09-13"},{"lineNumber":79,"author":{"gitId":"bljhty"},"content":"                        : (task.getClass().equals(Deadline.class) ? \"[D]\" : \"[E]\");","lastModifiedDate":"2023-09-13"},{"lineNumber":80,"author":{"gitId":"bljhty"},"content":"                String statusIcon \u003d task.getStatusIcon();","lastModifiedDate":"2023-09-06"},{"lineNumber":81,"author":{"gitId":"bljhty"},"content":"                String description \u003d task.getDescription();","lastModifiedDate":"2023-09-06"},{"lineNumber":82,"author":{"gitId":"bljhty"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":83,"author":{"gitId":"bljhty"},"content":"                if (task.getClass().equals(Deadline.class)) {","lastModifiedDate":"2023-09-13"},{"lineNumber":84,"author":{"gitId":"bljhty"},"content":"                    description +\u003d \" (by: \" + ((Deadline) task).getBy() + \")\";","lastModifiedDate":"2023-09-06"},{"lineNumber":85,"author":{"gitId":"bljhty"},"content":"                } else if (task.getClass().equals(Event.class)) {","lastModifiedDate":"2023-09-13"},{"lineNumber":86,"author":{"gitId":"bljhty"},"content":"                    description +\u003d \" (from: \" + ((Event) task).getFrom() + \" to: \" + ((Event) task).getTo() + \")\";","lastModifiedDate":"2023-09-06"},{"lineNumber":87,"author":{"gitId":"bljhty"},"content":"                }","lastModifiedDate":"2023-09-06"},{"lineNumber":88,"author":{"gitId":"bljhty"},"content":"                System.out.println(\" \" + (i + 1) + \".\" + taskType + statusIcon + \" \" + description);","lastModifiedDate":"2023-09-06"},{"lineNumber":89,"author":{"gitId":"bljhty"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":90,"author":{"gitId":"bljhty"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":91,"author":{"gitId":"bljhty"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":92,"author":{"gitId":"bljhty"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":93,"author":{"gitId":"bljhty"},"content":"    /*","lastModifiedDate":"2023-09-19"},{"lineNumber":94,"author":{"gitId":"bljhty"},"content":"     * This method marks the task as done.","lastModifiedDate":"2023-09-19"},{"lineNumber":95,"author":{"gitId":"bljhty"},"content":"     *","lastModifiedDate":"2023-09-19"},{"lineNumber":96,"author":{"gitId":"bljhty"},"content":"     * splits the command into two parts: command type and task number","lastModifiedDate":"2023-09-19"},{"lineNumber":97,"author":{"gitId":"bljhty"},"content":"     * e.g. mark 1 will be split into \"mark\" and \"1\"","lastModifiedDate":"2023-09-19"},{"lineNumber":98,"author":{"gitId":"bljhty"},"content":"     * the task number is then parsed into an integer","lastModifiedDate":"2023-09-13"},{"lineNumber":99,"author":{"gitId":"bljhty"},"content":"     * the task number is then used to get the task from the list of tasks","lastModifiedDate":"2023-09-19"},{"lineNumber":100,"author":{"gitId":"bljhty"},"content":"     * If the task number is invalid, it will print an error message.","lastModifiedDate":"2023-09-19"},{"lineNumber":101,"author":{"gitId":"bljhty"},"content":"     * If the task number is valid, it will print the task that is marked as done.","lastModifiedDate":"2023-09-19"},{"lineNumber":102,"author":{"gitId":"bljhty"},"content":"     *","lastModifiedDate":"2023-09-19"},{"lineNumber":103,"author":{"gitId":"bljhty"},"content":"     * @param tasks the list of tasks","lastModifiedDate":"2023-09-19"},{"lineNumber":104,"author":{"gitId":"bljhty"},"content":"     * @param parts the command that is split into two parts","lastModifiedDate":"2023-09-19"},{"lineNumber":105,"author":{"gitId":"bljhty"},"content":"     * @throws DukeException if the task number is empty or not an integer","lastModifiedDate":"2023-09-19"},{"lineNumber":106,"author":{"gitId":"bljhty"},"content":"     * @throws NumberFormatException if the task number is not an integer","lastModifiedDate":"2023-09-19"},{"lineNumber":107,"author":{"gitId":"bljhty"},"content":"     */","lastModifiedDate":"2023-09-13"},{"lineNumber":108,"author":{"gitId":"bljhty"},"content":"    private static void markTask(ArrayList\u003cTask\u003e tasks, String[] parts) {","lastModifiedDate":"2023-09-19"},{"lineNumber":109,"author":{"gitId":"bljhty"},"content":"        try {","lastModifiedDate":"2023-09-13"},{"lineNumber":110,"author":{"gitId":"bljhty"},"content":"            if (parts.length \u003c 2 || parts[1].isEmpty()) {","lastModifiedDate":"2023-09-19"},{"lineNumber":111,"author":{"gitId":"bljhty"},"content":"                throw new DukeException();","lastModifiedDate":"2023-09-19"},{"lineNumber":112,"author":{"gitId":"bljhty"},"content":"            }","lastModifiedDate":"2023-09-19"},{"lineNumber":113,"author":{"gitId":"bljhty"},"content":"            int taskIndex \u003d Integer.parseInt(parts[1]) - 1;","lastModifiedDate":"2023-08-30"},{"lineNumber":114,"author":{"gitId":"bljhty"},"content":"            if (taskIndex \u003e\u003d 0 \u0026\u0026 taskIndex \u003c tasks.size()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":115,"author":{"gitId":"bljhty"},"content":"                Task task \u003d tasks.get(taskIndex);","lastModifiedDate":"2023-08-30"},{"lineNumber":116,"author":{"gitId":"bljhty"},"content":"                task.markAsDone(true);","lastModifiedDate":"2023-08-30"},{"lineNumber":117,"author":{"gitId":"bljhty"},"content":"                System.out.println(\" Nice! I\u0027ve marked this task as done:\\n\" + \"   \" + task.getStatusIcon()","lastModifiedDate":"2023-09-19"},{"lineNumber":118,"author":{"gitId":"bljhty"},"content":"                        + \" \" + task.getDescription());","lastModifiedDate":"2023-08-30"},{"lineNumber":119,"author":{"gitId":"bljhty"},"content":"            } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":120,"author":{"gitId":"bljhty"},"content":"                System.out.println(\"ERROR: â˜¹ OOPS!!! Invalid task number.\");","lastModifiedDate":"2023-09-19"},{"lineNumber":121,"author":{"gitId":"bljhty"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":122,"author":{"gitId":"bljhty"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-19"},{"lineNumber":123,"author":{"gitId":"bljhty"},"content":"            System.out.println(\"Error: â˜¹ OOPS!!! Task number cannot be empty\\n\");","lastModifiedDate":"2023-09-19"},{"lineNumber":124,"author":{"gitId":"bljhty"},"content":"            System.out.println(\"Please enter command in the format: mark \u003ctask number\u003e\");","lastModifiedDate":"2023-09-19"},{"lineNumber":125,"author":{"gitId":"bljhty"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-09-13"},{"lineNumber":126,"author":{"gitId":"bljhty"},"content":"            System.out.println(\"Error: â˜¹ OOPS!!! Task number must be an integer.\\n\");","lastModifiedDate":"2023-09-19"},{"lineNumber":127,"author":{"gitId":"bljhty"},"content":"            System.out.println(\"Please enter command in the format: mark \u003ctask number\u003e\");","lastModifiedDate":"2023-09-19"},{"lineNumber":128,"author":{"gitId":"bljhty"},"content":"        }","lastModifiedDate":"2023-09-19"},{"lineNumber":129,"author":{"gitId":"bljhty"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":130,"author":{"gitId":"bljhty"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":131,"author":{"gitId":"bljhty"},"content":"    /*","lastModifiedDate":"2023-09-19"},{"lineNumber":132,"author":{"gitId":"bljhty"},"content":"     * This method marks the task as not done yet.","lastModifiedDate":"2023-09-19"},{"lineNumber":133,"author":{"gitId":"bljhty"},"content":"     *","lastModifiedDate":"2023-09-19"},{"lineNumber":134,"author":{"gitId":"bljhty"},"content":"     * splits the command into two parts: command type and task number","lastModifiedDate":"2023-09-19"},{"lineNumber":135,"author":{"gitId":"bljhty"},"content":"     * e.g. unmark 1 will be split into \"unmark\" and \"1\"","lastModifiedDate":"2023-09-19"},{"lineNumber":136,"author":{"gitId":"bljhty"},"content":"     * the task number is then parsed into an integer","lastModifiedDate":"2023-09-13"},{"lineNumber":137,"author":{"gitId":"bljhty"},"content":"     * the task number is then used to get the task from the list of tasks","lastModifiedDate":"2023-09-19"},{"lineNumber":138,"author":{"gitId":"bljhty"},"content":"     * If the task number is invalid, it will print an error message.","lastModifiedDate":"2023-09-19"},{"lineNumber":139,"author":{"gitId":"bljhty"},"content":"     * If the task number is valid, it will print the task that is marked as not done yet.","lastModifiedDate":"2023-09-19"},{"lineNumber":140,"author":{"gitId":"bljhty"},"content":"     *","lastModifiedDate":"2023-09-19"},{"lineNumber":141,"author":{"gitId":"bljhty"},"content":"     * @param tasks the list of tasks","lastModifiedDate":"2023-09-19"},{"lineNumber":142,"author":{"gitId":"bljhty"},"content":"     * @param parts the command that is split into two parts","lastModifiedDate":"2023-09-19"},{"lineNumber":143,"author":{"gitId":"bljhty"},"content":"     * @throws DukeException if the task number is empty or not an integer","lastModifiedDate":"2023-09-19"},{"lineNumber":144,"author":{"gitId":"bljhty"},"content":"     * @throws NumberFormatException if the task number is not an integer","lastModifiedDate":"2023-09-19"},{"lineNumber":145,"author":{"gitId":"bljhty"},"content":"     */","lastModifiedDate":"2023-09-13"},{"lineNumber":146,"author":{"gitId":"bljhty"},"content":"    private static void unmarkTask(ArrayList\u003cTask\u003e tasks, String[] parts) {","lastModifiedDate":"2023-09-19"},{"lineNumber":147,"author":{"gitId":"bljhty"},"content":"        try {","lastModifiedDate":"2023-09-13"},{"lineNumber":148,"author":{"gitId":"bljhty"},"content":"            if (parts.length \u003c 2 || parts[1].isEmpty()) {","lastModifiedDate":"2023-09-19"},{"lineNumber":149,"author":{"gitId":"bljhty"},"content":"                throw new DukeException();","lastModifiedDate":"2023-09-19"},{"lineNumber":150,"author":{"gitId":"bljhty"},"content":"            }","lastModifiedDate":"2023-09-19"},{"lineNumber":151,"author":{"gitId":"bljhty"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":152,"author":{"gitId":"bljhty"},"content":"            int taskIndex \u003d Integer.parseInt(parts[1]) - 1;","lastModifiedDate":"2023-08-30"},{"lineNumber":153,"author":{"gitId":"bljhty"},"content":"            if (taskIndex \u003e\u003d 0 \u0026\u0026 taskIndex \u003c tasks.size()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":154,"author":{"gitId":"bljhty"},"content":"                Task task \u003d tasks.get(taskIndex);","lastModifiedDate":"2023-08-30"},{"lineNumber":155,"author":{"gitId":"bljhty"},"content":"                task.markAsUndone(true);","lastModifiedDate":"2023-08-30"},{"lineNumber":156,"author":{"gitId":"bljhty"},"content":"                System.out.println(\"OK, I\u0027ve marked this task as not done yet:\\n\" + \" \"","lastModifiedDate":"2023-08-30"},{"lineNumber":157,"author":{"gitId":"bljhty"},"content":"                        + task.getStatusIcon() + \" \" + task.getDescription());","lastModifiedDate":"2023-08-30"},{"lineNumber":158,"author":{"gitId":"bljhty"},"content":"            } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":159,"author":{"gitId":"bljhty"},"content":"                System.out.println(\"Error: Invalid task number.\");","lastModifiedDate":"2023-09-19"},{"lineNumber":160,"author":{"gitId":"bljhty"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":161,"author":{"gitId":"bljhty"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-19"},{"lineNumber":162,"author":{"gitId":"bljhty"},"content":"            System.out.println(\"Error: â˜¹ OOPS!!! Task number cannot be empty\\n\");","lastModifiedDate":"2023-09-19"},{"lineNumber":163,"author":{"gitId":"bljhty"},"content":"            System.out.println(\"Please enter command in the format: unmark \u003ctask number\u003e\");","lastModifiedDate":"2023-09-19"},{"lineNumber":164,"author":{"gitId":"bljhty"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-09-13"},{"lineNumber":165,"author":{"gitId":"bljhty"},"content":"            System.out.println(\"Error: â˜¹ OOPS!!! Task number must be an integer.\\n\");","lastModifiedDate":"2023-09-19"},{"lineNumber":166,"author":{"gitId":"bljhty"},"content":"            System.out.println(\"Please enter command in the format: unmark \u003ctask number\u003e\");","lastModifiedDate":"2023-09-19"},{"lineNumber":167,"author":{"gitId":"bljhty"},"content":"        }","lastModifiedDate":"2023-09-19"},{"lineNumber":168,"author":{"gitId":"bljhty"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":169,"author":{"gitId":"bljhty"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":170,"author":{"gitId":"bljhty"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":171,"author":{"gitId":"bljhty"},"content":"    /*","lastModifiedDate":"2023-09-19"},{"lineNumber":172,"author":{"gitId":"bljhty"},"content":"     * This method adds a ToDo task.","lastModifiedDate":"2023-09-19"},{"lineNumber":173,"author":{"gitId":"bljhty"},"content":"     * splits the command into two parts: command type and description","lastModifiedDate":"2023-09-19"},{"lineNumber":174,"author":{"gitId":"bljhty"},"content":"     * e.g. todo read book will be split into \"todo\" and \"read book\"","lastModifiedDate":"2023-09-19"},{"lineNumber":175,"author":{"gitId":"bljhty"},"content":"     * the description is then used to create a new ToDo task","lastModifiedDate":"2023-09-19"},{"lineNumber":176,"author":{"gitId":"bljhty"},"content":"     * the new ToDo task is then added to the list of tasks","lastModifiedDate":"2023-09-19"},{"lineNumber":177,"author":{"gitId":"bljhty"},"content":"     * If the description is empty, it will print an error message.","lastModifiedDate":"2023-09-19"},{"lineNumber":178,"author":{"gitId":"bljhty"},"content":"     * If the description is not empty, it will print the new ToDo task.","lastModifiedDate":"2023-09-19"},{"lineNumber":179,"author":{"gitId":"bljhty"},"content":"     *","lastModifiedDate":"2023-09-19"},{"lineNumber":180,"author":{"gitId":"bljhty"},"content":"     * @param tasks the list of tasks","lastModifiedDate":"2023-09-19"},{"lineNumber":181,"author":{"gitId":"bljhty"},"content":"     * @param parts the command that is split into two parts","lastModifiedDate":"2023-09-19"},{"lineNumber":182,"author":{"gitId":"bljhty"},"content":"     * @throws DukeException if the description is empty","lastModifiedDate":"2023-09-19"},{"lineNumber":183,"author":{"gitId":"bljhty"},"content":"     * @throws NumberFormatException if the task number is not an integer","lastModifiedDate":"2023-09-19"},{"lineNumber":184,"author":{"gitId":"bljhty"},"content":"     *","lastModifiedDate":"2023-09-19"},{"lineNumber":185,"author":{"gitId":"bljhty"},"content":"     */","lastModifiedDate":"2023-09-13"},{"lineNumber":186,"author":{"gitId":"bljhty"},"content":"    private static void addTodo(ArrayList\u003cTask\u003e tasks, String[] parts) {","lastModifiedDate":"2023-09-19"},{"lineNumber":187,"author":{"gitId":"bljhty"},"content":"        try {","lastModifiedDate":"2023-09-13"},{"lineNumber":188,"author":{"gitId":"bljhty"},"content":"            if (parts.length \u003c 2 || parts[1].isEmpty()) {","lastModifiedDate":"2023-09-19"},{"lineNumber":189,"author":{"gitId":"bljhty"},"content":"                throw new DukeException();","lastModifiedDate":"2023-09-13"},{"lineNumber":190,"author":{"gitId":"bljhty"},"content":"            }","lastModifiedDate":"2023-09-13"},{"lineNumber":191,"author":{"gitId":"bljhty"},"content":"            tasks.add(new Todo(parts[1]));","lastModifiedDate":"2023-09-19"},{"lineNumber":192,"author":{"gitId":"bljhty"},"content":"            System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2023-09-06"},{"lineNumber":193,"author":{"gitId":"bljhty"},"content":"            System.out.println(\"  \" + tasks.get(tasks.size() - 1));","lastModifiedDate":"2023-09-06"},{"lineNumber":194,"author":{"gitId":"bljhty"},"content":"            System.out.println(\"Now you have \" + tasks.size() + \" tasks in the list.\");","lastModifiedDate":"2023-09-06"},{"lineNumber":195,"author":{"gitId":"bljhty"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-13"},{"lineNumber":196,"author":{"gitId":"bljhty"},"content":"            System.out.println(\"â˜¹ OOPS!!! The description of a todo cannot be empty.\\n\");","lastModifiedDate":"2023-09-13"},{"lineNumber":197,"author":{"gitId":"bljhty"},"content":"            System.out.println(\"please enter command in the format: todo \u003cdescription\u003e\");","lastModifiedDate":"2023-09-13"},{"lineNumber":198,"author":{"gitId":"bljhty"},"content":"        }","lastModifiedDate":"2023-09-13"},{"lineNumber":199,"author":{"gitId":"bljhty"},"content":"    }","lastModifiedDate":"2023-09-19"},{"lineNumber":200,"author":{"gitId":"bljhty"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":201,"author":{"gitId":"bljhty"},"content":"    /*","lastModifiedDate":"2023-09-19"},{"lineNumber":202,"author":{"gitId":"bljhty"},"content":"     * This method adds a Deadline task.","lastModifiedDate":"2023-09-19"},{"lineNumber":203,"author":{"gitId":"bljhty"},"content":"     * splits the command into two parts: command type and description","lastModifiedDate":"2023-09-19"},{"lineNumber":204,"author":{"gitId":"bljhty"},"content":"     * e.g. deadline return book /by 2pm will be split into \"deadline\" and \"return book /by 2pm\"","lastModifiedDate":"2023-09-19"},{"lineNumber":205,"author":{"gitId":"bljhty"},"content":"     * the description is then used to create a new Deadline task","lastModifiedDate":"2023-09-19"},{"lineNumber":206,"author":{"gitId":"bljhty"},"content":"     * the new Deadline task is then added to the list of tasks","lastModifiedDate":"2023-09-19"},{"lineNumber":207,"author":{"gitId":"bljhty"},"content":"     * If the description is empty, it will print an error message.","lastModifiedDate":"2023-09-19"},{"lineNumber":208,"author":{"gitId":"bljhty"},"content":"     * If the description is not empty, it will print the new Deadline task.","lastModifiedDate":"2023-09-19"},{"lineNumber":209,"author":{"gitId":"bljhty"},"content":"     * If the description is not empty, but the time is empty, it will print an error message.","lastModifiedDate":"2023-09-19"},{"lineNumber":210,"author":{"gitId":"bljhty"},"content":"     * If the description is not empty, but the time is not empty, it will print the new Deadline task.","lastModifiedDate":"2023-09-19"},{"lineNumber":211,"author":{"gitId":"bljhty"},"content":"     * If the description is not empty, but the time is not empty, but the time is invalid, it will print an error message.","lastModifiedDate":"2023-09-19"},{"lineNumber":212,"author":{"gitId":"bljhty"},"content":"     * If the description is not empty, but the time is not empty, but the time is valid, it will print the new Deadline task.","lastModifiedDate":"2023-09-19"},{"lineNumber":213,"author":{"gitId":"bljhty"},"content":"     *","lastModifiedDate":"2023-09-19"},{"lineNumber":214,"author":{"gitId":"bljhty"},"content":"     * @param tasks the list of tasks","lastModifiedDate":"2023-09-19"},{"lineNumber":215,"author":{"gitId":"bljhty"},"content":"     * @param parts the command that is split into two parts","lastModifiedDate":"2023-09-19"},{"lineNumber":216,"author":{"gitId":"bljhty"},"content":"     * @throws DukeException if the description is empty","lastModifiedDate":"2023-09-19"},{"lineNumber":217,"author":{"gitId":"bljhty"},"content":"     *","lastModifiedDate":"2023-09-19"},{"lineNumber":218,"author":{"gitId":"bljhty"},"content":"     *","lastModifiedDate":"2023-09-19"},{"lineNumber":219,"author":{"gitId":"bljhty"},"content":"     */","lastModifiedDate":"2023-09-13"},{"lineNumber":220,"author":{"gitId":"bljhty"},"content":"    private static void addDeadline(ArrayList\u003cTask\u003e tasks, String[] parts) {","lastModifiedDate":"2023-09-19"},{"lineNumber":221,"author":{"gitId":"bljhty"},"content":"        try {","lastModifiedDate":"2023-09-13"},{"lineNumber":222,"author":{"gitId":"bljhty"},"content":"            if (parts.length \u003c 2 || parts[1].isEmpty()) {","lastModifiedDate":"2023-09-19"},{"lineNumber":223,"author":{"gitId":"bljhty"},"content":"                throw new DukeException();","lastModifiedDate":"2023-09-13"},{"lineNumber":224,"author":{"gitId":"bljhty"},"content":"            }","lastModifiedDate":"2023-09-13"},{"lineNumber":225,"author":{"gitId":"bljhty"},"content":"            String[] deadlineParts \u003d parts[1].split(\" /by \");","lastModifiedDate":"2023-09-19"},{"lineNumber":226,"author":{"gitId":"bljhty"},"content":"            if (deadlineParts.length \u003d\u003d 2) {","lastModifiedDate":"2023-09-19"},{"lineNumber":227,"author":{"gitId":"bljhty"},"content":"                String description \u003d deadlineParts[0];","lastModifiedDate":"2023-09-19"},{"lineNumber":228,"author":{"gitId":"bljhty"},"content":"                String by \u003d deadlineParts[1].trim();","lastModifiedDate":"2023-09-19"},{"lineNumber":229,"author":{"gitId":"bljhty"},"content":"                tasks.add(new Deadline(description, by));","lastModifiedDate":"2023-09-06"},{"lineNumber":230,"author":{"gitId":"bljhty"},"content":"                System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2023-09-06"},{"lineNumber":231,"author":{"gitId":"bljhty"},"content":"                System.out.println(\"  \" + tasks.get(tasks.size() - 1));","lastModifiedDate":"2023-09-06"},{"lineNumber":232,"author":{"gitId":"bljhty"},"content":"                System.out.println(\"Now you have \" + tasks.size() + \" tasks in the list.\");","lastModifiedDate":"2023-09-06"},{"lineNumber":233,"author":{"gitId":"bljhty"},"content":"            } else {","lastModifiedDate":"2023-09-06"},{"lineNumber":234,"author":{"gitId":"bljhty"},"content":"                System.out.println(\"Invalid command.\");","lastModifiedDate":"2023-09-06"},{"lineNumber":235,"author":{"gitId":"bljhty"},"content":"            }","lastModifiedDate":"2023-09-06"},{"lineNumber":236,"author":{"gitId":"bljhty"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-13"},{"lineNumber":237,"author":{"gitId":"bljhty"},"content":"            System.out.println(\"â˜¹ OOPS!!! The description of a deadline cannot be empty.\\n\");","lastModifiedDate":"2023-09-13"},{"lineNumber":238,"author":{"gitId":"bljhty"},"content":"            System.out.println(\"please enter command in the format: deadline \u003cdescription\u003e /by \u003ctime\u003e\");","lastModifiedDate":"2023-09-13"},{"lineNumber":239,"author":{"gitId":"bljhty"},"content":"        }","lastModifiedDate":"2023-09-13"},{"lineNumber":240,"author":{"gitId":"bljhty"},"content":"    }","lastModifiedDate":"2023-09-19"},{"lineNumber":241,"author":{"gitId":"bljhty"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":242,"author":{"gitId":"bljhty"},"content":"    /*","lastModifiedDate":"2023-09-19"},{"lineNumber":243,"author":{"gitId":"bljhty"},"content":"     * This method adds an Event task.","lastModifiedDate":"2023-09-19"},{"lineNumber":244,"author":{"gitId":"bljhty"},"content":"     * splits the command into two parts: command type and description","lastModifiedDate":"2023-09-19"},{"lineNumber":245,"author":{"gitId":"bljhty"},"content":"     * e.g. event project meeting /from 2pm /to 4pm will be split into \"event\" and \"project meeting /from 2pm /to 4pm\"","lastModifiedDate":"2023-09-19"},{"lineNumber":246,"author":{"gitId":"bljhty"},"content":"     * the description is then used to create a new Event task","lastModifiedDate":"2023-09-19"},{"lineNumber":247,"author":{"gitId":"bljhty"},"content":"     * the new Event task is then added to the list of tasks","lastModifiedDate":"2023-09-19"},{"lineNumber":248,"author":{"gitId":"bljhty"},"content":"     * If the description is empty, it will print an error message.","lastModifiedDate":"2023-09-19"},{"lineNumber":249,"author":{"gitId":"bljhty"},"content":"     * If the description is not empty, it will print the new Event task.","lastModifiedDate":"2023-09-19"},{"lineNumber":250,"author":{"gitId":"bljhty"},"content":"     * If the description is not empty, but the time is empty, it will print an error message.","lastModifiedDate":"2023-09-19"},{"lineNumber":251,"author":{"gitId":"bljhty"},"content":"     * If the description is not empty, but the time is not empty, it will print the new Event task.","lastModifiedDate":"2023-09-19"},{"lineNumber":252,"author":{"gitId":"bljhty"},"content":"     * If the description is not empty, but the time is not empty, but the time is invalid, it will print an error message.","lastModifiedDate":"2023-09-19"},{"lineNumber":253,"author":{"gitId":"bljhty"},"content":"     * If the description is not empty, but the time is not empty, but the time is valid, it will print the new Event task.","lastModifiedDate":"2023-09-19"},{"lineNumber":254,"author":{"gitId":"bljhty"},"content":"     *","lastModifiedDate":"2023-09-19"},{"lineNumber":255,"author":{"gitId":"bljhty"},"content":"     * @param tasks the list of tasks","lastModifiedDate":"2023-09-19"},{"lineNumber":256,"author":{"gitId":"bljhty"},"content":"     * @param parts the command that is split into two parts","lastModifiedDate":"2023-09-19"},{"lineNumber":257,"author":{"gitId":"bljhty"},"content":"     * @throws DukeException if the description is empty","lastModifiedDate":"2023-09-19"},{"lineNumber":258,"author":{"gitId":"bljhty"},"content":"     *","lastModifiedDate":"2023-09-19"},{"lineNumber":259,"author":{"gitId":"bljhty"},"content":"     */","lastModifiedDate":"2023-09-13"},{"lineNumber":260,"author":{"gitId":"bljhty"},"content":"    private static void addEvent(ArrayList\u003cTask\u003e tasks, String[] parts) {","lastModifiedDate":"2023-09-19"},{"lineNumber":261,"author":{"gitId":"bljhty"},"content":"        try {","lastModifiedDate":"2023-09-13"},{"lineNumber":262,"author":{"gitId":"bljhty"},"content":"            if (parts.length \u003c 2 || parts[1].isEmpty()) {","lastModifiedDate":"2023-09-19"},{"lineNumber":263,"author":{"gitId":"bljhty"},"content":"                throw new DukeException();","lastModifiedDate":"2023-09-13"},{"lineNumber":264,"author":{"gitId":"bljhty"},"content":"            }","lastModifiedDate":"2023-09-13"},{"lineNumber":265,"author":{"gitId":"bljhty"},"content":"            String[] eventParts \u003d parts[1].split(\" /from \");","lastModifiedDate":"2023-09-19"},{"lineNumber":266,"author":{"gitId":"bljhty"},"content":"            if (eventParts.length \u003d\u003d 2) {","lastModifiedDate":"2023-09-19"},{"lineNumber":267,"author":{"gitId":"bljhty"},"content":"                String description \u003d eventParts[0];","lastModifiedDate":"2023-09-19"},{"lineNumber":268,"author":{"gitId":"bljhty"},"content":"                String[] timeParts \u003d eventParts[1].split(\" /to \");","lastModifiedDate":"2023-09-19"},{"lineNumber":269,"author":{"gitId":"bljhty"},"content":"                if (timeParts.length \u003d\u003d 2) {","lastModifiedDate":"2023-09-13"},{"lineNumber":270,"author":{"gitId":"bljhty"},"content":"                    String from \u003d timeParts[0].trim();","lastModifiedDate":"2023-09-19"},{"lineNumber":271,"author":{"gitId":"bljhty"},"content":"                    String to \u003d timeParts[1].trim();","lastModifiedDate":"2023-09-19"},{"lineNumber":272,"author":{"gitId":"bljhty"},"content":"                    tasks.add(new Event(description, from, to));","lastModifiedDate":"2023-09-06"},{"lineNumber":273,"author":{"gitId":"bljhty"},"content":"                    System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2023-09-06"},{"lineNumber":274,"author":{"gitId":"bljhty"},"content":"                    System.out.println(\"  \" + tasks.get(tasks.size() - 1));","lastModifiedDate":"2023-09-06"},{"lineNumber":275,"author":{"gitId":"bljhty"},"content":"                    System.out.println(\"Now you have \" + tasks.size() + \" tasks in the list.\");","lastModifiedDate":"2023-09-06"},{"lineNumber":276,"author":{"gitId":"bljhty"},"content":"                } else {","lastModifiedDate":"2023-09-13"},{"lineNumber":277,"author":{"gitId":"bljhty"},"content":"                    System.out.println(\"Invalid command.\");","lastModifiedDate":"2023-09-19"},{"lineNumber":278,"author":{"gitId":"bljhty"},"content":"                }","lastModifiedDate":"2023-09-13"},{"lineNumber":279,"author":{"gitId":"bljhty"},"content":"            } else {","lastModifiedDate":"2023-09-06"},{"lineNumber":280,"author":{"gitId":"bljhty"},"content":"                System.out.println(\"Invalid command.\");","lastModifiedDate":"2023-09-19"},{"lineNumber":281,"author":{"gitId":"bljhty"},"content":"            }","lastModifiedDate":"2023-09-06"},{"lineNumber":282,"author":{"gitId":"bljhty"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-13"},{"lineNumber":283,"author":{"gitId":"bljhty"},"content":"            System.out.println(\"â˜¹ OOPS!!! The description of an event cannot be empty.\\n\");","lastModifiedDate":"2023-09-19"},{"lineNumber":284,"author":{"gitId":"bljhty"},"content":"            System.out.println(\"please enter command in the format: event \u003cdescription\u003e /from \u003ctime\u003e /to \u003ctime\u003e\");","lastModifiedDate":"2023-09-19"},{"lineNumber":285,"author":{"gitId":"bljhty"},"content":"        }","lastModifiedDate":"2023-09-13"},{"lineNumber":286,"author":{"gitId":"bljhty"},"content":"    }","lastModifiedDate":"2023-09-19"},{"lineNumber":287,"author":{"gitId":"bljhty"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":288,"author":{"gitId":"bljhty"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-09-19"},{"lineNumber":289,"author":{"gitId":"bljhty"},"content":"        greet();","lastModifiedDate":"2023-09-19"},{"lineNumber":290,"author":{"gitId":"bljhty"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":291,"author":{"gitId":"bljhty"},"content":"        try (Scanner givenTask \u003d new Scanner(System.in)) {","lastModifiedDate":"2023-09-19"},{"lineNumber":292,"author":{"gitId":"bljhty"},"content":"            ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-19"},{"lineNumber":293,"author":{"gitId":"bljhty"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":294,"author":{"gitId":"bljhty"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":295,"author":{"gitId":"bljhty"},"content":"            while(true) {","lastModifiedDate":"2023-09-19"},{"lineNumber":296,"author":{"gitId":"bljhty"},"content":"                String command \u003d givenTask.nextLine().trim();","lastModifiedDate":"2023-09-19"},{"lineNumber":297,"author":{"gitId":"bljhty"},"content":"                System.out.println(lineDivider);","lastModifiedDate":"2023-09-19"},{"lineNumber":298,"author":{"gitId":"bljhty"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":299,"author":{"gitId":"bljhty"},"content":"                String[] parts \u003d command.split(\" \", 2);","lastModifiedDate":"2023-09-19"},{"lineNumber":300,"author":{"gitId":"bljhty"},"content":"                String commandType \u003d parts.length \u003e 0 ? parts[0] : \"\";","lastModifiedDate":"2023-09-19"},{"lineNumber":301,"author":{"gitId":"bljhty"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":302,"author":{"gitId":"bljhty"},"content":"                try{","lastModifiedDate":"2023-09-19"},{"lineNumber":303,"author":{"gitId":"bljhty"},"content":"                    switch(commandType.toLowerCase()){","lastModifiedDate":"2023-09-19"},{"lineNumber":304,"author":{"gitId":"bljhty"},"content":"                        case \"bye\":","lastModifiedDate":"2023-09-19"},{"lineNumber":305,"author":{"gitId":"bljhty"},"content":"                            goodbye();","lastModifiedDate":"2023-09-19"},{"lineNumber":306,"author":{"gitId":"bljhty"},"content":"                            break;","lastModifiedDate":"2023-09-19"},{"lineNumber":307,"author":{"gitId":"bljhty"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":308,"author":{"gitId":"bljhty"},"content":"                        case \"list\":","lastModifiedDate":"2023-09-19"},{"lineNumber":309,"author":{"gitId":"bljhty"},"content":"                            listTasks(tasks);","lastModifiedDate":"2023-09-19"},{"lineNumber":310,"author":{"gitId":"bljhty"},"content":"                            break;","lastModifiedDate":"2023-09-19"},{"lineNumber":311,"author":{"gitId":"bljhty"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":312,"author":{"gitId":"bljhty"},"content":"                        case \"help\":","lastModifiedDate":"2023-09-19"},{"lineNumber":313,"author":{"gitId":"bljhty"},"content":"                            System.out.println(HELP_MESSAGE);","lastModifiedDate":"2023-09-19"},{"lineNumber":314,"author":{"gitId":"bljhty"},"content":"                            break;","lastModifiedDate":"2023-09-19"},{"lineNumber":315,"author":{"gitId":"bljhty"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":316,"author":{"gitId":"bljhty"},"content":"                        case \"mark\":","lastModifiedDate":"2023-09-19"},{"lineNumber":317,"author":{"gitId":"bljhty"},"content":"                            markTask(tasks, parts);","lastModifiedDate":"2023-09-19"},{"lineNumber":318,"author":{"gitId":"bljhty"},"content":"                            break;","lastModifiedDate":"2023-09-19"},{"lineNumber":319,"author":{"gitId":"bljhty"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":320,"author":{"gitId":"bljhty"},"content":"                        case \"unmark\":","lastModifiedDate":"2023-09-19"},{"lineNumber":321,"author":{"gitId":"bljhty"},"content":"                            unmarkTask(tasks, parts);","lastModifiedDate":"2023-09-19"},{"lineNumber":322,"author":{"gitId":"bljhty"},"content":"                            break;","lastModifiedDate":"2023-09-19"},{"lineNumber":323,"author":{"gitId":"bljhty"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":324,"author":{"gitId":"bljhty"},"content":"                        case \"todo\":","lastModifiedDate":"2023-09-19"},{"lineNumber":325,"author":{"gitId":"bljhty"},"content":"                            addTodo(tasks, parts);","lastModifiedDate":"2023-09-19"},{"lineNumber":326,"author":{"gitId":"bljhty"},"content":"                            break;","lastModifiedDate":"2023-09-19"},{"lineNumber":327,"author":{"gitId":"bljhty"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":328,"author":{"gitId":"bljhty"},"content":"                        case \"deadline\":","lastModifiedDate":"2023-09-19"},{"lineNumber":329,"author":{"gitId":"bljhty"},"content":"                            addDeadline(tasks, parts);","lastModifiedDate":"2023-09-19"},{"lineNumber":330,"author":{"gitId":"bljhty"},"content":"                            break;","lastModifiedDate":"2023-09-19"},{"lineNumber":331,"author":{"gitId":"bljhty"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":332,"author":{"gitId":"bljhty"},"content":"                        case \"event\":","lastModifiedDate":"2023-09-19"},{"lineNumber":333,"author":{"gitId":"bljhty"},"content":"                            addEvent(tasks, parts);","lastModifiedDate":"2023-09-19"},{"lineNumber":334,"author":{"gitId":"bljhty"},"content":"                            break;","lastModifiedDate":"2023-09-19"},{"lineNumber":335,"author":{"gitId":"bljhty"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":336,"author":{"gitId":"bljhty"},"content":"                        default:","lastModifiedDate":"2023-09-19"},{"lineNumber":337,"author":{"gitId":"bljhty"},"content":"                            echo(command);","lastModifiedDate":"2023-09-19"},{"lineNumber":338,"author":{"gitId":"bljhty"},"content":"                            throw new DukeException();","lastModifiedDate":"2023-09-13"},{"lineNumber":339,"author":{"gitId":"bljhty"},"content":"                    }","lastModifiedDate":"2023-09-13"},{"lineNumber":340,"author":{"gitId":"bljhty"},"content":"                } catch (DukeException e) {","lastModifiedDate":"2023-09-13"},{"lineNumber":341,"author":{"gitId":"bljhty"},"content":"                    System.out.println(\"Error: â˜¹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\n\");","lastModifiedDate":"2023-09-13"},{"lineNumber":342,"author":{"gitId":"bljhty"},"content":"                    System.out.println(\"If assistance is required, please type \u0027help\u0027 for more information.\");","lastModifiedDate":"2023-09-13"},{"lineNumber":343,"author":{"gitId":"bljhty"},"content":"                }","lastModifiedDate":"2023-08-30"},{"lineNumber":344,"author":{"gitId":"bljhty"},"content":"                System.out.println(lineDivider);","lastModifiedDate":"2023-09-13"},{"lineNumber":345,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2019-07-29"},{"lineNumber":346,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2019-07-29"},{"lineNumber":347,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":348,"author":{"gitId":"bljhty"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"bljhty":343,"-":5}},{"path":"src/main/java/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bljhty"},"content":"package tasks;","lastModifiedDate":"2023-09-13"},{"lineNumber":2,"author":{"gitId":"bljhty"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":3,"author":{"gitId":"bljhty"},"content":"import tasks.Task;","lastModifiedDate":"2023-09-13"},{"lineNumber":4,"author":{"gitId":"bljhty"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":5,"author":{"gitId":"bljhty"},"content":"public class Deadline extends Task{","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"bljhty"},"content":"    protected String by;","lastModifiedDate":"2023-09-06"},{"lineNumber":7,"author":{"gitId":"bljhty"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":8,"author":{"gitId":"bljhty"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2023-09-06"},{"lineNumber":9,"author":{"gitId":"bljhty"},"content":"        super(description);","lastModifiedDate":"2023-09-06"},{"lineNumber":10,"author":{"gitId":"bljhty"},"content":"        if (description \u003d\u003d null || description.trim().isEmpty()) {","lastModifiedDate":"2023-09-19"},{"lineNumber":11,"author":{"gitId":"bljhty"},"content":"            throw new IllegalArgumentException(\"description cannot be empty\");","lastModifiedDate":"2023-09-19"},{"lineNumber":12,"author":{"gitId":"bljhty"},"content":"        }","lastModifiedDate":"2023-09-19"},{"lineNumber":13,"author":{"gitId":"bljhty"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"bljhty"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":15,"author":{"gitId":"bljhty"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":16,"author":{"gitId":"bljhty"},"content":"    public String getBy() {","lastModifiedDate":"2023-09-06"},{"lineNumber":17,"author":{"gitId":"bljhty"},"content":"        return this.by;","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"bljhty"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":19,"author":{"gitId":"bljhty"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"bljhty"},"content":"    @Override","lastModifiedDate":"2023-09-06"},{"lineNumber":21,"author":{"gitId":"bljhty"},"content":"    public String toString() {","lastModifiedDate":"2023-09-06"},{"lineNumber":22,"author":{"gitId":"bljhty"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + this.by + \")\";","lastModifiedDate":"2023-09-06"},{"lineNumber":23,"author":{"gitId":"bljhty"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":24,"author":{"gitId":"bljhty"},"content":"}","lastModifiedDate":"2023-09-06"}],"authorContributionMap":{"bljhty":24}},{"path":"src/main/java/tasks/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bljhty"},"content":"package tasks;","lastModifiedDate":"2023-09-13"},{"lineNumber":2,"author":{"gitId":"bljhty"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":3,"author":{"gitId":"bljhty"},"content":"import tasks.Task;","lastModifiedDate":"2023-09-13"},{"lineNumber":4,"author":{"gitId":"bljhty"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":5,"author":{"gitId":"bljhty"},"content":"public class DukeException extends Exception{","lastModifiedDate":"2023-09-13"},{"lineNumber":6,"author":{"gitId":"bljhty"},"content":"    ","lastModifiedDate":"2023-09-13"},{"lineNumber":7,"author":{"gitId":"bljhty"},"content":"}","lastModifiedDate":"2023-09-13"},{"lineNumber":8,"author":{"gitId":"bljhty"},"content":"","lastModifiedDate":"2023-09-13"}],"authorContributionMap":{"bljhty":8}},{"path":"src/main/java/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bljhty"},"content":"package tasks;","lastModifiedDate":"2023-09-13"},{"lineNumber":2,"author":{"gitId":"bljhty"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":3,"author":{"gitId":"bljhty"},"content":"import tasks.Task;","lastModifiedDate":"2023-09-13"},{"lineNumber":4,"author":{"gitId":"bljhty"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":5,"author":{"gitId":"bljhty"},"content":"public class Event extends Task {","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"bljhty"},"content":"    protected String from;","lastModifiedDate":"2023-09-06"},{"lineNumber":7,"author":{"gitId":"bljhty"},"content":"    protected String to;","lastModifiedDate":"2023-09-06"},{"lineNumber":8,"author":{"gitId":"bljhty"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":9,"author":{"gitId":"bljhty"},"content":"    public Event(String description, String from, String to) {","lastModifiedDate":"2023-09-06"},{"lineNumber":10,"author":{"gitId":"bljhty"},"content":"        super(description);","lastModifiedDate":"2023-09-06"},{"lineNumber":11,"author":{"gitId":"bljhty"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"bljhty"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"bljhty"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"bljhty"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":15,"author":{"gitId":"bljhty"},"content":"    public String getFrom() {","lastModifiedDate":"2023-09-06"},{"lineNumber":16,"author":{"gitId":"bljhty"},"content":"        return this.from;","lastModifiedDate":"2023-09-06"},{"lineNumber":17,"author":{"gitId":"bljhty"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"bljhty"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":19,"author":{"gitId":"bljhty"},"content":"    public String getTo() {","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"bljhty"},"content":"        return this.to;","lastModifiedDate":"2023-09-06"},{"lineNumber":21,"author":{"gitId":"bljhty"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":22,"author":{"gitId":"bljhty"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":23,"author":{"gitId":"bljhty"},"content":"    @Override","lastModifiedDate":"2023-09-06"},{"lineNumber":24,"author":{"gitId":"bljhty"},"content":"    public String toString() {","lastModifiedDate":"2023-09-06"},{"lineNumber":25,"author":{"gitId":"bljhty"},"content":"        return \"[E]\" + super.toString() + \"(from: \" + this.from + \" to: \" + this.to + \")\";","lastModifiedDate":"2023-09-06"},{"lineNumber":26,"author":{"gitId":"bljhty"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":27,"author":{"gitId":"bljhty"},"content":"}","lastModifiedDate":"2023-09-06"}],"authorContributionMap":{"bljhty":27}},{"path":"src/main/java/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bljhty"},"content":"package tasks;","lastModifiedDate":"2023-09-13"},{"lineNumber":2,"author":{"gitId":"bljhty"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":3,"author":{"gitId":"bljhty"},"content":"public class Task {","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"bljhty"},"content":"    protected String description;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"bljhty"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"bljhty"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"bljhty"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"bljhty"},"content":"    public Task(String description) {","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"bljhty"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"bljhty"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"bljhty"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"bljhty"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"bljhty"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"bljhty"},"content":"        return (isDone ? \"[X]\" : \"[ ]\"); ","lastModifiedDate":"2023-09-13"},{"lineNumber":15,"author":{"gitId":"bljhty"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"bljhty"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"bljhty"},"content":"    public void markAsDone(boolean isDone) {","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"bljhty"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"bljhty"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"bljhty"},"content":"    ","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"bljhty"},"content":"    public void markAsUndone(boolean isDone) {","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"bljhty"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"bljhty"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"bljhty"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"bljhty"},"content":"    public String toString() {","lastModifiedDate":"2023-09-06"},{"lineNumber":26,"author":{"gitId":"bljhty"},"content":"        return getStatusIcon() + \" \" + this.description;","lastModifiedDate":"2023-09-06"},{"lineNumber":27,"author":{"gitId":"bljhty"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":28,"author":{"gitId":"bljhty"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":29,"author":{"gitId":"bljhty"},"content":"    public String getDescription() {","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"bljhty"},"content":"        return this.description;","lastModifiedDate":"2023-09-06"},{"lineNumber":31,"author":{"gitId":"bljhty"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"bljhty"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"bljhty":32}},{"path":"src/main/java/tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bljhty"},"content":"package tasks;","lastModifiedDate":"2023-09-13"},{"lineNumber":2,"author":{"gitId":"bljhty"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":3,"author":{"gitId":"bljhty"},"content":"import tasks.Task;","lastModifiedDate":"2023-09-13"},{"lineNumber":4,"author":{"gitId":"bljhty"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":5,"author":{"gitId":"bljhty"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"bljhty"},"content":"    public Todo (String description) {","lastModifiedDate":"2023-09-06"},{"lineNumber":7,"author":{"gitId":"bljhty"},"content":"        super(description);","lastModifiedDate":"2023-09-06"},{"lineNumber":8,"author":{"gitId":"bljhty"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":9,"author":{"gitId":"bljhty"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":10,"author":{"gitId":"bljhty"},"content":"    @Override","lastModifiedDate":"2023-09-06"},{"lineNumber":11,"author":{"gitId":"bljhty"},"content":"    public String toString() {","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"bljhty"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"bljhty"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"bljhty"},"content":"}","lastModifiedDate":"2023-09-06"}],"authorContributionMap":{"bljhty":14}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"bljhty"},"content":"if ! javac -cp /Users/bryanlee/Desktop/NUS/NUS Y3S1/CS2113/ip/src/main/java -Xlint:none -d ../bin /Users/bryanlee/Desktop/NUS/NUS Y3S1/CS2113/ip/src/main/java/Duke.java","lastModifiedDate":"2023-09-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"bljhty":1,"-":37}},{"path":"text-ui-test/tempCodeRunnerFile.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"bljhty"},"content":"/Users/bryanlee/Desktop/NUS/NUS Y3S1/CS2113/ip/src/main/java/Duke.java","lastModifiedDate":"2023-09-13"}],"authorContributionMap":{"bljhty":1}}]
