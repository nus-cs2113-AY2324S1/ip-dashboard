[{"path":"app/build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"danielpappa"},"content":"/*","lastModifiedDate":"2023-09-21"},{"lineNumber":2,"author":{"gitId":"danielpappa"},"content":" * This file was generated by the Gradle \u0027init\u0027 task.","lastModifiedDate":"2023-09-21"},{"lineNumber":3,"author":{"gitId":"danielpappa"},"content":" *","lastModifiedDate":"2023-09-21"},{"lineNumber":4,"author":{"gitId":"danielpappa"},"content":" * This generated file contains a sample Java application project to get you started.","lastModifiedDate":"2023-09-21"},{"lineNumber":5,"author":{"gitId":"danielpappa"},"content":" * For more details on building Java \u0026 JVM projects, please refer to https://docs.gradle.org/8.3/userguide/building_java_projects.html in the Gradle documentation.","lastModifiedDate":"2023-09-21"},{"lineNumber":6,"author":{"gitId":"danielpappa"},"content":" */","lastModifiedDate":"2023-09-21"},{"lineNumber":7,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":8,"author":{"gitId":"danielpappa"},"content":"plugins {","lastModifiedDate":"2023-09-21"},{"lineNumber":9,"author":{"gitId":"danielpappa"},"content":"    // Apply the application plugin to add support for building a CLI application in Java.","lastModifiedDate":"2023-09-21"},{"lineNumber":10,"author":{"gitId":"danielpappa"},"content":"    id \u0027application\u0027","lastModifiedDate":"2023-09-21"},{"lineNumber":11,"author":{"gitId":"danielpappa"},"content":"}","lastModifiedDate":"2023-09-21"},{"lineNumber":12,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":13,"author":{"gitId":"danielpappa"},"content":"repositories {","lastModifiedDate":"2023-09-21"},{"lineNumber":14,"author":{"gitId":"danielpappa"},"content":"    // Use Maven Central for resolving dependencies.","lastModifiedDate":"2023-09-21"},{"lineNumber":15,"author":{"gitId":"danielpappa"},"content":"    mavenCentral()","lastModifiedDate":"2023-09-21"},{"lineNumber":16,"author":{"gitId":"danielpappa"},"content":"}","lastModifiedDate":"2023-09-21"},{"lineNumber":17,"author":{"gitId":"danielpappa"},"content":"dependencies {","lastModifiedDate":"2023-09-21"},{"lineNumber":18,"author":{"gitId":"danielpappa"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027","lastModifiedDate":"2023-09-21"},{"lineNumber":19,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":20,"author":{"gitId":"danielpappa"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-21"},{"lineNumber":21,"author":{"gitId":"danielpappa"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-21"},{"lineNumber":22,"author":{"gitId":"danielpappa"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-21"},{"lineNumber":23,"author":{"gitId":"danielpappa"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-21"},{"lineNumber":24,"author":{"gitId":"danielpappa"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-21"},{"lineNumber":25,"author":{"gitId":"danielpappa"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-21"},{"lineNumber":26,"author":{"gitId":"danielpappa"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-21"},{"lineNumber":27,"author":{"gitId":"danielpappa"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-21"},{"lineNumber":28,"author":{"gitId":"danielpappa"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-21"},{"lineNumber":29,"author":{"gitId":"danielpappa"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-21"},{"lineNumber":30,"author":{"gitId":"danielpappa"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-21"},{"lineNumber":31,"author":{"gitId":"danielpappa"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-21"},{"lineNumber":32,"author":{"gitId":"danielpappa"},"content":"}","lastModifiedDate":"2023-09-21"},{"lineNumber":33,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":34,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":35,"author":{"gitId":"danielpappa"},"content":"dependencies {","lastModifiedDate":"2023-09-21"},{"lineNumber":36,"author":{"gitId":"danielpappa"},"content":"    // Use JUnit Jupiter for testing.","lastModifiedDate":"2023-09-21"},{"lineNumber":37,"author":{"gitId":"danielpappa"},"content":"    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.9.3\u0027","lastModifiedDate":"2023-09-21"},{"lineNumber":38,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":39,"author":{"gitId":"danielpappa"},"content":"    testRuntimeOnly \u0027org.junit.platform:junit-platform-launcher\u0027","lastModifiedDate":"2023-09-21"},{"lineNumber":40,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":41,"author":{"gitId":"danielpappa"},"content":"    // This dependency is used by the application.","lastModifiedDate":"2023-09-21"},{"lineNumber":42,"author":{"gitId":"danielpappa"},"content":"    implementation \u0027com.google.guava:guava:32.1.1-jre\u0027","lastModifiedDate":"2023-09-21"},{"lineNumber":43,"author":{"gitId":"danielpappa"},"content":"}","lastModifiedDate":"2023-09-21"},{"lineNumber":44,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":45,"author":{"gitId":"danielpappa"},"content":"// Apply a specific Java toolchain to ease working on different environments.","lastModifiedDate":"2023-09-21"},{"lineNumber":46,"author":{"gitId":"danielpappa"},"content":"java {","lastModifiedDate":"2023-09-21"},{"lineNumber":47,"author":{"gitId":"danielpappa"},"content":"    toolchain {","lastModifiedDate":"2023-09-21"},{"lineNumber":48,"author":{"gitId":"danielpappa"},"content":"        languageVersion \u003d JavaLanguageVersion.of(11)","lastModifiedDate":"2023-09-21"},{"lineNumber":49,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-21"},{"lineNumber":50,"author":{"gitId":"danielpappa"},"content":"}","lastModifiedDate":"2023-09-21"},{"lineNumber":51,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":52,"author":{"gitId":"danielpappa"},"content":"application {","lastModifiedDate":"2023-09-21"},{"lineNumber":53,"author":{"gitId":"danielpappa"},"content":"    // Define the main class for the application.","lastModifiedDate":"2023-09-21"},{"lineNumber":54,"author":{"gitId":"danielpappa"},"content":"    mainClass \u003d \u0027doli.Doli\u0027","lastModifiedDate":"2023-09-21"},{"lineNumber":55,"author":{"gitId":"danielpappa"},"content":"}","lastModifiedDate":"2023-09-21"},{"lineNumber":56,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":57,"author":{"gitId":"danielpappa"},"content":"tasks.named(\u0027test\u0027) {","lastModifiedDate":"2023-09-21"},{"lineNumber":58,"author":{"gitId":"danielpappa"},"content":"    // Use JUnit Platform for unit tests.","lastModifiedDate":"2023-09-21"},{"lineNumber":59,"author":{"gitId":"danielpappa"},"content":"    useJUnitPlatform()","lastModifiedDate":"2023-09-21"},{"lineNumber":60,"author":{"gitId":"danielpappa"},"content":"}","lastModifiedDate":"2023-09-21"},{"lineNumber":61,"author":{"gitId":"danielpappa"},"content":"run {","lastModifiedDate":"2023-09-21"},{"lineNumber":62,"author":{"gitId":"danielpappa"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2023-09-21"},{"lineNumber":63,"author":{"gitId":"danielpappa"},"content":"}","lastModifiedDate":"2023-09-21"}],"authorContributionMap":{"danielpappa":63}},{"path":"app/src/main/java/doli/Doli.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielpappa"},"content":"package doli;","lastModifiedDate":"2023-10-06"},{"lineNumber":2,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":3,"author":{"gitId":"danielpappa"},"content":"import doli.gui.Ui;","lastModifiedDate":"2023-10-06"},{"lineNumber":4,"author":{"gitId":"danielpappa"},"content":"import doli.commands.Command;","lastModifiedDate":"2023-10-06"},{"lineNumber":5,"author":{"gitId":"danielpappa"},"content":"import doli.commands.Parser;","lastModifiedDate":"2023-10-06"},{"lineNumber":6,"author":{"gitId":"danielpappa"},"content":"import doli.exceptions.DoliExceptions;","lastModifiedDate":"2023-10-06"},{"lineNumber":7,"author":{"gitId":"danielpappa"},"content":"import doli.files.Storage;","lastModifiedDate":"2023-10-06"},{"lineNumber":8,"author":{"gitId":"danielpappa"},"content":"import doli.tasks.TaskList;","lastModifiedDate":"2023-10-06"},{"lineNumber":9,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":10,"author":{"gitId":"danielpappa"},"content":"import java.io.IOException;","lastModifiedDate":"2023-10-06"},{"lineNumber":11,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":12,"author":{"gitId":"danielpappa"},"content":"/**","lastModifiedDate":"2023-10-06"},{"lineNumber":13,"author":{"gitId":"danielpappa"},"content":" * \u003ch1\u003eDoli Chatbot\u003c/h1\u003e","lastModifiedDate":"2023-10-06"},{"lineNumber":14,"author":{"gitId":"danielpappa"},"content":" * The Doli program implements a relatively simple chatbot that is able to","lastModifiedDate":"2023-10-06"},{"lineNumber":15,"author":{"gitId":"danielpappa"},"content":" * manage an agenda containing different types of tasks, including general","lastModifiedDate":"2023-10-06"},{"lineNumber":16,"author":{"gitId":"danielpappa"},"content":" * todos, deadlines and events.","lastModifiedDate":"2023-10-06"},{"lineNumber":17,"author":{"gitId":"danielpappa"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-10-06"},{"lineNumber":18,"author":{"gitId":"danielpappa"},"content":" * \u003cb\u003eNote:\u003c/b\u003e The user can interact with Doli using a number of commands","lastModifiedDate":"2023-10-06"},{"lineNumber":19,"author":{"gitId":"danielpappa"},"content":" * that e.g. allow adding, deleting, viewing, searching and marking individual","lastModifiedDate":"2023-10-06"},{"lineNumber":20,"author":{"gitId":"danielpappa"},"content":" * tasks as done.","lastModifiedDate":"2023-10-06"},{"lineNumber":21,"author":{"gitId":"danielpappa"},"content":" *","lastModifiedDate":"2023-10-06"},{"lineNumber":22,"author":{"gitId":"danielpappa"},"content":" * @author pappalardodaniel","lastModifiedDate":"2023-10-06"},{"lineNumber":23,"author":{"gitId":"danielpappa"},"content":" * @version 1.0","lastModifiedDate":"2023-10-06"},{"lineNumber":24,"author":{"gitId":"danielpappa"},"content":" * @since 2023-10-03","lastModifiedDate":"2023-10-06"},{"lineNumber":25,"author":{"gitId":"danielpappa"},"content":" */","lastModifiedDate":"2023-10-06"},{"lineNumber":26,"author":{"gitId":"danielpappa"},"content":"public class Doli {","lastModifiedDate":"2023-10-06"},{"lineNumber":27,"author":{"gitId":"danielpappa"},"content":"    private Storage storage;","lastModifiedDate":"2023-10-06"},{"lineNumber":28,"author":{"gitId":"danielpappa"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-10-06"},{"lineNumber":29,"author":{"gitId":"danielpappa"},"content":"    private Ui ui;","lastModifiedDate":"2023-10-06"},{"lineNumber":30,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":31,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-06"},{"lineNumber":32,"author":{"gitId":"danielpappa"},"content":"     * Constructs an Object of type Doli by initialising a new","lastModifiedDate":"2023-10-06"},{"lineNumber":33,"author":{"gitId":"danielpappa"},"content":"     * Storage, TaskList and Ui. The String filePath must specify","lastModifiedDate":"2023-10-06"},{"lineNumber":34,"author":{"gitId":"danielpappa"},"content":"     * an OS-independent relative file path to a .txt file which","lastModifiedDate":"2023-10-06"},{"lineNumber":35,"author":{"gitId":"danielpappa"},"content":"     * Doli uses to store and maintain the agenda. If no such file","lastModifiedDate":"2023-10-06"},{"lineNumber":36,"author":{"gitId":"danielpappa"},"content":"     * is found, then a blank .txt file will be created.","lastModifiedDate":"2023-10-06"},{"lineNumber":37,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":38,"author":{"gitId":"danielpappa"},"content":"     * @param filePath of type String specifying the relative","lastModifiedDate":"2023-10-06"},{"lineNumber":39,"author":{"gitId":"danielpappa"},"content":"     *                 file path giving the location of a .txt","lastModifiedDate":"2023-10-06"},{"lineNumber":40,"author":{"gitId":"danielpappa"},"content":"     *                 file containing the older version of the agenda.","lastModifiedDate":"2023-10-06"},{"lineNumber":41,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-06"},{"lineNumber":42,"author":{"gitId":"danielpappa"},"content":"    public Doli(String filePath) {","lastModifiedDate":"2023-10-06"},{"lineNumber":43,"author":{"gitId":"danielpappa"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-10-06"},{"lineNumber":44,"author":{"gitId":"danielpappa"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2023-10-06"},{"lineNumber":45,"author":{"gitId":"danielpappa"},"content":"        try {","lastModifiedDate":"2023-10-06"},{"lineNumber":46,"author":{"gitId":"danielpappa"},"content":"            tasks \u003d new TaskList(storage.initializeFile());","lastModifiedDate":"2023-10-06"},{"lineNumber":47,"author":{"gitId":"danielpappa"},"content":"        } catch (DoliExceptions e) {","lastModifiedDate":"2023-10-06"},{"lineNumber":48,"author":{"gitId":"danielpappa"},"content":"            ui.showLoadingError();","lastModifiedDate":"2023-10-06"},{"lineNumber":49,"author":{"gitId":"danielpappa"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2023-10-06"},{"lineNumber":50,"author":{"gitId":"danielpappa"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-10-06"},{"lineNumber":51,"author":{"gitId":"danielpappa"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2023-10-06"},{"lineNumber":52,"author":{"gitId":"danielpappa"},"content":"        }","lastModifiedDate":"2023-10-06"},{"lineNumber":53,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":54,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":55,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-06"},{"lineNumber":56,"author":{"gitId":"danielpappa"},"content":"     * Method that runs the core of the chatbot.","lastModifiedDate":"2023-10-06"},{"lineNumber":57,"author":{"gitId":"danielpappa"},"content":"     * It works in a sequential manner by first welcoming","lastModifiedDate":"2023-10-06"},{"lineNumber":58,"author":{"gitId":"danielpappa"},"content":"     * the user and recording his/her name before entering a loop where","lastModifiedDate":"2023-10-06"},{"lineNumber":59,"author":{"gitId":"danielpappa"},"content":"     * Doli will process and handle the user input by printing a","lastModifiedDate":"2023-10-06"},{"lineNumber":60,"author":{"gitId":"danielpappa"},"content":"     * response which will also be stored in the initialised file path.","lastModifiedDate":"2023-10-06"},{"lineNumber":61,"author":{"gitId":"danielpappa"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-10-06"},{"lineNumber":62,"author":{"gitId":"danielpappa"},"content":"     * Once the user gives the command to halt the program,","lastModifiedDate":"2023-10-06"},{"lineNumber":63,"author":{"gitId":"danielpappa"},"content":"     * the wile loop will stop and the program will exit.","lastModifiedDate":"2023-10-06"},{"lineNumber":64,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-06"},{"lineNumber":65,"author":{"gitId":"danielpappa"},"content":"    public void run() {","lastModifiedDate":"2023-10-06"},{"lineNumber":66,"author":{"gitId":"danielpappa"},"content":"        ui.welcomeUser();","lastModifiedDate":"2023-10-06"},{"lineNumber":67,"author":{"gitId":"danielpappa"},"content":"        String name;","lastModifiedDate":"2023-10-06"},{"lineNumber":68,"author":{"gitId":"danielpappa"},"content":"        try {","lastModifiedDate":"2023-10-06"},{"lineNumber":69,"author":{"gitId":"danielpappa"},"content":"             name \u003d ui.getName();","lastModifiedDate":"2023-10-06"},{"lineNumber":70,"author":{"gitId":"danielpappa"},"content":"        } catch(DoliExceptions e) {","lastModifiedDate":"2023-10-06"},{"lineNumber":71,"author":{"gitId":"danielpappa"},"content":"             name \u003d \"User\";","lastModifiedDate":"2023-10-06"},{"lineNumber":72,"author":{"gitId":"danielpappa"},"content":"        }","lastModifiedDate":"2023-10-06"},{"lineNumber":73,"author":{"gitId":"danielpappa"},"content":"        ui.askForInstruction();","lastModifiedDate":"2023-10-06"},{"lineNumber":74,"author":{"gitId":"danielpappa"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2023-10-06"},{"lineNumber":75,"author":{"gitId":"danielpappa"},"content":"        while (!isExit) {","lastModifiedDate":"2023-10-06"},{"lineNumber":76,"author":{"gitId":"danielpappa"},"content":"            try {","lastModifiedDate":"2023-10-06"},{"lineNumber":77,"author":{"gitId":"danielpappa"},"content":"                ui.printUser(name);","lastModifiedDate":"2023-10-06"},{"lineNumber":78,"author":{"gitId":"danielpappa"},"content":"                String fullCommand \u003d ui.getInput();","lastModifiedDate":"2023-10-06"},{"lineNumber":79,"author":{"gitId":"danielpappa"},"content":"                Command c \u003d Parser.parseInputIntoCommand(fullCommand);","lastModifiedDate":"2023-10-06"},{"lineNumber":80,"author":{"gitId":"danielpappa"},"content":"                c.handleCommand(tasks, storage);","lastModifiedDate":"2023-10-06"},{"lineNumber":81,"author":{"gitId":"danielpappa"},"content":"                c.getResponse();","lastModifiedDate":"2023-10-06"},{"lineNumber":82,"author":{"gitId":"danielpappa"},"content":"                isExit \u003d c.isExit();","lastModifiedDate":"2023-10-06"},{"lineNumber":83,"author":{"gitId":"danielpappa"},"content":"            } catch (DoliExceptions e) {","lastModifiedDate":"2023-10-06"},{"lineNumber":84,"author":{"gitId":"danielpappa"},"content":"                ui.showError(e.getMessage());","lastModifiedDate":"2023-10-06"},{"lineNumber":85,"author":{"gitId":"danielpappa"},"content":"            } finally {","lastModifiedDate":"2023-10-06"},{"lineNumber":86,"author":{"gitId":"danielpappa"},"content":"                ui.printHLine();","lastModifiedDate":"2023-10-06"},{"lineNumber":87,"author":{"gitId":"danielpappa"},"content":"            }","lastModifiedDate":"2023-10-06"},{"lineNumber":88,"author":{"gitId":"danielpappa"},"content":"        }","lastModifiedDate":"2023-10-06"},{"lineNumber":89,"author":{"gitId":"danielpappa"},"content":"    ui.greetUser();","lastModifiedDate":"2023-10-06"},{"lineNumber":90,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":91,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-06"},{"lineNumber":92,"author":{"gitId":"danielpappa"},"content":"     * This is Doli\u0027s main method.","lastModifiedDate":"2023-10-06"},{"lineNumber":93,"author":{"gitId":"danielpappa"},"content":"     * It simply constructs a new object of type Doli,","lastModifiedDate":"2023-10-06"},{"lineNumber":94,"author":{"gitId":"danielpappa"},"content":"     * sets its file path to some relative .txt file and","lastModifiedDate":"2023-10-06"},{"lineNumber":95,"author":{"gitId":"danielpappa"},"content":"     * then calls the run method on the initialisation.","lastModifiedDate":"2023-10-06"},{"lineNumber":96,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":97,"author":{"gitId":"danielpappa"},"content":"     * @param args the command line arguments.","lastModifiedDate":"2023-10-06"},{"lineNumber":98,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-06"},{"lineNumber":99,"author":{"gitId":"danielpappa"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-10-06"},{"lineNumber":100,"author":{"gitId":"danielpappa"},"content":"        new Doli(\"Agenda.txt\").run();","lastModifiedDate":"2023-10-06"},{"lineNumber":101,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":102,"author":{"gitId":"danielpappa"},"content":"}","lastModifiedDate":"2023-10-06"}],"authorContributionMap":{"danielpappa":102}},{"path":"app/src/main/java/doli/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielpappa"},"content":"package doli.commands;","lastModifiedDate":"2023-09-22"},{"lineNumber":2,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":3,"author":{"gitId":"danielpappa"},"content":"import doli.exceptions.DoliExceptions;","lastModifiedDate":"2023-09-22"},{"lineNumber":4,"author":{"gitId":"danielpappa"},"content":"import doli.files.Storage;","lastModifiedDate":"2023-09-22"},{"lineNumber":5,"author":{"gitId":"danielpappa"},"content":"import doli.tasks.TaskList;","lastModifiedDate":"2023-10-04"},{"lineNumber":6,"author":{"gitId":"danielpappa"},"content":"import doli.tasks.Event;","lastModifiedDate":"2023-10-04"},{"lineNumber":7,"author":{"gitId":"danielpappa"},"content":"import doli.tasks.Deadline;","lastModifiedDate":"2023-10-04"},{"lineNumber":8,"author":{"gitId":"danielpappa"},"content":"import doli.tasks.ToDo;","lastModifiedDate":"2023-10-04"},{"lineNumber":9,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":10,"author":{"gitId":"danielpappa"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2023-10-03"},{"lineNumber":11,"author":{"gitId":"danielpappa"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-10-03"},{"lineNumber":12,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":13,"author":{"gitId":"danielpappa"},"content":"/**","lastModifiedDate":"2023-10-03"},{"lineNumber":14,"author":{"gitId":"danielpappa"},"content":" * \u003ch3\u003eCommand class\u003c/h3\u003e","lastModifiedDate":"2023-10-03"},{"lineNumber":15,"author":{"gitId":"danielpappa"},"content":" * The command class aims at organising the input of the user,","lastModifiedDate":"2023-10-03"},{"lineNumber":16,"author":{"gitId":"danielpappa"},"content":" * by delegating an action according to the specific command.","lastModifiedDate":"2023-10-03"},{"lineNumber":17,"author":{"gitId":"danielpappa"},"content":" * Its core is represented by a multitude of methods to be applied to the input.","lastModifiedDate":"2023-10-05"},{"lineNumber":18,"author":{"gitId":"danielpappa"},"content":" *","lastModifiedDate":"2023-10-03"},{"lineNumber":19,"author":{"gitId":"danielpappa"},"content":" * @author pappalardodaniel","lastModifiedDate":"2023-10-03"},{"lineNumber":20,"author":{"gitId":"danielpappa"},"content":" * @version 1.0","lastModifiedDate":"2023-10-03"},{"lineNumber":21,"author":{"gitId":"danielpappa"},"content":" * @since 2023-10-03","lastModifiedDate":"2023-10-03"},{"lineNumber":22,"author":{"gitId":"danielpappa"},"content":" */","lastModifiedDate":"2023-10-03"},{"lineNumber":23,"author":{"gitId":"danielpappa"},"content":"public class Command {","lastModifiedDate":"2023-09-22"},{"lineNumber":24,"author":{"gitId":"danielpappa"},"content":"    /** Command keyword input by the user */","lastModifiedDate":"2023-10-06"},{"lineNumber":25,"author":{"gitId":"danielpappa"},"content":"    protected String command;","lastModifiedDate":"2023-09-22"},{"lineNumber":26,"author":{"gitId":"danielpappa"},"content":"    /** Details following command input by the user */","lastModifiedDate":"2023-10-06"},{"lineNumber":27,"author":{"gitId":"danielpappa"},"content":"    protected String[] details;","lastModifiedDate":"2023-09-22"},{"lineNumber":28,"author":{"gitId":"danielpappa"},"content":"    /** Boolean checking whether the user wants to stop the program. */","lastModifiedDate":"2023-10-06"},{"lineNumber":29,"author":{"gitId":"danielpappa"},"content":"    protected boolean isExit;","lastModifiedDate":"2023-09-22"},{"lineNumber":30,"author":{"gitId":"danielpappa"},"content":"    /** Output response by Doli */","lastModifiedDate":"2023-10-06"},{"lineNumber":31,"author":{"gitId":"danielpappa"},"content":"    protected String response;","lastModifiedDate":"2023-09-22"},{"lineNumber":32,"author":{"gitId":"danielpappa"},"content":"    private static final String TODO_COMMAND \u003d \"todo\";","lastModifiedDate":"2023-09-22"},{"lineNumber":33,"author":{"gitId":"danielpappa"},"content":"    private static final String DEADLINE_COMMAND \u003d \"deadline\";","lastModifiedDate":"2023-09-22"},{"lineNumber":34,"author":{"gitId":"danielpappa"},"content":"    private static final String EVENT_COMMAND \u003d \"event\";","lastModifiedDate":"2023-09-22"},{"lineNumber":35,"author":{"gitId":"danielpappa"},"content":"    private static final String LIST_COMMAND \u003d \"list\";","lastModifiedDate":"2023-09-22"},{"lineNumber":36,"author":{"gitId":"danielpappa"},"content":"    private static final String DELETE_COMMAND \u003d \"delete\";","lastModifiedDate":"2023-09-22"},{"lineNumber":37,"author":{"gitId":"danielpappa"},"content":"    private static final String CLEAR_COMMAND \u003d \"clear\";","lastModifiedDate":"2023-09-22"},{"lineNumber":38,"author":{"gitId":"danielpappa"},"content":"    private static final String MARK_COMMAND \u003d \"mark\";","lastModifiedDate":"2023-09-22"},{"lineNumber":39,"author":{"gitId":"danielpappa"},"content":"    private static final String UNMARK_COMMAND \u003d \"unmark\";","lastModifiedDate":"2023-09-22"},{"lineNumber":40,"author":{"gitId":"danielpappa"},"content":"    private static final String FIND_COMMAND \u003d \"find\";","lastModifiedDate":"2023-10-03"},{"lineNumber":41,"author":{"gitId":"danielpappa"},"content":"    private static final String LATE_COMMAND \u003d \"late\";","lastModifiedDate":"2023-10-04"},{"lineNumber":42,"author":{"gitId":"danielpappa"},"content":"    private static final String OVERVIEW_BY_SPECIFIC_DATE_COMMAND \u003d \"overview\";","lastModifiedDate":"2023-10-03"},{"lineNumber":43,"author":{"gitId":"danielpappa"},"content":"    private static final String HELP_COMMAND \u003d \"help\";","lastModifiedDate":"2023-10-05"},{"lineNumber":44,"author":{"gitId":"danielpappa"},"content":"    private static final String EXIT_COMMAND \u003d \"bye\";","lastModifiedDate":"2023-09-22"},{"lineNumber":45,"author":{"gitId":"danielpappa"},"content":"    private static final String UNRECOGNIZED_COMMAND \u003d \"I am so sorry, but I do not recognize this command. \"","lastModifiedDate":"2023-09-22"},{"lineNumber":46,"author":{"gitId":"danielpappa"},"content":"            + \"Please try typing something else.\";","lastModifiedDate":"2023-09-22"},{"lineNumber":47,"author":{"gitId":"danielpappa"},"content":"    private static final String ADDED_TASK_SUCCESSFULLY \u003d \"Got it! I\u0027ve added the following task to your agenda:\";","lastModifiedDate":"2023-09-22"},{"lineNumber":48,"author":{"gitId":"danielpappa"},"content":"    private static final String DELETED_TASK_SUCCESSFULLY \u003d \"Got it! I\u0027ve deleted task %d\";","lastModifiedDate":"2023-09-22"},{"lineNumber":49,"author":{"gitId":"danielpappa"},"content":"    private static final String DELETED_ALL_TASKS \u003d \"Got it! I\u0027ve deleted all tasks. Your agenda is now empty.\";","lastModifiedDate":"2023-09-22"},{"lineNumber":50,"author":{"gitId":"danielpappa"},"content":"    private static final String SUMMARIZING_CURRENT_AGENDA_ENTRIES \u003d \"Now you have a total of %d tasks in your agenda.\";","lastModifiedDate":"2023-09-22"},{"lineNumber":51,"author":{"gitId":"danielpappa"},"content":"    private static final String ENCOURAGE_TO_MARK \u003d \"Would you like to mark/unmark something else?\";","lastModifiedDate":"2023-09-22"},{"lineNumber":52,"author":{"gitId":"danielpappa"},"content":"    private static final String AGENDA_OVERVIEW \u003d \"Here is an overview of your agenda:\";","lastModifiedDate":"2023-09-22"},{"lineNumber":53,"author":{"gitId":"danielpappa"},"content":"    private static final String FAILED_TO_FIND_TASK \u003d \"Watch out! The given task index does not exist\";","lastModifiedDate":"2023-09-22"},{"lineNumber":54,"author":{"gitId":"danielpappa"},"content":"    private static final String MARKED_SUCCESSFULLY \u003d \"I\u0027ve successfully marked task %d as done.\";","lastModifiedDate":"2023-09-22"},{"lineNumber":55,"author":{"gitId":"danielpappa"},"content":"    private static final String UNMARKED_SUCCESSFULLY \u003d \"I\u0027ve unmarked task %d. You better get it done soon!\";","lastModifiedDate":"2023-09-22"},{"lineNumber":56,"author":{"gitId":"danielpappa"},"content":"    private static final String NO_TASKS_FOR_THIS_DATE \u003d \"There are no entries in your agenda until this date.\";","lastModifiedDate":"2023-10-03"},{"lineNumber":57,"author":{"gitId":"danielpappa"},"content":"    private static final String MATCHING_TASKS \u003d \"Here are the tasks matching your input keyword:\";","lastModifiedDate":"2023-10-03"},{"lineNumber":58,"author":{"gitId":"danielpappa"},"content":"    private static final String LATE_TASKS_OVERVIEW \u003d \"Here\u0027s an overview of tasks that were due and past events:\";","lastModifiedDate":"2023-10-05"},{"lineNumber":59,"author":{"gitId":"danielpappa"},"content":"    private static final String NO_LATE_TASKS \u003d \"You have no late tasks, great job!\";","lastModifiedDate":"2023-10-04"},{"lineNumber":60,"author":{"gitId":"danielpappa"},"content":"    private static final String HELP \u003d \"Refer to the user guide for help: https://danielpappa.github.io/ip/\";","lastModifiedDate":"2023-10-05"},{"lineNumber":61,"author":{"gitId":"danielpappa"},"content":"    private static final String NO_TASKS_FOUND \u003d \"The given keyword did not produce any search results in your agenda\";","lastModifiedDate":"2023-10-03"},{"lineNumber":62,"author":{"gitId":"danielpappa"},"content":"    private static final String EXIT \u003d \"Alright, I hope I was able to help you out.\";","lastModifiedDate":"2023-10-04"},{"lineNumber":63,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":64,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":65,"author":{"gitId":"danielpappa"},"content":"     * Constructs an object of type Command. The boolean isExit is automatically","lastModifiedDate":"2023-10-03"},{"lineNumber":66,"author":{"gitId":"danielpappa"},"content":"     * set to false when the command is initialised without no further checks.","lastModifiedDate":"2023-10-03"},{"lineNumber":67,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-03"},{"lineNumber":68,"author":{"gitId":"danielpappa"},"content":"     * @param command of type String specifying the action to be carried out.","lastModifiedDate":"2023-10-06"},{"lineNumber":69,"author":{"gitId":"danielpappa"},"content":"     * @param details an array of Strings containing further information about the command.","lastModifiedDate":"2023-10-06"},{"lineNumber":70,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":71,"author":{"gitId":"danielpappa"},"content":"    public Command(String command, String[] details) {","lastModifiedDate":"2023-09-22"},{"lineNumber":72,"author":{"gitId":"danielpappa"},"content":"        this.command \u003d command;","lastModifiedDate":"2023-09-22"},{"lineNumber":73,"author":{"gitId":"danielpappa"},"content":"        this.details \u003d details;","lastModifiedDate":"2023-09-22"},{"lineNumber":74,"author":{"gitId":"danielpappa"},"content":"        this.isExit \u003d false;","lastModifiedDate":"2023-09-22"},{"lineNumber":75,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":76,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":77,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":78,"author":{"gitId":"danielpappa"},"content":"     * Checks whether the boolean variable isExit is","lastModifiedDate":"2023-10-03"},{"lineNumber":79,"author":{"gitId":"danielpappa"},"content":"     * true or false; This method is used to halt the","lastModifiedDate":"2023-10-03"},{"lineNumber":80,"author":{"gitId":"danielpappa"},"content":"     * program when the user wants to stop running it.","lastModifiedDate":"2023-10-03"},{"lineNumber":81,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":82,"author":{"gitId":"danielpappa"},"content":"     * @return isExit of type boolean.","lastModifiedDate":"2023-10-06"},{"lineNumber":83,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":84,"author":{"gitId":"danielpappa"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-09-22"},{"lineNumber":85,"author":{"gitId":"danielpappa"},"content":"        return this.isExit;","lastModifiedDate":"2023-09-22"},{"lineNumber":86,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":87,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":88,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":89,"author":{"gitId":"danielpappa"},"content":"     * Initialises a new todo task with the description given","lastModifiedDate":"2023-10-03"},{"lineNumber":90,"author":{"gitId":"danielpappa"},"content":"     * by the first element in the array of the details of the user input","lastModifiedDate":"2023-10-03"},{"lineNumber":91,"author":{"gitId":"danielpappa"},"content":"     * command, adds it to the TaskList and summarises this within the","lastModifiedDate":"2023-10-03"},{"lineNumber":92,"author":{"gitId":"danielpappa"},"content":"     * String variable response.","lastModifiedDate":"2023-10-03"},{"lineNumber":93,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":94,"author":{"gitId":"danielpappa"},"content":"     * @param tasks of type TaskList into which the new todo will be inserted.","lastModifiedDate":"2023-10-03"},{"lineNumber":95,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":96,"author":{"gitId":"danielpappa"},"content":"    private void initializeNewTodo(TaskList tasks) {","lastModifiedDate":"2023-09-22"},{"lineNumber":97,"author":{"gitId":"danielpappa"},"content":"        String description \u003d details[0];","lastModifiedDate":"2023-10-05"},{"lineNumber":98,"author":{"gitId":"danielpappa"},"content":"        ToDo newTodo \u003d new ToDo(description);","lastModifiedDate":"2023-10-05"},{"lineNumber":99,"author":{"gitId":"danielpappa"},"content":"        tasks.addTask(newTodo);","lastModifiedDate":"2023-09-22"},{"lineNumber":100,"author":{"gitId":"danielpappa"},"content":"        response \u003d String.format(\"%s\\n\\t%s\\n%s\",","lastModifiedDate":"2023-09-22"},{"lineNumber":101,"author":{"gitId":"danielpappa"},"content":"                ADDED_TASK_SUCCESSFULLY,","lastModifiedDate":"2023-09-22"},{"lineNumber":102,"author":{"gitId":"danielpappa"},"content":"                newTodo.toString(),","lastModifiedDate":"2023-09-22"},{"lineNumber":103,"author":{"gitId":"danielpappa"},"content":"                String.format(SUMMARIZING_CURRENT_AGENDA_ENTRIES, tasks.getSize()));","lastModifiedDate":"2023-09-22"},{"lineNumber":104,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":105,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":106,"author":{"gitId":"danielpappa"},"content":"     * Initialises a new deadline task with the description given","lastModifiedDate":"2023-10-03"},{"lineNumber":107,"author":{"gitId":"danielpappa"},"content":"     * by the first element in the array of the details of the user input","lastModifiedDate":"2023-10-03"},{"lineNumber":108,"author":{"gitId":"danielpappa"},"content":"     * command and the deadline itself given by the second element,","lastModifiedDate":"2023-10-03"},{"lineNumber":109,"author":{"gitId":"danielpappa"},"content":"     * adds it to the TaskList and summarises this within the","lastModifiedDate":"2023-10-03"},{"lineNumber":110,"author":{"gitId":"danielpappa"},"content":"     * String variable response.","lastModifiedDate":"2023-10-03"},{"lineNumber":111,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":112,"author":{"gitId":"danielpappa"},"content":"     * @param tasks of type TaskList into which the new deadline will be inserted.","lastModifiedDate":"2023-10-03"},{"lineNumber":113,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":114,"author":{"gitId":"danielpappa"},"content":"    private void initializeNewDeadline(TaskList tasks) {","lastModifiedDate":"2023-09-22"},{"lineNumber":115,"author":{"gitId":"danielpappa"},"content":"        String description \u003d details[0];","lastModifiedDate":"2023-10-05"},{"lineNumber":116,"author":{"gitId":"danielpappa"},"content":"        String deadline \u003d details[1].trim();","lastModifiedDate":"2023-10-05"},{"lineNumber":117,"author":{"gitId":"danielpappa"},"content":"        Deadline newDeadline \u003d new Deadline(description, deadline);","lastModifiedDate":"2023-10-05"},{"lineNumber":118,"author":{"gitId":"danielpappa"},"content":"        tasks.addTask(newDeadline);","lastModifiedDate":"2023-09-22"},{"lineNumber":119,"author":{"gitId":"danielpappa"},"content":"        response \u003d String.format(\"%s\\n\\t%s\\n%s\",","lastModifiedDate":"2023-10-05"},{"lineNumber":120,"author":{"gitId":"danielpappa"},"content":"                ADDED_TASK_SUCCESSFULLY,","lastModifiedDate":"2023-10-05"},{"lineNumber":121,"author":{"gitId":"danielpappa"},"content":"                newDeadline.toString(),","lastModifiedDate":"2023-10-05"},{"lineNumber":122,"author":{"gitId":"danielpappa"},"content":"                String.format(SUMMARIZING_CURRENT_AGENDA_ENTRIES, tasks.getSize()));","lastModifiedDate":"2023-10-05"},{"lineNumber":123,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":124,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":125,"author":{"gitId":"danielpappa"},"content":"     * Initialises a new event task with the description given","lastModifiedDate":"2023-10-03"},{"lineNumber":126,"author":{"gitId":"danielpappa"},"content":"     * by the first element in the array of the details of the user input","lastModifiedDate":"2023-10-03"},{"lineNumber":127,"author":{"gitId":"danielpappa"},"content":"     * command, the start date given by the second element and the end","lastModifiedDate":"2023-10-03"},{"lineNumber":128,"author":{"gitId":"danielpappa"},"content":"     * date given by the third element of the array provided by the user,","lastModifiedDate":"2023-10-05"},{"lineNumber":129,"author":{"gitId":"danielpappa"},"content":"     * adds it to the TaskList and summarises this within the","lastModifiedDate":"2023-10-03"},{"lineNumber":130,"author":{"gitId":"danielpappa"},"content":"     * String variable response.","lastModifiedDate":"2023-10-03"},{"lineNumber":131,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":132,"author":{"gitId":"danielpappa"},"content":"     * @param tasks of type TaskList into which the new event will be inserted.","lastModifiedDate":"2023-10-03"},{"lineNumber":133,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":134,"author":{"gitId":"danielpappa"},"content":"    private void initializeNewEvent(TaskList tasks) {","lastModifiedDate":"2023-09-22"},{"lineNumber":135,"author":{"gitId":"danielpappa"},"content":"        String description \u003d details[0];","lastModifiedDate":"2023-10-05"},{"lineNumber":136,"author":{"gitId":"danielpappa"},"content":"        String startDate \u003d details[1].trim();","lastModifiedDate":"2023-10-05"},{"lineNumber":137,"author":{"gitId":"danielpappa"},"content":"        String endDate \u003d details[2].trim();","lastModifiedDate":"2023-10-05"},{"lineNumber":138,"author":{"gitId":"danielpappa"},"content":"        Event newEvent \u003d new Event(description, startDate, endDate);","lastModifiedDate":"2023-10-05"},{"lineNumber":139,"author":{"gitId":"danielpappa"},"content":"        tasks.addTask(newEvent);","lastModifiedDate":"2023-09-22"},{"lineNumber":140,"author":{"gitId":"danielpappa"},"content":"        response \u003d String.format(\"%s\\n\\t%s\\n%s\",","lastModifiedDate":"2023-10-05"},{"lineNumber":141,"author":{"gitId":"danielpappa"},"content":"                ADDED_TASK_SUCCESSFULLY,","lastModifiedDate":"2023-10-05"},{"lineNumber":142,"author":{"gitId":"danielpappa"},"content":"                newEvent.toString(),","lastModifiedDate":"2023-10-05"},{"lineNumber":143,"author":{"gitId":"danielpappa"},"content":"                String.format(SUMMARIZING_CURRENT_AGENDA_ENTRIES, tasks.getSize()));","lastModifiedDate":"2023-10-05"},{"lineNumber":144,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":145,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":146,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":147,"author":{"gitId":"danielpappa"},"content":"     * Sets the response variable to a general overview of all the entries in","lastModifiedDate":"2023-10-03"},{"lineNumber":148,"author":{"gitId":"danielpappa"},"content":"     * the agenda by using the overwritten method toString.","lastModifiedDate":"2023-10-03"},{"lineNumber":149,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":150,"author":{"gitId":"danielpappa"},"content":"     * @param tasks of type TaskList containing all the specific tasks.","lastModifiedDate":"2023-10-06"},{"lineNumber":151,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":152,"author":{"gitId":"danielpappa"},"content":"    private void listAgenda(TaskList tasks) {","lastModifiedDate":"2023-09-22"},{"lineNumber":153,"author":{"gitId":"danielpappa"},"content":"        response \u003d String.format(\"%s\\n%s\", AGENDA_OVERVIEW, tasks.toString());","lastModifiedDate":"2023-09-22"},{"lineNumber":154,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":155,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":156,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":157,"author":{"gitId":"danielpappa"},"content":"     * Deletes the task specified by the details provided by the user","lastModifiedDate":"2023-10-03"},{"lineNumber":158,"author":{"gitId":"danielpappa"},"content":"     * within the command.","lastModifiedDate":"2023-10-03"},{"lineNumber":159,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":160,"author":{"gitId":"danielpappa"},"content":"     * @param tasks of type TaskList containing the entire list of tasks, of which one will be deleted.","lastModifiedDate":"2023-10-06"},{"lineNumber":161,"author":{"gitId":"danielpappa"},"content":"     * @throws DoliExceptions in case the provided task was not found.","lastModifiedDate":"2023-10-06"},{"lineNumber":162,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":163,"author":{"gitId":"danielpappa"},"content":"    private void deleteTask(TaskList tasks) throws DoliExceptions {","lastModifiedDate":"2023-09-22"},{"lineNumber":164,"author":{"gitId":"danielpappa"},"content":"        int taskNumber \u003d tryToParse(details[0]);","lastModifiedDate":"2023-09-22"},{"lineNumber":165,"author":{"gitId":"danielpappa"},"content":"        checkNotOutOfBounds(taskNumber, tasks);","lastModifiedDate":"2023-09-22"},{"lineNumber":166,"author":{"gitId":"danielpappa"},"content":"        tasks.deleteTask(taskNumber);","lastModifiedDate":"2023-09-22"},{"lineNumber":167,"author":{"gitId":"danielpappa"},"content":"        response \u003d String.format(DELETED_TASK_SUCCESSFULLY, taskNumber);","lastModifiedDate":"2023-09-22"},{"lineNumber":168,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":169,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":170,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":171,"author":{"gitId":"danielpappa"},"content":"     * Deletes all tasks contained in the agenda so far by resetting the agenda to a blank TaskList.","lastModifiedDate":"2023-10-06"},{"lineNumber":172,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":173,"author":{"gitId":"danielpappa"},"content":"     * @param tasks of type TaskList, specifying the tasks to be deleted.","lastModifiedDate":"2023-10-03"},{"lineNumber":174,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":175,"author":{"gitId":"danielpappa"},"content":"    private void deleteAll(TaskList tasks) {","lastModifiedDate":"2023-09-22"},{"lineNumber":176,"author":{"gitId":"danielpappa"},"content":"        tasks.deleteAll();","lastModifiedDate":"2023-09-22"},{"lineNumber":177,"author":{"gitId":"danielpappa"},"content":"        response \u003d DELETED_ALL_TASKS;","lastModifiedDate":"2023-09-22"},{"lineNumber":178,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":179,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":180,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":181,"author":{"gitId":"danielpappa"},"content":"     * Marks the task specified by the user as done (X). The user","lastModifiedDate":"2023-10-03"},{"lineNumber":182,"author":{"gitId":"danielpappa"},"content":"     * input is expected to be of type command + task number.","lastModifiedDate":"2023-10-04"},{"lineNumber":183,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":184,"author":{"gitId":"danielpappa"},"content":"     * @param tasks of type TaskList containing the entire agenda.","lastModifiedDate":"2023-10-06"},{"lineNumber":185,"author":{"gitId":"danielpappa"},"content":"     * @throws DoliExceptions to handle the cases in which the task number is not contained in the agenda.","lastModifiedDate":"2023-10-06"},{"lineNumber":186,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":187,"author":{"gitId":"danielpappa"},"content":"    private void setMark(TaskList tasks) throws DoliExceptions{","lastModifiedDate":"2023-09-22"},{"lineNumber":188,"author":{"gitId":"danielpappa"},"content":"        int taskNumber \u003d tryToParse(details[0]);","lastModifiedDate":"2023-09-22"},{"lineNumber":189,"author":{"gitId":"danielpappa"},"content":"        checkNotOutOfBounds(taskNumber, tasks);","lastModifiedDate":"2023-09-22"},{"lineNumber":190,"author":{"gitId":"danielpappa"},"content":"        tasks.getTask(taskNumber).markTaskAsDone();","lastModifiedDate":"2023-09-22"},{"lineNumber":191,"author":{"gitId":"danielpappa"},"content":"        response \u003d String.format(\"%s\\n%s\",","lastModifiedDate":"2023-09-22"},{"lineNumber":192,"author":{"gitId":"danielpappa"},"content":"                String.format(MARKED_SUCCESSFULLY, taskNumber),","lastModifiedDate":"2023-09-22"},{"lineNumber":193,"author":{"gitId":"danielpappa"},"content":"                ENCOURAGE_TO_MARK);","lastModifiedDate":"2023-09-22"},{"lineNumber":194,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":195,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":196,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":197,"author":{"gitId":"danielpappa"},"content":"     * Marks the task specified by the user as not done (X). The user","lastModifiedDate":"2023-10-03"},{"lineNumber":198,"author":{"gitId":"danielpappa"},"content":"     * input is expected to be of type command + task number.","lastModifiedDate":"2023-10-04"},{"lineNumber":199,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":200,"author":{"gitId":"danielpappa"},"content":"     * @param tasks of type TaskList containing the entire agenda.","lastModifiedDate":"2023-10-06"},{"lineNumber":201,"author":{"gitId":"danielpappa"},"content":"     * @throws DoliExceptions to handle the cases in which the task number is not contained in the agenda.","lastModifiedDate":"2023-10-06"},{"lineNumber":202,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":203,"author":{"gitId":"danielpappa"},"content":"    private void unsetMark(TaskList tasks) throws DoliExceptions {","lastModifiedDate":"2023-09-22"},{"lineNumber":204,"author":{"gitId":"danielpappa"},"content":"        int taskNumber \u003d tryToParse(details[0]);","lastModifiedDate":"2023-09-22"},{"lineNumber":205,"author":{"gitId":"danielpappa"},"content":"        checkNotOutOfBounds(taskNumber, tasks);","lastModifiedDate":"2023-09-22"},{"lineNumber":206,"author":{"gitId":"danielpappa"},"content":"        tasks.getTask(taskNumber).markTaskAsNotDone();","lastModifiedDate":"2023-09-22"},{"lineNumber":207,"author":{"gitId":"danielpappa"},"content":"        response \u003d String.format(\"%s\\n%s\",","lastModifiedDate":"2023-09-22"},{"lineNumber":208,"author":{"gitId":"danielpappa"},"content":"                String.format(UNMARKED_SUCCESSFULLY, taskNumber),","lastModifiedDate":"2023-09-22"},{"lineNumber":209,"author":{"gitId":"danielpappa"},"content":"                ENCOURAGE_TO_MARK);","lastModifiedDate":"2023-09-22"},{"lineNumber":210,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":211,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":212,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":213,"author":{"gitId":"danielpappa"},"content":"     * Sets response equal to an overview of all the deadlines and events contained in the agenda","lastModifiedDate":"2023-10-03"},{"lineNumber":214,"author":{"gitId":"danielpappa"},"content":"     * which are due (or scheduled to happen, in case of events) by a user-specified date.","lastModifiedDate":"2023-10-03"},{"lineNumber":215,"author":{"gitId":"danielpappa"},"content":"     * The expected command input is of type command + date.","lastModifiedDate":"2023-10-04"},{"lineNumber":216,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":217,"author":{"gitId":"danielpappa"},"content":"     * @param tasks of type TaskList containing all the tasks in the agenda.","lastModifiedDate":"2023-10-06"},{"lineNumber":218,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":219,"author":{"gitId":"danielpappa"},"content":"    private void overviewBySpecificDate(TaskList tasks) {","lastModifiedDate":"2023-10-03"},{"lineNumber":220,"author":{"gitId":"danielpappa"},"content":"        TaskList overview \u003d new TaskList();","lastModifiedDate":"2023-10-03"},{"lineNumber":221,"author":{"gitId":"danielpappa"},"content":"        try {","lastModifiedDate":"2023-10-03"},{"lineNumber":222,"author":{"gitId":"danielpappa"},"content":"            LocalDate timeInput \u003d LocalDate.parse(details[0]);","lastModifiedDate":"2023-10-03"},{"lineNumber":223,"author":{"gitId":"danielpappa"},"content":"            tasks.stream()","lastModifiedDate":"2023-10-04"},{"lineNumber":224,"author":{"gitId":"danielpappa"},"content":"                    .filter((t) -\u003e t instanceof Deadline","lastModifiedDate":"2023-10-04"},{"lineNumber":225,"author":{"gitId":"danielpappa"},"content":"                            \u0026\u0026 ((Deadline) t).getDeadline().isBefore(timeInput)).forEach(overview::addTask);","lastModifiedDate":"2023-10-04"},{"lineNumber":226,"author":{"gitId":"danielpappa"},"content":"            tasks.stream()","lastModifiedDate":"2023-10-04"},{"lineNumber":227,"author":{"gitId":"danielpappa"},"content":"                    .filter((t) -\u003e t instanceof Event","lastModifiedDate":"2023-10-04"},{"lineNumber":228,"author":{"gitId":"danielpappa"},"content":"                            \u0026\u0026 ((Event) t).getEndTime().isBefore(timeInput)).forEach(overview::addTask);","lastModifiedDate":"2023-10-05"},{"lineNumber":229,"author":{"gitId":"danielpappa"},"content":"        } catch(DateTimeException e) {","lastModifiedDate":"2023-10-03"},{"lineNumber":230,"author":{"gitId":"danielpappa"},"content":"            System.out.println(\"Please provide a proper date as input\");","lastModifiedDate":"2023-10-03"},{"lineNumber":231,"author":{"gitId":"danielpappa"},"content":"        }","lastModifiedDate":"2023-10-03"},{"lineNumber":232,"author":{"gitId":"danielpappa"},"content":"        if (overview.getSize() \u003e 0) {","lastModifiedDate":"2023-10-03"},{"lineNumber":233,"author":{"gitId":"danielpappa"},"content":"            response \u003d String.format(\"%s\\n%s\", AGENDA_OVERVIEW, overview.toString());","lastModifiedDate":"2023-10-03"},{"lineNumber":234,"author":{"gitId":"danielpappa"},"content":"        } else {","lastModifiedDate":"2023-10-03"},{"lineNumber":235,"author":{"gitId":"danielpappa"},"content":"            response \u003d NO_TASKS_FOR_THIS_DATE;","lastModifiedDate":"2023-10-03"},{"lineNumber":236,"author":{"gitId":"danielpappa"},"content":"        }","lastModifiedDate":"2023-10-03"},{"lineNumber":237,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-10-03"},{"lineNumber":238,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":239,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":240,"author":{"gitId":"danielpappa"},"content":"     * Looks for a user-provided keyword within the descriptions of the agenda and","lastModifiedDate":"2023-10-03"},{"lineNumber":241,"author":{"gitId":"danielpappa"},"content":"     * sets response equal to the search result.","lastModifiedDate":"2023-10-03"},{"lineNumber":242,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":243,"author":{"gitId":"danielpappa"},"content":"     * @param tasks of type TaskList containing all entries of the agenda.","lastModifiedDate":"2023-10-06"},{"lineNumber":244,"author":{"gitId":"danielpappa"},"content":"     * @throws DoliExceptions to handle the case in which the user input is incorrect.","lastModifiedDate":"2023-10-03"},{"lineNumber":245,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":246,"author":{"gitId":"danielpappa"},"content":"    private void find(TaskList tasks) throws DoliExceptions {","lastModifiedDate":"2023-10-03"},{"lineNumber":247,"author":{"gitId":"danielpappa"},"content":"        TaskList searchResults \u003d new TaskList();","lastModifiedDate":"2023-10-03"},{"lineNumber":248,"author":{"gitId":"danielpappa"},"content":"        String keyword \u003d details[0];","lastModifiedDate":"2023-10-03"},{"lineNumber":249,"author":{"gitId":"danielpappa"},"content":"        if (details[0].trim().isEmpty()) {","lastModifiedDate":"2023-10-03"},{"lineNumber":250,"author":{"gitId":"danielpappa"},"content":"            throw new DoliExceptions(\"Please provide a keyword to search your agenda.\");","lastModifiedDate":"2023-10-03"},{"lineNumber":251,"author":{"gitId":"danielpappa"},"content":"        }","lastModifiedDate":"2023-10-03"},{"lineNumber":252,"author":{"gitId":"danielpappa"},"content":"        tasks.stream().filter((t) -\u003e t.getDescription().contains(keyword)).forEach(searchResults::addTask);","lastModifiedDate":"2023-10-03"},{"lineNumber":253,"author":{"gitId":"danielpappa"},"content":"        if (searchResults.getSize() \u003e 0) {","lastModifiedDate":"2023-10-03"},{"lineNumber":254,"author":{"gitId":"danielpappa"},"content":"            response \u003d String.format(\"%s\\n%s\", MATCHING_TASKS, searchResults.toString());","lastModifiedDate":"2023-10-03"},{"lineNumber":255,"author":{"gitId":"danielpappa"},"content":"        } else {","lastModifiedDate":"2023-10-03"},{"lineNumber":256,"author":{"gitId":"danielpappa"},"content":"            response \u003d NO_TASKS_FOUND;","lastModifiedDate":"2023-10-03"},{"lineNumber":257,"author":{"gitId":"danielpappa"},"content":"        }","lastModifiedDate":"2023-10-03"},{"lineNumber":258,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-10-03"},{"lineNumber":259,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":260,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-04"},{"lineNumber":261,"author":{"gitId":"danielpappa"},"content":"     * Lists all tasks of type deadline that were due before today","lastModifiedDate":"2023-10-04"},{"lineNumber":262,"author":{"gitId":"danielpappa"},"content":"     * as well as all past events.","lastModifiedDate":"2023-10-04"},{"lineNumber":263,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":264,"author":{"gitId":"danielpappa"},"content":"     * @param tasks of type TaskList referring to the agenda where the tasks are contained.","lastModifiedDate":"2023-10-06"},{"lineNumber":265,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-04"},{"lineNumber":266,"author":{"gitId":"danielpappa"},"content":"    private void listLateTasks(TaskList tasks) {","lastModifiedDate":"2023-10-04"},{"lineNumber":267,"author":{"gitId":"danielpappa"},"content":"        TaskList overview \u003d new TaskList();","lastModifiedDate":"2023-10-04"},{"lineNumber":268,"author":{"gitId":"danielpappa"},"content":"        tasks.stream()","lastModifiedDate":"2023-10-04"},{"lineNumber":269,"author":{"gitId":"danielpappa"},"content":"                .filter((t) -\u003e t instanceof Deadline","lastModifiedDate":"2023-10-04"},{"lineNumber":270,"author":{"gitId":"danielpappa"},"content":"                        \u0026\u0026 ((Deadline) t).getDeadline().isBefore(LocalDate.now())).forEach(overview::addTask);","lastModifiedDate":"2023-10-04"},{"lineNumber":271,"author":{"gitId":"danielpappa"},"content":"        tasks.stream()","lastModifiedDate":"2023-10-04"},{"lineNumber":272,"author":{"gitId":"danielpappa"},"content":"                .filter((t) -\u003e t instanceof Event","lastModifiedDate":"2023-10-04"},{"lineNumber":273,"author":{"gitId":"danielpappa"},"content":"                        \u0026\u0026 ((Event) t).getEndTime().isBefore(LocalDate.now())).forEach(overview::addTask);","lastModifiedDate":"2023-10-04"},{"lineNumber":274,"author":{"gitId":"danielpappa"},"content":"        if (overview.getSize() \u003e 0) {","lastModifiedDate":"2023-10-04"},{"lineNumber":275,"author":{"gitId":"danielpappa"},"content":"            response \u003d String.format(\"%s\\n%s\", LATE_TASKS_OVERVIEW, overview.toString());","lastModifiedDate":"2023-10-04"},{"lineNumber":276,"author":{"gitId":"danielpappa"},"content":"        } else {","lastModifiedDate":"2023-10-04"},{"lineNumber":277,"author":{"gitId":"danielpappa"},"content":"            response \u003d NO_LATE_TASKS;","lastModifiedDate":"2023-10-04"},{"lineNumber":278,"author":{"gitId":"danielpappa"},"content":"        }","lastModifiedDate":"2023-10-04"},{"lineNumber":279,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-10-04"},{"lineNumber":280,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":281,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-05"},{"lineNumber":282,"author":{"gitId":"danielpappa"},"content":"     * Sets response to a String containing the link to the user guide with an overview of the chatbots features.","lastModifiedDate":"2023-10-06"},{"lineNumber":283,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-05"},{"lineNumber":284,"author":{"gitId":"danielpappa"},"content":"    private void help() {","lastModifiedDate":"2023-10-05"},{"lineNumber":285,"author":{"gitId":"danielpappa"},"content":"        response \u003d HELP;","lastModifiedDate":"2023-10-05"},{"lineNumber":286,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-10-05"},{"lineNumber":287,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":288,"author":{"gitId":"danielpappa"},"content":"     * Highlights how Doli was not able to capture the command as it did not recognize it","lastModifiedDate":"2023-10-03"},{"lineNumber":289,"author":{"gitId":"danielpappa"},"content":"     * and sets response equal to a description of the previous.","lastModifiedDate":"2023-10-03"},{"lineNumber":290,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":291,"author":{"gitId":"danielpappa"},"content":"    private void unrecognizedInputCommand() {","lastModifiedDate":"2023-09-22"},{"lineNumber":292,"author":{"gitId":"danielpappa"},"content":"        response \u003d UNRECOGNIZED_COMMAND;","lastModifiedDate":"2023-09-22"},{"lineNumber":293,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":294,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":295,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":296,"author":{"gitId":"danielpappa"},"content":"     * Sets the boolean variable isExit to true which will cause the while loop","lastModifiedDate":"2023-10-03"},{"lineNumber":297,"author":{"gitId":"danielpappa"},"content":"     * in the Doli class to come to a halt and the program to exit.","lastModifiedDate":"2023-10-03"},{"lineNumber":298,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":299,"author":{"gitId":"danielpappa"},"content":"    private void prepareForExit() {","lastModifiedDate":"2023-09-22"},{"lineNumber":300,"author":{"gitId":"danielpappa"},"content":"        response \u003d EXIT;","lastModifiedDate":"2023-09-22"},{"lineNumber":301,"author":{"gitId":"danielpappa"},"content":"        this.isExit \u003d true;","lastModifiedDate":"2023-09-22"},{"lineNumber":302,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":303,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":304,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":305,"author":{"gitId":"danielpappa"},"content":"     * Tries to parse an input String text into an integer value. If it does not succeed the method","lastModifiedDate":"2023-10-03"},{"lineNumber":306,"author":{"gitId":"danielpappa"},"content":"     * returns the value -1 which is never an index of the agenda and hence easy to identify.","lastModifiedDate":"2023-10-03"},{"lineNumber":307,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":308,"author":{"gitId":"danielpappa"},"content":"     * @param text of type String which is to be parsed into integers.","lastModifiedDate":"2023-10-06"},{"lineNumber":309,"author":{"gitId":"danielpappa"},"content":"     * @return the successfully parsed integer or -1.","lastModifiedDate":"2023-10-06"},{"lineNumber":310,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":311,"author":{"gitId":"danielpappa"},"content":"    private static Integer tryToParse(String text) {","lastModifiedDate":"2023-09-22"},{"lineNumber":312,"author":{"gitId":"danielpappa"},"content":"        try {","lastModifiedDate":"2023-09-22"},{"lineNumber":313,"author":{"gitId":"danielpappa"},"content":"            return Integer.parseInt(text);","lastModifiedDate":"2023-09-22"},{"lineNumber":314,"author":{"gitId":"danielpappa"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-09-22"},{"lineNumber":315,"author":{"gitId":"danielpappa"},"content":"            return -1;","lastModifiedDate":"2023-09-22"},{"lineNumber":316,"author":{"gitId":"danielpappa"},"content":"        }","lastModifiedDate":"2023-09-22"},{"lineNumber":317,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":318,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":319,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":320,"author":{"gitId":"danielpappa"},"content":"     * Checks if the user detail input is within the bounds of the agenda.","lastModifiedDate":"2023-10-03"},{"lineNumber":321,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":322,"author":{"gitId":"danielpappa"},"content":"     * @param inputNumber of type int specifying the task number to be carried an action upon.","lastModifiedDate":"2023-10-06"},{"lineNumber":323,"author":{"gitId":"danielpappa"},"content":"     * @param tasks of type TaskList containing all the tasks in the agenda.","lastModifiedDate":"2023-10-06"},{"lineNumber":324,"author":{"gitId":"danielpappa"},"content":"     * @throws DoliExceptions to handle the case in which the provided number could not be parsed or exceeds the limit.","lastModifiedDate":"2023-10-06"},{"lineNumber":325,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":326,"author":{"gitId":"danielpappa"},"content":"    private void checkNotOutOfBounds(int inputNumber, TaskList tasks) throws DoliExceptions{","lastModifiedDate":"2023-09-22"},{"lineNumber":327,"author":{"gitId":"danielpappa"},"content":"        int totalTaskSize \u003d tasks.getSize();","lastModifiedDate":"2023-10-03"},{"lineNumber":328,"author":{"gitId":"danielpappa"},"content":"        int parsingFailed \u003d -1;","lastModifiedDate":"2023-10-03"},{"lineNumber":329,"author":{"gitId":"danielpappa"},"content":"        if (inputNumber \u003e totalTaskSize || inputNumber \u003d\u003d parsingFailed) {","lastModifiedDate":"2023-10-03"},{"lineNumber":330,"author":{"gitId":"danielpappa"},"content":"            throw new DoliExceptions(FAILED_TO_FIND_TASK);","lastModifiedDate":"2023-09-22"},{"lineNumber":331,"author":{"gitId":"danielpappa"},"content":"        }","lastModifiedDate":"2023-09-22"},{"lineNumber":332,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":333,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":334,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":335,"author":{"gitId":"danielpappa"},"content":"     * Handles commands and is the core method of the Command class,","lastModifiedDate":"2023-10-06"},{"lineNumber":336,"author":{"gitId":"danielpappa"},"content":"     * responsible for identifying the specific cases and carrying out","lastModifiedDate":"2023-10-06"},{"lineNumber":337,"author":{"gitId":"danielpappa"},"content":"     * the correct actions based on the input command. It successively also modifies/updates the file","lastModifiedDate":"2023-10-03"},{"lineNumber":338,"author":{"gitId":"danielpappa"},"content":"     * in the storage, so that the agenda is stored in its updated version and can be retrieved as such","lastModifiedDate":"2023-10-03"},{"lineNumber":339,"author":{"gitId":"danielpappa"},"content":"     * when Doli is run for the next time.","lastModifiedDate":"2023-10-03"},{"lineNumber":340,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":341,"author":{"gitId":"danielpappa"},"content":"     * @param tasks of type TaskList containing all entries of the agenda.","lastModifiedDate":"2023-10-06"},{"lineNumber":342,"author":{"gitId":"danielpappa"},"content":"     * @param storage of type Storage to handle permanent modifications of the agenda.","lastModifiedDate":"2023-10-06"},{"lineNumber":343,"author":{"gitId":"danielpappa"},"content":"     * @throws DoliExceptions handling any kind of error related to wrongly formatted input commands or similar.","lastModifiedDate":"2023-10-06"},{"lineNumber":344,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":345,"author":{"gitId":"danielpappa"},"content":"    public void handleCommand(TaskList tasks, Storage storage) throws DoliExceptions {","lastModifiedDate":"2023-10-05"},{"lineNumber":346,"author":{"gitId":"danielpappa"},"content":"        switch (command) {","lastModifiedDate":"2023-09-22"},{"lineNumber":347,"author":{"gitId":"danielpappa"},"content":"        case TODO_COMMAND:","lastModifiedDate":"2023-09-22"},{"lineNumber":348,"author":{"gitId":"danielpappa"},"content":"            initializeNewTodo(tasks);","lastModifiedDate":"2023-09-22"},{"lineNumber":349,"author":{"gitId":"danielpappa"},"content":"            break;","lastModifiedDate":"2023-09-22"},{"lineNumber":350,"author":{"gitId":"danielpappa"},"content":"        case DEADLINE_COMMAND:","lastModifiedDate":"2023-09-22"},{"lineNumber":351,"author":{"gitId":"danielpappa"},"content":"            initializeNewDeadline(tasks);","lastModifiedDate":"2023-09-22"},{"lineNumber":352,"author":{"gitId":"danielpappa"},"content":"            break;","lastModifiedDate":"2023-09-22"},{"lineNumber":353,"author":{"gitId":"danielpappa"},"content":"        case EVENT_COMMAND:","lastModifiedDate":"2023-09-22"},{"lineNumber":354,"author":{"gitId":"danielpappa"},"content":"            initializeNewEvent(tasks);","lastModifiedDate":"2023-09-22"},{"lineNumber":355,"author":{"gitId":"danielpappa"},"content":"            break;","lastModifiedDate":"2023-09-22"},{"lineNumber":356,"author":{"gitId":"danielpappa"},"content":"        case LIST_COMMAND:","lastModifiedDate":"2023-09-22"},{"lineNumber":357,"author":{"gitId":"danielpappa"},"content":"            listAgenda(tasks);","lastModifiedDate":"2023-09-22"},{"lineNumber":358,"author":{"gitId":"danielpappa"},"content":"            break;","lastModifiedDate":"2023-09-22"},{"lineNumber":359,"author":{"gitId":"danielpappa"},"content":"        case DELETE_COMMAND:","lastModifiedDate":"2023-09-22"},{"lineNumber":360,"author":{"gitId":"danielpappa"},"content":"            deleteTask(tasks);","lastModifiedDate":"2023-09-22"},{"lineNumber":361,"author":{"gitId":"danielpappa"},"content":"            break;","lastModifiedDate":"2023-09-22"},{"lineNumber":362,"author":{"gitId":"danielpappa"},"content":"        case CLEAR_COMMAND:","lastModifiedDate":"2023-09-22"},{"lineNumber":363,"author":{"gitId":"danielpappa"},"content":"            deleteAll(tasks);","lastModifiedDate":"2023-09-22"},{"lineNumber":364,"author":{"gitId":"danielpappa"},"content":"            break;","lastModifiedDate":"2023-09-22"},{"lineNumber":365,"author":{"gitId":"danielpappa"},"content":"        case MARK_COMMAND:","lastModifiedDate":"2023-09-22"},{"lineNumber":366,"author":{"gitId":"danielpappa"},"content":"            setMark(tasks);","lastModifiedDate":"2023-09-22"},{"lineNumber":367,"author":{"gitId":"danielpappa"},"content":"            break;","lastModifiedDate":"2023-09-22"},{"lineNumber":368,"author":{"gitId":"danielpappa"},"content":"        case UNMARK_COMMAND:","lastModifiedDate":"2023-09-22"},{"lineNumber":369,"author":{"gitId":"danielpappa"},"content":"            unsetMark(tasks);","lastModifiedDate":"2023-09-22"},{"lineNumber":370,"author":{"gitId":"danielpappa"},"content":"            break;","lastModifiedDate":"2023-09-22"},{"lineNumber":371,"author":{"gitId":"danielpappa"},"content":"        case OVERVIEW_BY_SPECIFIC_DATE_COMMAND:","lastModifiedDate":"2023-10-03"},{"lineNumber":372,"author":{"gitId":"danielpappa"},"content":"            overviewBySpecificDate(tasks);","lastModifiedDate":"2023-10-03"},{"lineNumber":373,"author":{"gitId":"danielpappa"},"content":"            break;","lastModifiedDate":"2023-10-03"},{"lineNumber":374,"author":{"gitId":"danielpappa"},"content":"        case FIND_COMMAND:","lastModifiedDate":"2023-10-03"},{"lineNumber":375,"author":{"gitId":"danielpappa"},"content":"            find(tasks);","lastModifiedDate":"2023-10-03"},{"lineNumber":376,"author":{"gitId":"danielpappa"},"content":"            break;","lastModifiedDate":"2023-10-03"},{"lineNumber":377,"author":{"gitId":"danielpappa"},"content":"        case LATE_COMMAND:","lastModifiedDate":"2023-10-04"},{"lineNumber":378,"author":{"gitId":"danielpappa"},"content":"            listLateTasks(tasks);","lastModifiedDate":"2023-10-04"},{"lineNumber":379,"author":{"gitId":"danielpappa"},"content":"            break;","lastModifiedDate":"2023-10-04"},{"lineNumber":380,"author":{"gitId":"danielpappa"},"content":"        case HELP_COMMAND:","lastModifiedDate":"2023-10-05"},{"lineNumber":381,"author":{"gitId":"danielpappa"},"content":"            help();","lastModifiedDate":"2023-10-05"},{"lineNumber":382,"author":{"gitId":"danielpappa"},"content":"            break;","lastModifiedDate":"2023-10-05"},{"lineNumber":383,"author":{"gitId":"danielpappa"},"content":"        case EXIT_COMMAND:","lastModifiedDate":"2023-09-22"},{"lineNumber":384,"author":{"gitId":"danielpappa"},"content":"            prepareForExit();","lastModifiedDate":"2023-09-22"},{"lineNumber":385,"author":{"gitId":"danielpappa"},"content":"            break;","lastModifiedDate":"2023-09-22"},{"lineNumber":386,"author":{"gitId":"danielpappa"},"content":"        default:","lastModifiedDate":"2023-09-22"},{"lineNumber":387,"author":{"gitId":"danielpappa"},"content":"            unrecognizedInputCommand();","lastModifiedDate":"2023-09-22"},{"lineNumber":388,"author":{"gitId":"danielpappa"},"content":"            break;","lastModifiedDate":"2023-09-22"},{"lineNumber":389,"author":{"gitId":"danielpappa"},"content":"        }","lastModifiedDate":"2023-09-22"},{"lineNumber":390,"author":{"gitId":"danielpappa"},"content":"        storage.modifyFile(tasks);","lastModifiedDate":"2023-09-22"},{"lineNumber":391,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":392,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":393,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":394,"author":{"gitId":"danielpappa"},"content":"     * Prints out the response variable which has been to an appropriate answer by the handleCommand() method.","lastModifiedDate":"2023-10-04"},{"lineNumber":395,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":396,"author":{"gitId":"danielpappa"},"content":"    public void getResponse() {","lastModifiedDate":"2023-09-22"},{"lineNumber":397,"author":{"gitId":"danielpappa"},"content":"        System.out.printf(String.format(\"Doli:\\n%s\\n\", response));","lastModifiedDate":"2023-10-04"},{"lineNumber":398,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":399,"author":{"gitId":"danielpappa"},"content":"}","lastModifiedDate":"2023-09-22"}],"authorContributionMap":{"danielpappa":399}},{"path":"app/src/main/java/doli/commands/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielpappa"},"content":"package doli.commands;","lastModifiedDate":"2023-09-22"},{"lineNumber":2,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":3,"author":{"gitId":"danielpappa"},"content":"import doli.exceptions.DoliExceptions;","lastModifiedDate":"2023-09-22"},{"lineNumber":4,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":5,"author":{"gitId":"danielpappa"},"content":"/**","lastModifiedDate":"2023-10-04"},{"lineNumber":6,"author":{"gitId":"danielpappa"},"content":" * \u003ch3\u003eParser class\u003c/h3\u003e","lastModifiedDate":"2023-10-04"},{"lineNumber":7,"author":{"gitId":"danielpappa"},"content":" * The parser class takes a user input and extracts the necessary","lastModifiedDate":"2023-10-04"},{"lineNumber":8,"author":{"gitId":"danielpappa"},"content":" * information to convert it into an object of type command. It splits","lastModifiedDate":"2023-10-04"},{"lineNumber":9,"author":{"gitId":"danielpappa"},"content":" * the input into two parts, command and details while making sure that","lastModifiedDate":"2023-10-04"},{"lineNumber":10,"author":{"gitId":"danielpappa"},"content":" * the inputs are valid (meaning that the right amount of details are","lastModifiedDate":"2023-10-04"},{"lineNumber":11,"author":{"gitId":"danielpappa"},"content":" * provided in the specific cases).","lastModifiedDate":"2023-10-04"},{"lineNumber":12,"author":{"gitId":"danielpappa"},"content":" *","lastModifiedDate":"2023-10-04"},{"lineNumber":13,"author":{"gitId":"danielpappa"},"content":" * @author pappalardodaniel","lastModifiedDate":"2023-10-04"},{"lineNumber":14,"author":{"gitId":"danielpappa"},"content":" * @version 1.0","lastModifiedDate":"2023-10-04"},{"lineNumber":15,"author":{"gitId":"danielpappa"},"content":" * @since 2023-11-03","lastModifiedDate":"2023-10-04"},{"lineNumber":16,"author":{"gitId":"danielpappa"},"content":" */","lastModifiedDate":"2023-10-04"},{"lineNumber":17,"author":{"gitId":"danielpappa"},"content":"public class Parser {","lastModifiedDate":"2023-09-22"},{"lineNumber":18,"author":{"gitId":"danielpappa"},"content":"    private static final String TODO_COMMAND \u003d \"todo\";","lastModifiedDate":"2023-09-22"},{"lineNumber":19,"author":{"gitId":"danielpappa"},"content":"    private static final String DEADLINE_COMMAND \u003d \"deadline\";","lastModifiedDate":"2023-09-22"},{"lineNumber":20,"author":{"gitId":"danielpappa"},"content":"    private static final String EVENT_COMMAND \u003d \"event\";","lastModifiedDate":"2023-09-22"},{"lineNumber":21,"author":{"gitId":"danielpappa"},"content":"    private static final String MARK_COMMAND \u003d \"mark\";","lastModifiedDate":"2023-09-22"},{"lineNumber":22,"author":{"gitId":"danielpappa"},"content":"    private static final String UNMARK_COMMAND \u003d \"unmark\";","lastModifiedDate":"2023-09-22"},{"lineNumber":23,"author":{"gitId":"danielpappa"},"content":"    private static final String DELETE_COMMAND \u003d \"delete\";","lastModifiedDate":"2023-10-04"},{"lineNumber":24,"author":{"gitId":"danielpappa"},"content":"    private static final String OVERVIEW_BY_SPECIFIC_DATE_COMMAND \u003d \"overview\";","lastModifiedDate":"2023-10-04"},{"lineNumber":25,"author":{"gitId":"danielpappa"},"content":"    private static final String FIND_COMMAND \u003d \"find\";","lastModifiedDate":"2023-10-04"},{"lineNumber":26,"author":{"gitId":"danielpappa"},"content":"    private static final int NR_EVENT_ARGS \u003d 3;","lastModifiedDate":"2023-09-22"},{"lineNumber":27,"author":{"gitId":"danielpappa"},"content":"    private static final int DATE_FORMAT_LENGTH \u003d 10; // \"yyyy-MM-dd\"","lastModifiedDate":"2023-10-05"},{"lineNumber":28,"author":{"gitId":"danielpappa"},"content":"    private static final int NR_DEADLINE_ARGS \u003d 2;","lastModifiedDate":"2023-09-22"},{"lineNumber":29,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":30,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-04"},{"lineNumber":31,"author":{"gitId":"danielpappa"},"content":"     * Constructs an empty object of type Parser.","lastModifiedDate":"2023-10-06"},{"lineNumber":32,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-04"},{"lineNumber":33,"author":{"gitId":"danielpappa"},"content":"    public Parser() {","lastModifiedDate":"2023-09-22"},{"lineNumber":34,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":35,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":36,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-04"},{"lineNumber":37,"author":{"gitId":"danielpappa"},"content":"     * Splits the input String into an array of length 2 containing the","lastModifiedDate":"2023-10-04"},{"lineNumber":38,"author":{"gitId":"danielpappa"},"content":"     * command keyword eventually alongside with some specific details.","lastModifiedDate":"2023-10-04"},{"lineNumber":39,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":40,"author":{"gitId":"danielpappa"},"content":"     * @param input of type String which represents the user input.","lastModifiedDate":"2023-10-06"},{"lineNumber":41,"author":{"gitId":"danielpappa"},"content":"     * @return an array of two strings, the command keyword and some details.","lastModifiedDate":"2023-10-06"},{"lineNumber":42,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-04"},{"lineNumber":43,"author":{"gitId":"danielpappa"},"content":"    private static String[] splitCommandAndDetails(String input) {","lastModifiedDate":"2023-09-22"},{"lineNumber":44,"author":{"gitId":"danielpappa"},"content":"        String[] commandAndDetails \u003d input.toLowerCase().split(\" \", 2);","lastModifiedDate":"2023-09-22"},{"lineNumber":45,"author":{"gitId":"danielpappa"},"content":"        if (commandAndDetails.length \u003d\u003d 2) {","lastModifiedDate":"2023-09-22"},{"lineNumber":46,"author":{"gitId":"danielpappa"},"content":"            return commandAndDetails;","lastModifiedDate":"2023-09-22"},{"lineNumber":47,"author":{"gitId":"danielpappa"},"content":"        } else {","lastModifiedDate":"2023-09-22"},{"lineNumber":48,"author":{"gitId":"danielpappa"},"content":"            return commandAndDetails \u003d new String[]{commandAndDetails[0], \"\"};","lastModifiedDate":"2023-09-22"},{"lineNumber":49,"author":{"gitId":"danielpappa"},"content":"        }","lastModifiedDate":"2023-09-22"},{"lineNumber":50,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":51,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":52,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-04"},{"lineNumber":53,"author":{"gitId":"danielpappa"},"content":"     * Creates a new object of type command with the user input command and details","lastModifiedDate":"2023-10-04"},{"lineNumber":54,"author":{"gitId":"danielpappa"},"content":"     * after checking validity of inputs and splitting the input into its sub-parts.","lastModifiedDate":"2023-10-05"},{"lineNumber":55,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":56,"author":{"gitId":"danielpappa"},"content":"     * @param input of type String which represents the user input.","lastModifiedDate":"2023-10-06"},{"lineNumber":57,"author":{"gitId":"danielpappa"},"content":"     * @return a new object of type Command.","lastModifiedDate":"2023-10-06"},{"lineNumber":58,"author":{"gitId":"danielpappa"},"content":"     * @throws DoliExceptions in case the input is not valid.","lastModifiedDate":"2023-10-06"},{"lineNumber":59,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-04"},{"lineNumber":60,"author":{"gitId":"danielpappa"},"content":"    public static Command parseInputIntoCommand(String input) throws DoliExceptions {","lastModifiedDate":"2023-09-22"},{"lineNumber":61,"author":{"gitId":"danielpappa"},"content":"        final String command \u003d splitCommandAndDetails(input)[0];","lastModifiedDate":"2023-09-22"},{"lineNumber":62,"author":{"gitId":"danielpappa"},"content":"        final String details \u003d splitCommandAndDetails(input)[1];","lastModifiedDate":"2023-09-22"},{"lineNumber":63,"author":{"gitId":"danielpappa"},"content":"        final String[] args \u003d details.split(\"/\");","lastModifiedDate":"2023-09-22"},{"lineNumber":64,"author":{"gitId":"danielpappa"},"content":"        checkForValidInput(command, args);","lastModifiedDate":"2023-09-22"},{"lineNumber":65,"author":{"gitId":"danielpappa"},"content":"        Command newCommand \u003d new Command(command, args);","lastModifiedDate":"2023-09-22"},{"lineNumber":66,"author":{"gitId":"danielpappa"},"content":"        return newCommand;","lastModifiedDate":"2023-09-22"},{"lineNumber":67,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":68,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":69,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-05"},{"lineNumber":70,"author":{"gitId":"danielpappa"},"content":"     * Checks whether the input String can be converted i.e. parsed into a number.","lastModifiedDate":"2023-10-06"},{"lineNumber":71,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":72,"author":{"gitId":"danielpappa"},"content":"     * @param date of type String.","lastModifiedDate":"2023-10-06"},{"lineNumber":73,"author":{"gitId":"danielpappa"},"content":"     * @return true if the String can be parsed into an Integer.","lastModifiedDate":"2023-10-06"},{"lineNumber":74,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-05"},{"lineNumber":75,"author":{"gitId":"danielpappa"},"content":"    public static boolean isANumber(String date) {","lastModifiedDate":"2023-10-05"},{"lineNumber":76,"author":{"gitId":"danielpappa"},"content":"        try {","lastModifiedDate":"2023-10-05"},{"lineNumber":77,"author":{"gitId":"danielpappa"},"content":"            Integer.parseInt(date);","lastModifiedDate":"2023-10-05"},{"lineNumber":78,"author":{"gitId":"danielpappa"},"content":"            return true;","lastModifiedDate":"2023-10-05"},{"lineNumber":79,"author":{"gitId":"danielpappa"},"content":"        } catch(NumberFormatException e){","lastModifiedDate":"2023-10-05"},{"lineNumber":80,"author":{"gitId":"danielpappa"},"content":"            return false;","lastModifiedDate":"2023-10-05"},{"lineNumber":81,"author":{"gitId":"danielpappa"},"content":"        }","lastModifiedDate":"2023-10-05"},{"lineNumber":82,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-10-05"},{"lineNumber":83,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-06"},{"lineNumber":84,"author":{"gitId":"danielpappa"},"content":"     * Checks whether the input String contains a valid month.","lastModifiedDate":"2023-10-06"},{"lineNumber":85,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":86,"author":{"gitId":"danielpappa"},"content":"     * @param date of type String.","lastModifiedDate":"2023-10-06"},{"lineNumber":87,"author":{"gitId":"danielpappa"},"content":"     * @return true if the String contains a valid month.","lastModifiedDate":"2023-10-06"},{"lineNumber":88,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-06"},{"lineNumber":89,"author":{"gitId":"danielpappa"},"content":"    public static boolean containsAValidMonth(String date) {","lastModifiedDate":"2023-10-06"},{"lineNumber":90,"author":{"gitId":"danielpappa"},"content":"        int month \u003d Integer.parseInt(date.trim().split(\"-\")[1]);","lastModifiedDate":"2023-10-06"},{"lineNumber":91,"author":{"gitId":"danielpappa"},"content":"        if (month \u003c 13) {","lastModifiedDate":"2023-10-06"},{"lineNumber":92,"author":{"gitId":"danielpappa"},"content":"            return true;","lastModifiedDate":"2023-10-06"},{"lineNumber":93,"author":{"gitId":"danielpappa"},"content":"        } else {","lastModifiedDate":"2023-10-06"},{"lineNumber":94,"author":{"gitId":"danielpappa"},"content":"            return false;","lastModifiedDate":"2023-10-06"},{"lineNumber":95,"author":{"gitId":"danielpappa"},"content":"        }","lastModifiedDate":"2023-10-06"},{"lineNumber":96,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":97,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-06"},{"lineNumber":98,"author":{"gitId":"danielpappa"},"content":"     * Checks whether the input String contains a valid day.","lastModifiedDate":"2023-10-06"},{"lineNumber":99,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":100,"author":{"gitId":"danielpappa"},"content":"     * @param date of type String.","lastModifiedDate":"2023-10-06"},{"lineNumber":101,"author":{"gitId":"danielpappa"},"content":"     * @return true if the String contains a valid day.","lastModifiedDate":"2023-10-06"},{"lineNumber":102,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-06"},{"lineNumber":103,"author":{"gitId":"danielpappa"},"content":"    public static boolean containsAValidDay(String date) {","lastModifiedDate":"2023-10-06"},{"lineNumber":104,"author":{"gitId":"danielpappa"},"content":"        int day \u003d Integer.parseInt(date.trim().split(\"-\")[2]);","lastModifiedDate":"2023-10-06"},{"lineNumber":105,"author":{"gitId":"danielpappa"},"content":"        if (day \u003c 32) {","lastModifiedDate":"2023-10-06"},{"lineNumber":106,"author":{"gitId":"danielpappa"},"content":"            return true;","lastModifiedDate":"2023-10-06"},{"lineNumber":107,"author":{"gitId":"danielpappa"},"content":"        } else {","lastModifiedDate":"2023-10-06"},{"lineNumber":108,"author":{"gitId":"danielpappa"},"content":"            return false;","lastModifiedDate":"2023-10-06"},{"lineNumber":109,"author":{"gitId":"danielpappa"},"content":"        }","lastModifiedDate":"2023-10-06"},{"lineNumber":110,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":111,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":112,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-05"},{"lineNumber":113,"author":{"gitId":"danielpappa"},"content":"     * Checks whether the input date is actually a valid date, meaning of format \"yyyy-MM-dd\".","lastModifiedDate":"2023-10-06"},{"lineNumber":114,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":115,"author":{"gitId":"danielpappa"},"content":"     * @param date of type String must be of format \"yyyy-MM-dd\" for the method to return true.","lastModifiedDate":"2023-10-06"},{"lineNumber":116,"author":{"gitId":"danielpappa"},"content":"     * @return true if the date\u0027s format is valid and false otherwise.","lastModifiedDate":"2023-10-06"},{"lineNumber":117,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-05"},{"lineNumber":118,"author":{"gitId":"danielpappa"},"content":"    public static boolean checkForValidDate(String date) {","lastModifiedDate":"2023-10-05"},{"lineNumber":119,"author":{"gitId":"danielpappa"},"content":"        boolean dateIsValid;","lastModifiedDate":"2023-10-05"},{"lineNumber":120,"author":{"gitId":"danielpappa"},"content":"        if (date.trim().length() \u003d\u003d DATE_FORMAT_LENGTH","lastModifiedDate":"2023-10-05"},{"lineNumber":121,"author":{"gitId":"danielpappa"},"content":"                \u0026\u0026 date.indexOf(\u0027-\u0027) \u003d\u003d 4 \u0026\u0026 date.lastIndexOf(\u0027-\u0027) \u003d\u003d 7","lastModifiedDate":"2023-10-05"},{"lineNumber":122,"author":{"gitId":"danielpappa"},"content":"                \u0026\u0026 isANumber(date.trim().split(\"-\")[0])","lastModifiedDate":"2023-10-05"},{"lineNumber":123,"author":{"gitId":"danielpappa"},"content":"                \u0026\u0026 isANumber(date.trim().split(\"-\")[1])","lastModifiedDate":"2023-10-05"},{"lineNumber":124,"author":{"gitId":"danielpappa"},"content":"                \u0026\u0026 isANumber(date.trim().split(\"-\")[2])","lastModifiedDate":"2023-10-06"},{"lineNumber":125,"author":{"gitId":"danielpappa"},"content":"                \u0026\u0026 containsAValidDay(date) \u0026\u0026 containsAValidMonth(date)) {","lastModifiedDate":"2023-10-06"},{"lineNumber":126,"author":{"gitId":"danielpappa"},"content":"            dateIsValid \u003d true;","lastModifiedDate":"2023-10-05"},{"lineNumber":127,"author":{"gitId":"danielpappa"},"content":"        } else {","lastModifiedDate":"2023-10-05"},{"lineNumber":128,"author":{"gitId":"danielpappa"},"content":"            dateIsValid \u003d false;","lastModifiedDate":"2023-10-05"},{"lineNumber":129,"author":{"gitId":"danielpappa"},"content":"        }","lastModifiedDate":"2023-10-05"},{"lineNumber":130,"author":{"gitId":"danielpappa"},"content":"        return dateIsValid;","lastModifiedDate":"2023-10-05"},{"lineNumber":131,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-10-05"},{"lineNumber":132,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":133,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-04"},{"lineNumber":134,"author":{"gitId":"danielpappa"},"content":"     * Checks for the validity of the user input in terms of the amount of","lastModifiedDate":"2023-10-04"},{"lineNumber":135,"author":{"gitId":"danielpappa"},"content":"     * details specified in each scenario. It checks the following commands: todo,","lastModifiedDate":"2023-10-04"},{"lineNumber":136,"author":{"gitId":"danielpappa"},"content":"     * deadline, event, mark, unmark, delete, overview and find.","lastModifiedDate":"2023-10-04"},{"lineNumber":137,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":138,"author":{"gitId":"danielpappa"},"content":"     * @param command of type String specifying the command keyword contained in the user input.","lastModifiedDate":"2023-10-06"},{"lineNumber":139,"author":{"gitId":"danielpappa"},"content":"     * @param details an array of type String containing eventual details of the input exceeding the command keyword.","lastModifiedDate":"2023-10-06"},{"lineNumber":140,"author":{"gitId":"danielpappa"},"content":"     * @throws DoliExceptions in case the proper amount of details required by the command is not met.","lastModifiedDate":"2023-10-06"},{"lineNumber":141,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-04"},{"lineNumber":142,"author":{"gitId":"danielpappa"},"content":"    public static void checkForValidInput(String command, String[] details) throws DoliExceptions {","lastModifiedDate":"2023-10-04"},{"lineNumber":143,"author":{"gitId":"danielpappa"},"content":"        switch (command) {","lastModifiedDate":"2023-09-22"},{"lineNumber":144,"author":{"gitId":"danielpappa"},"content":"        case TODO_COMMAND:","lastModifiedDate":"2023-09-22"},{"lineNumber":145,"author":{"gitId":"danielpappa"},"content":"            if (details[0].trim().equals(\"\")) {","lastModifiedDate":"2023-10-05"},{"lineNumber":146,"author":{"gitId":"danielpappa"},"content":"                throw new DoliExceptions(\"Input of a todo cannot be blank!\");","lastModifiedDate":"2023-09-22"},{"lineNumber":147,"author":{"gitId":"danielpappa"},"content":"            }","lastModifiedDate":"2023-09-22"},{"lineNumber":148,"author":{"gitId":"danielpappa"},"content":"            break;","lastModifiedDate":"2023-09-22"},{"lineNumber":149,"author":{"gitId":"danielpappa"},"content":"        case DEADLINE_COMMAND:","lastModifiedDate":"2023-09-22"},{"lineNumber":150,"author":{"gitId":"danielpappa"},"content":"            if (details.length \u003c NR_DEADLINE_ARGS || !checkForValidDate(details[1])) {","lastModifiedDate":"2023-10-05"},{"lineNumber":151,"author":{"gitId":"danielpappa"},"content":"                throw new DoliExceptions(\"There is something amiss in your deadline date, please try again\");","lastModifiedDate":"2023-10-06"},{"lineNumber":152,"author":{"gitId":"danielpappa"},"content":"            }","lastModifiedDate":"2023-09-22"},{"lineNumber":153,"author":{"gitId":"danielpappa"},"content":"            break;","lastModifiedDate":"2023-09-22"},{"lineNumber":154,"author":{"gitId":"danielpappa"},"content":"        case EVENT_COMMAND:","lastModifiedDate":"2023-09-22"},{"lineNumber":155,"author":{"gitId":"danielpappa"},"content":"            if (details.length \u003c NR_EVENT_ARGS","lastModifiedDate":"2023-10-05"},{"lineNumber":156,"author":{"gitId":"danielpappa"},"content":"                    || !checkForValidDate(details[1]) || !checkForValidDate(details[2])) {","lastModifiedDate":"2023-10-05"},{"lineNumber":157,"author":{"gitId":"danielpappa"},"content":"                throw new DoliExceptions(\"Start-time, end-time or description missing for event\");","lastModifiedDate":"2023-10-04"},{"lineNumber":158,"author":{"gitId":"danielpappa"},"content":"            }","lastModifiedDate":"2023-09-22"},{"lineNumber":159,"author":{"gitId":"danielpappa"},"content":"            break;","lastModifiedDate":"2023-09-22"},{"lineNumber":160,"author":{"gitId":"danielpappa"},"content":"        case MARK_COMMAND:","lastModifiedDate":"2023-09-22"},{"lineNumber":161,"author":{"gitId":"danielpappa"},"content":"            if (details.length \u003d\u003d 0 || !isANumber(details[0])) {","lastModifiedDate":"2023-10-05"},{"lineNumber":162,"author":{"gitId":"danielpappa"},"content":"                throw new DoliExceptions(\"Please specify the index of the task to mark\");","lastModifiedDate":"2023-09-22"},{"lineNumber":163,"author":{"gitId":"danielpappa"},"content":"            }","lastModifiedDate":"2023-09-22"},{"lineNumber":164,"author":{"gitId":"danielpappa"},"content":"            break;","lastModifiedDate":"2023-09-22"},{"lineNumber":165,"author":{"gitId":"danielpappa"},"content":"        case UNMARK_COMMAND:","lastModifiedDate":"2023-09-22"},{"lineNumber":166,"author":{"gitId":"danielpappa"},"content":"            if (details.length \u003d\u003d 0 || !isANumber(details[0])) {","lastModifiedDate":"2023-10-05"},{"lineNumber":167,"author":{"gitId":"danielpappa"},"content":"                throw new DoliExceptions(\"Please specify the index of the task to unmark\");","lastModifiedDate":"2023-09-22"},{"lineNumber":168,"author":{"gitId":"danielpappa"},"content":"            }","lastModifiedDate":"2023-09-22"},{"lineNumber":169,"author":{"gitId":"danielpappa"},"content":"            break;","lastModifiedDate":"2023-09-22"},{"lineNumber":170,"author":{"gitId":"danielpappa"},"content":"        case DELETE_COMMAND:","lastModifiedDate":"2023-10-04"},{"lineNumber":171,"author":{"gitId":"danielpappa"},"content":"            if (details.length \u003d\u003d 0 || !isANumber(details[0])) {","lastModifiedDate":"2023-10-05"},{"lineNumber":172,"author":{"gitId":"danielpappa"},"content":"                throw new DoliExceptions(\"Please specify the index of the task to delete\");","lastModifiedDate":"2023-10-04"},{"lineNumber":173,"author":{"gitId":"danielpappa"},"content":"            }","lastModifiedDate":"2023-10-04"},{"lineNumber":174,"author":{"gitId":"danielpappa"},"content":"            break;","lastModifiedDate":"2023-10-04"},{"lineNumber":175,"author":{"gitId":"danielpappa"},"content":"        case OVERVIEW_BY_SPECIFIC_DATE_COMMAND:","lastModifiedDate":"2023-10-04"},{"lineNumber":176,"author":{"gitId":"danielpappa"},"content":"            if (details.length \u003d\u003d 0 || !checkForValidDate(details[0])) {","lastModifiedDate":"2023-10-05"},{"lineNumber":177,"author":{"gitId":"danielpappa"},"content":"                throw new DoliExceptions(\"Please specify a proper date to limit the overview of your agenda\");","lastModifiedDate":"2023-10-04"},{"lineNumber":178,"author":{"gitId":"danielpappa"},"content":"            }","lastModifiedDate":"2023-10-04"},{"lineNumber":179,"author":{"gitId":"danielpappa"},"content":"            break;","lastModifiedDate":"2023-10-04"},{"lineNumber":180,"author":{"gitId":"danielpappa"},"content":"        case FIND_COMMAND:","lastModifiedDate":"2023-10-04"},{"lineNumber":181,"author":{"gitId":"danielpappa"},"content":"            if (details.length \u003d\u003d 0) {","lastModifiedDate":"2023-10-04"},{"lineNumber":182,"author":{"gitId":"danielpappa"},"content":"                throw new DoliExceptions(\"Please specify a proper keyword to filter and search your agenda\");","lastModifiedDate":"2023-10-04"},{"lineNumber":183,"author":{"gitId":"danielpappa"},"content":"            }","lastModifiedDate":"2023-10-04"},{"lineNumber":184,"author":{"gitId":"danielpappa"},"content":"            break;","lastModifiedDate":"2023-10-04"},{"lineNumber":185,"author":{"gitId":"danielpappa"},"content":"        default:","lastModifiedDate":"2023-09-22"},{"lineNumber":186,"author":{"gitId":"danielpappa"},"content":"            break;","lastModifiedDate":"2023-09-22"},{"lineNumber":187,"author":{"gitId":"danielpappa"},"content":"        }","lastModifiedDate":"2023-09-22"},{"lineNumber":188,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":189,"author":{"gitId":"danielpappa"},"content":"}","lastModifiedDate":"2023-09-22"}],"authorContributionMap":{"danielpappa":189}},{"path":"app/src/main/java/doli/exceptions/DoliExceptions.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielpappa"},"content":"package doli.exceptions;","lastModifiedDate":"2023-09-21"},{"lineNumber":2,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":3,"author":{"gitId":"danielpappa"},"content":"/**","lastModifiedDate":"2023-10-04"},{"lineNumber":4,"author":{"gitId":"danielpappa"},"content":" * \u003ch3\u003eDoliExceptions class\u003c/h3\u003e","lastModifiedDate":"2023-10-04"},{"lineNumber":5,"author":{"gitId":"danielpappa"},"content":" * The DoliExceptions class handles specific exceptions for the chatbot.","lastModifiedDate":"2023-10-04"},{"lineNumber":6,"author":{"gitId":"danielpappa"},"content":" * It inherits from the Exception class.","lastModifiedDate":"2023-10-04"},{"lineNumber":7,"author":{"gitId":"danielpappa"},"content":" * So far merely implemented in its most trivial form","lastModifiedDate":"2023-10-04"},{"lineNumber":8,"author":{"gitId":"danielpappa"},"content":" * and used as practice.","lastModifiedDate":"2023-10-04"},{"lineNumber":9,"author":{"gitId":"danielpappa"},"content":" *","lastModifiedDate":"2023-10-04"},{"lineNumber":10,"author":{"gitId":"danielpappa"},"content":" * @author pappalardodaniel","lastModifiedDate":"2023-10-04"},{"lineNumber":11,"author":{"gitId":"danielpappa"},"content":" * @version 1.0","lastModifiedDate":"2023-10-04"},{"lineNumber":12,"author":{"gitId":"danielpappa"},"content":" * @since 2023-11-03","lastModifiedDate":"2023-10-04"},{"lineNumber":13,"author":{"gitId":"danielpappa"},"content":" */","lastModifiedDate":"2023-09-19"},{"lineNumber":14,"author":{"gitId":"danielpappa"},"content":"public class DoliExceptions extends Exception {","lastModifiedDate":"2023-09-11"},{"lineNumber":15,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-04"},{"lineNumber":16,"author":{"gitId":"danielpappa"},"content":"     * Constructs an object of type DoliExceptions.","lastModifiedDate":"2023-10-04"},{"lineNumber":17,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":18,"author":{"gitId":"danielpappa"},"content":"     * @param str of type String to be passed to the super class.","lastModifiedDate":"2023-10-06"},{"lineNumber":19,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-04"},{"lineNumber":20,"author":{"gitId":"danielpappa"},"content":"    public DoliExceptions(String str) {","lastModifiedDate":"2023-09-11"},{"lineNumber":21,"author":{"gitId":"danielpappa"},"content":"        super(str);","lastModifiedDate":"2023-09-11"},{"lineNumber":22,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-11"},{"lineNumber":23,"author":{"gitId":"danielpappa"},"content":"}","lastModifiedDate":"2023-09-11"}],"authorContributionMap":{"danielpappa":23}},{"path":"app/src/main/java/doli/files/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielpappa"},"content":"package doli.files;","lastModifiedDate":"2023-09-22"},{"lineNumber":2,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":3,"author":{"gitId":"danielpappa"},"content":"import doli.exceptions.DoliExceptions;","lastModifiedDate":"2023-09-22"},{"lineNumber":4,"author":{"gitId":"danielpappa"},"content":"import doli.tasks.TaskList;","lastModifiedDate":"2023-10-04"},{"lineNumber":5,"author":{"gitId":"danielpappa"},"content":"import doli.tasks.Event;","lastModifiedDate":"2023-10-04"},{"lineNumber":6,"author":{"gitId":"danielpappa"},"content":"import doli.tasks.Deadline;","lastModifiedDate":"2023-10-04"},{"lineNumber":7,"author":{"gitId":"danielpappa"},"content":"import doli.tasks.ToDo;","lastModifiedDate":"2023-10-04"},{"lineNumber":8,"author":{"gitId":"danielpappa"},"content":"import doli.tasks.Task;","lastModifiedDate":"2023-10-04"},{"lineNumber":9,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":10,"author":{"gitId":"danielpappa"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-22"},{"lineNumber":11,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":12,"author":{"gitId":"danielpappa"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-09-22"},{"lineNumber":13,"author":{"gitId":"danielpappa"},"content":"import java.io.File;","lastModifiedDate":"2023-09-22"},{"lineNumber":14,"author":{"gitId":"danielpappa"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-09-22"},{"lineNumber":15,"author":{"gitId":"danielpappa"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-22"},{"lineNumber":16,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":17,"author":{"gitId":"danielpappa"},"content":"/**","lastModifiedDate":"2023-10-04"},{"lineNumber":18,"author":{"gitId":"danielpappa"},"content":" * \u003ch3\u003eStorage class\u003c/h3\u003e","lastModifiedDate":"2023-10-04"},{"lineNumber":19,"author":{"gitId":"danielpappa"},"content":" * The Storage class handles the initialisation, loading","lastModifiedDate":"2023-10-04"},{"lineNumber":20,"author":{"gitId":"danielpappa"},"content":" * and modification/updating of the .txt file containing","lastModifiedDate":"2023-10-04"},{"lineNumber":21,"author":{"gitId":"danielpappa"},"content":" * the agenda which is stored using a relative path, and thus","lastModifiedDate":"2023-10-04"},{"lineNumber":22,"author":{"gitId":"danielpappa"},"content":" * accessible using any OS.","lastModifiedDate":"2023-10-04"},{"lineNumber":23,"author":{"gitId":"danielpappa"},"content":" *","lastModifiedDate":"2023-10-04"},{"lineNumber":24,"author":{"gitId":"danielpappa"},"content":" * @author pappalardodaniel","lastModifiedDate":"2023-10-04"},{"lineNumber":25,"author":{"gitId":"danielpappa"},"content":" * @version 1.0","lastModifiedDate":"2023-10-04"},{"lineNumber":26,"author":{"gitId":"danielpappa"},"content":" * @since 2023-11-03","lastModifiedDate":"2023-10-04"},{"lineNumber":27,"author":{"gitId":"danielpappa"},"content":" */","lastModifiedDate":"2023-10-04"},{"lineNumber":28,"author":{"gitId":"danielpappa"},"content":"public class Storage {","lastModifiedDate":"2023-09-22"},{"lineNumber":29,"author":{"gitId":"danielpappa"},"content":"    /** Path of the file the agenda is stored in */","lastModifiedDate":"2023-10-06"},{"lineNumber":30,"author":{"gitId":"danielpappa"},"content":"    protected final String FILE_PATH;","lastModifiedDate":"2023-10-03"},{"lineNumber":31,"author":{"gitId":"danielpappa"},"content":"    private static final String TODO_SYMBOL \u003d \"T\";","lastModifiedDate":"2023-10-03"},{"lineNumber":32,"author":{"gitId":"danielpappa"},"content":"    private static final String DEADLINE_SYMBOL \u003d \"D\";","lastModifiedDate":"2023-10-03"},{"lineNumber":33,"author":{"gitId":"danielpappa"},"content":"    private static final String EVENT_SYMBOL \u003d \"E\";","lastModifiedDate":"2023-10-03"},{"lineNumber":34,"author":{"gitId":"danielpappa"},"content":"    private static final String INFO_SEPARATOR \u003d \"|\";","lastModifiedDate":"2023-09-22"},{"lineNumber":35,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":36,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-04"},{"lineNumber":37,"author":{"gitId":"danielpappa"},"content":"     * Constructs an object of type Storage to manage the storage of a file","lastModifiedDate":"2023-10-04"},{"lineNumber":38,"author":{"gitId":"danielpappa"},"content":"     * and its contents.","lastModifiedDate":"2023-10-05"},{"lineNumber":39,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":40,"author":{"gitId":"danielpappa"},"content":"     * @param filePath of type String specifying the relative file path.","lastModifiedDate":"2023-10-06"},{"lineNumber":41,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-04"},{"lineNumber":42,"author":{"gitId":"danielpappa"},"content":"    public Storage(String filePath){","lastModifiedDate":"2023-09-22"},{"lineNumber":43,"author":{"gitId":"danielpappa"},"content":"        FILE_PATH \u003d filePath;","lastModifiedDate":"2023-09-22"},{"lineNumber":44,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":45,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":46,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-04"},{"lineNumber":47,"author":{"gitId":"danielpappa"},"content":"     * Loads the previously created file and returns its contents as an agenda if such a file exists.","lastModifiedDate":"2023-10-04"},{"lineNumber":48,"author":{"gitId":"danielpappa"},"content":"     * Otherwise, it creates a new file from scratch and returns an empty ArrayList.","lastModifiedDate":"2023-10-04"},{"lineNumber":49,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":50,"author":{"gitId":"danielpappa"},"content":"     * @return an ArrayList containing the agenda entries.","lastModifiedDate":"2023-10-06"},{"lineNumber":51,"author":{"gitId":"danielpappa"},"content":"     * @throws IOException in case there were problems handling the file.","lastModifiedDate":"2023-10-06"},{"lineNumber":52,"author":{"gitId":"danielpappa"},"content":"     * @throws DoliExceptions in case there are problems loading the existing file.","lastModifiedDate":"2023-10-06"},{"lineNumber":53,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-04"},{"lineNumber":54,"author":{"gitId":"danielpappa"},"content":"    public ArrayList\u003cTask\u003e initializeFile() throws IOException, DoliExceptions {","lastModifiedDate":"2023-09-22"},{"lineNumber":55,"author":{"gitId":"danielpappa"},"content":"        File file \u003d new File(FILE_PATH);","lastModifiedDate":"2023-09-22"},{"lineNumber":56,"author":{"gitId":"danielpappa"},"content":"        if (!file.exists()) {","lastModifiedDate":"2023-09-22"},{"lineNumber":57,"author":{"gitId":"danielpappa"},"content":"            try {","lastModifiedDate":"2023-09-22"},{"lineNumber":58,"author":{"gitId":"danielpappa"},"content":"                file.createNewFile();","lastModifiedDate":"2023-09-22"},{"lineNumber":59,"author":{"gitId":"danielpappa"},"content":"                return new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-22"},{"lineNumber":60,"author":{"gitId":"danielpappa"},"content":"            } catch(IOException e) {","lastModifiedDate":"2023-09-22"},{"lineNumber":61,"author":{"gitId":"danielpappa"},"content":"                throw new RuntimeException(e);","lastModifiedDate":"2023-09-22"},{"lineNumber":62,"author":{"gitId":"danielpappa"},"content":"            }","lastModifiedDate":"2023-09-22"},{"lineNumber":63,"author":{"gitId":"danielpappa"},"content":"        } else {","lastModifiedDate":"2023-09-22"},{"lineNumber":64,"author":{"gitId":"danielpappa"},"content":"            try {","lastModifiedDate":"2023-09-22"},{"lineNumber":65,"author":{"gitId":"danielpappa"},"content":"                return loadExistingFile(file);","lastModifiedDate":"2023-09-22"},{"lineNumber":66,"author":{"gitId":"danielpappa"},"content":"            } catch (DoliExceptions e) {","lastModifiedDate":"2023-09-22"},{"lineNumber":67,"author":{"gitId":"danielpappa"},"content":"                throw new RuntimeException(e);","lastModifiedDate":"2023-09-22"},{"lineNumber":68,"author":{"gitId":"danielpappa"},"content":"            }","lastModifiedDate":"2023-09-22"},{"lineNumber":69,"author":{"gitId":"danielpappa"},"content":"        }","lastModifiedDate":"2023-09-22"},{"lineNumber":70,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":71,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":72,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-04"},{"lineNumber":73,"author":{"gitId":"danielpappa"},"content":"     * Loads an existing agenda file by scanning each line contained in the .txt file","lastModifiedDate":"2023-10-04"},{"lineNumber":74,"author":{"gitId":"danielpappa"},"content":"     * and adding the specific tasks within the file to a new ArrayList.","lastModifiedDate":"2023-10-04"},{"lineNumber":75,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":76,"author":{"gitId":"danielpappa"},"content":"     * @param file of type File to analyse and extract content from.","lastModifiedDate":"2023-10-06"},{"lineNumber":77,"author":{"gitId":"danielpappa"},"content":"     * @return an ArrayList of Tasks that Doli will use to create a new object of type TaskList.","lastModifiedDate":"2023-10-06"},{"lineNumber":78,"author":{"gitId":"danielpappa"},"content":"     * @throws IOException in case the file could not be handled properly.","lastModifiedDate":"2023-10-06"},{"lineNumber":79,"author":{"gitId":"danielpappa"},"content":"     * @throws DoliExceptions in case the task in the file could not be recognized or deciphered.","lastModifiedDate":"2023-10-06"},{"lineNumber":80,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-04"},{"lineNumber":81,"author":{"gitId":"danielpappa"},"content":"    public static ArrayList\u003cTask\u003e loadExistingFile(File file)","lastModifiedDate":"2023-09-22"},{"lineNumber":82,"author":{"gitId":"danielpappa"},"content":"            throws IOException, DoliExceptions {","lastModifiedDate":"2023-09-22"},{"lineNumber":83,"author":{"gitId":"danielpappa"},"content":"        Scanner fs \u003d new Scanner(file);","lastModifiedDate":"2023-09-22"},{"lineNumber":84,"author":{"gitId":"danielpappa"},"content":"        ArrayList\u003cTask\u003e agenda \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-22"},{"lineNumber":85,"author":{"gitId":"danielpappa"},"content":"        while (fs.hasNext()) {","lastModifiedDate":"2023-09-22"},{"lineNumber":86,"author":{"gitId":"danielpappa"},"content":"            String line \u003d fs.nextLine();","lastModifiedDate":"2023-09-22"},{"lineNumber":87,"author":{"gitId":"danielpappa"},"content":"            String[] task \u003d line.split(\"\\\\|\");","lastModifiedDate":"2023-09-22"},{"lineNumber":88,"author":{"gitId":"danielpappa"},"content":"            String type \u003d task[0];","lastModifiedDate":"2023-09-22"},{"lineNumber":89,"author":{"gitId":"danielpappa"},"content":"            boolean isDone \u003d task[1].equals(\"X\");","lastModifiedDate":"2023-10-04"},{"lineNumber":90,"author":{"gitId":"danielpappa"},"content":"            String description \u003d task[2];","lastModifiedDate":"2023-09-22"},{"lineNumber":91,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":92,"author":{"gitId":"danielpappa"},"content":"            switch (type) {","lastModifiedDate":"2023-09-22"},{"lineNumber":93,"author":{"gitId":"danielpappa"},"content":"            case TODO_SYMBOL:","lastModifiedDate":"2023-10-03"},{"lineNumber":94,"author":{"gitId":"danielpappa"},"content":"                addTodo(description, isDone, agenda);","lastModifiedDate":"2023-09-22"},{"lineNumber":95,"author":{"gitId":"danielpappa"},"content":"                break;","lastModifiedDate":"2023-09-22"},{"lineNumber":96,"author":{"gitId":"danielpappa"},"content":"            case DEADLINE_SYMBOL:","lastModifiedDate":"2023-10-03"},{"lineNumber":97,"author":{"gitId":"danielpappa"},"content":"                String deadline \u003d task[3];","lastModifiedDate":"2023-09-22"},{"lineNumber":98,"author":{"gitId":"danielpappa"},"content":"                addDeadline(description, isDone, deadline, agenda);","lastModifiedDate":"2023-09-22"},{"lineNumber":99,"author":{"gitId":"danielpappa"},"content":"                break;","lastModifiedDate":"2023-09-22"},{"lineNumber":100,"author":{"gitId":"danielpappa"},"content":"            case EVENT_SYMBOL:","lastModifiedDate":"2023-10-03"},{"lineNumber":101,"author":{"gitId":"danielpappa"},"content":"                String startDate \u003d task[3];","lastModifiedDate":"2023-09-22"},{"lineNumber":102,"author":{"gitId":"danielpappa"},"content":"                String endDate \u003d task[4];","lastModifiedDate":"2023-09-22"},{"lineNumber":103,"author":{"gitId":"danielpappa"},"content":"                addEvent(description, isDone, startDate, endDate, agenda);","lastModifiedDate":"2023-09-22"},{"lineNumber":104,"author":{"gitId":"danielpappa"},"content":"                break;","lastModifiedDate":"2023-09-22"},{"lineNumber":105,"author":{"gitId":"danielpappa"},"content":"            default:","lastModifiedDate":"2023-09-22"},{"lineNumber":106,"author":{"gitId":"danielpappa"},"content":"                throw new DoliExceptions(\"Task not recognized.\");","lastModifiedDate":"2023-09-22"},{"lineNumber":107,"author":{"gitId":"danielpappa"},"content":"            }","lastModifiedDate":"2023-09-22"},{"lineNumber":108,"author":{"gitId":"danielpappa"},"content":"        }","lastModifiedDate":"2023-09-22"},{"lineNumber":109,"author":{"gitId":"danielpappa"},"content":"        return agenda;","lastModifiedDate":"2023-09-22"},{"lineNumber":110,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":111,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":112,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-04"},{"lineNumber":113,"author":{"gitId":"danielpappa"},"content":"     * Updates the file in order to account for new commands and changes performed by the user.","lastModifiedDate":"2023-10-04"},{"lineNumber":114,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":115,"author":{"gitId":"danielpappa"},"content":"     * @param agenda of type TaskList refers to the agenda containing the recent changes to transcribe onto the file.","lastModifiedDate":"2023-10-06"},{"lineNumber":116,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-04"},{"lineNumber":117,"author":{"gitId":"danielpappa"},"content":"    public void modifyFile(TaskList agenda) {","lastModifiedDate":"2023-10-05"},{"lineNumber":118,"author":{"gitId":"danielpappa"},"content":"        try {","lastModifiedDate":"2023-09-22"},{"lineNumber":119,"author":{"gitId":"danielpappa"},"content":"            FileWriter fw \u003d new FileWriter(FILE_PATH);","lastModifiedDate":"2023-09-22"},{"lineNumber":120,"author":{"gitId":"danielpappa"},"content":"            for (Task task : agenda) {","lastModifiedDate":"2023-09-22"},{"lineNumber":121,"author":{"gitId":"danielpappa"},"content":"                if (task instanceof ToDo) {","lastModifiedDate":"2023-09-22"},{"lineNumber":122,"author":{"gitId":"danielpappa"},"content":"                    writeTodo(fw, (ToDo) task);","lastModifiedDate":"2023-09-22"},{"lineNumber":123,"author":{"gitId":"danielpappa"},"content":"                } else if (task instanceof Deadline) {","lastModifiedDate":"2023-09-22"},{"lineNumber":124,"author":{"gitId":"danielpappa"},"content":"                    writeDeadline(fw, (Deadline) task);","lastModifiedDate":"2023-09-22"},{"lineNumber":125,"author":{"gitId":"danielpappa"},"content":"                } else if (task instanceof Event) {","lastModifiedDate":"2023-09-22"},{"lineNumber":126,"author":{"gitId":"danielpappa"},"content":"                    writeEvent(fw, (Event) task);","lastModifiedDate":"2023-09-22"},{"lineNumber":127,"author":{"gitId":"danielpappa"},"content":"                } else {","lastModifiedDate":"2023-09-22"},{"lineNumber":128,"author":{"gitId":"danielpappa"},"content":"                    throw new DoliExceptions(\"Task type unrecognized.\");","lastModifiedDate":"2023-09-22"},{"lineNumber":129,"author":{"gitId":"danielpappa"},"content":"                }","lastModifiedDate":"2023-09-22"},{"lineNumber":130,"author":{"gitId":"danielpappa"},"content":"            }","lastModifiedDate":"2023-09-22"},{"lineNumber":131,"author":{"gitId":"danielpappa"},"content":"            fw.close();","lastModifiedDate":"2023-09-22"},{"lineNumber":132,"author":{"gitId":"danielpappa"},"content":"        } catch (DoliExceptions | IOException e) {","lastModifiedDate":"2023-09-22"},{"lineNumber":133,"author":{"gitId":"danielpappa"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2023-09-22"},{"lineNumber":134,"author":{"gitId":"danielpappa"},"content":"        }","lastModifiedDate":"2023-09-22"},{"lineNumber":135,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":136,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":137,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-04"},{"lineNumber":138,"author":{"gitId":"danielpappa"},"content":"     * Adds a task of type todo to the agenda.","lastModifiedDate":"2023-10-04"},{"lineNumber":139,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":140,"author":{"gitId":"danielpappa"},"content":"     * @param description of type String specifying the description of the todo task.","lastModifiedDate":"2023-10-06"},{"lineNumber":141,"author":{"gitId":"danielpappa"},"content":"     * @param isDone of type boolean specifying whether the task is done or not.","lastModifiedDate":"2023-10-06"},{"lineNumber":142,"author":{"gitId":"danielpappa"},"content":"     * @param agenda an ArrayList of type Task where the todo task will be added to.","lastModifiedDate":"2023-10-06"},{"lineNumber":143,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-04"},{"lineNumber":144,"author":{"gitId":"danielpappa"},"content":"    private static void addTodo(String description, boolean isDone, ArrayList\u003cTask\u003e agenda) {","lastModifiedDate":"2023-10-03"},{"lineNumber":145,"author":{"gitId":"danielpappa"},"content":"        ToDo todo \u003d new ToDo(description);","lastModifiedDate":"2023-09-22"},{"lineNumber":146,"author":{"gitId":"danielpappa"},"content":"        todo.setDone(isDone);","lastModifiedDate":"2023-09-22"},{"lineNumber":147,"author":{"gitId":"danielpappa"},"content":"        agenda.add(todo);","lastModifiedDate":"2023-09-22"},{"lineNumber":148,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":149,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":150,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-04"},{"lineNumber":151,"author":{"gitId":"danielpappa"},"content":"     * Adds a task of type deadline to the agenda.","lastModifiedDate":"2023-10-04"},{"lineNumber":152,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":153,"author":{"gitId":"danielpappa"},"content":"     * @param description of type String specifying the description of the deadline task.","lastModifiedDate":"2023-10-06"},{"lineNumber":154,"author":{"gitId":"danielpappa"},"content":"     * @param isDone of type boolean specifying whether the task is done or not.","lastModifiedDate":"2023-10-06"},{"lineNumber":155,"author":{"gitId":"danielpappa"},"content":"     * @param date of type String referring to the deadline of the task.","lastModifiedDate":"2023-10-06"},{"lineNumber":156,"author":{"gitId":"danielpappa"},"content":"     * @param agenda an ArrayList of type Task where the deadline task will be added to.","lastModifiedDate":"2023-10-06"},{"lineNumber":157,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-04"},{"lineNumber":158,"author":{"gitId":"danielpappa"},"content":"    private static void addDeadline(String description, boolean isDone, String date, ArrayList\u003cTask\u003e agenda) {","lastModifiedDate":"2023-10-03"},{"lineNumber":159,"author":{"gitId":"danielpappa"},"content":"        Deadline deadline \u003d new Deadline(description, date);","lastModifiedDate":"2023-09-22"},{"lineNumber":160,"author":{"gitId":"danielpappa"},"content":"        deadline.setDone(isDone);","lastModifiedDate":"2023-09-22"},{"lineNumber":161,"author":{"gitId":"danielpappa"},"content":"        agenda.add(deadline);","lastModifiedDate":"2023-09-22"},{"lineNumber":162,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":163,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":164,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-04"},{"lineNumber":165,"author":{"gitId":"danielpappa"},"content":"     * Adds a task of type event to the agenda.","lastModifiedDate":"2023-10-04"},{"lineNumber":166,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":167,"author":{"gitId":"danielpappa"},"content":"     * @param description of type String specifying the description of the event task.","lastModifiedDate":"2023-10-06"},{"lineNumber":168,"author":{"gitId":"danielpappa"},"content":"     * @param isDone of type boolean specifying whether the task is done or not.","lastModifiedDate":"2023-10-06"},{"lineNumber":169,"author":{"gitId":"danielpappa"},"content":"     * @param startDate of type String referring to the start date of the event.","lastModifiedDate":"2023-10-06"},{"lineNumber":170,"author":{"gitId":"danielpappa"},"content":"     * @param endDate of type String referring to the end date of the event.","lastModifiedDate":"2023-10-06"},{"lineNumber":171,"author":{"gitId":"danielpappa"},"content":"     * @param agenda an ArrayList of type Task where the event task will be added to.","lastModifiedDate":"2023-10-06"},{"lineNumber":172,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-04"},{"lineNumber":173,"author":{"gitId":"danielpappa"},"content":"    private static void addEvent(String description, boolean isDone,","lastModifiedDate":"2023-10-03"},{"lineNumber":174,"author":{"gitId":"danielpappa"},"content":"                                 String startDate, String endDate, ArrayList\u003cTask\u003e agenda) {","lastModifiedDate":"2023-09-22"},{"lineNumber":175,"author":{"gitId":"danielpappa"},"content":"        Event event \u003d new Event(description, startDate, endDate);","lastModifiedDate":"2023-09-22"},{"lineNumber":176,"author":{"gitId":"danielpappa"},"content":"        event.setDone(isDone);","lastModifiedDate":"2023-09-22"},{"lineNumber":177,"author":{"gitId":"danielpappa"},"content":"        agenda.add(event);","lastModifiedDate":"2023-09-22"},{"lineNumber":178,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":179,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":180,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-04"},{"lineNumber":181,"author":{"gitId":"danielpappa"},"content":"     * Writes out a todo task onto a file using FileWriter so that the new entries of the agenda can be","lastModifiedDate":"2023-10-04"},{"lineNumber":182,"author":{"gitId":"danielpappa"},"content":"     * transcribed and copied onto the .txt file where the agenda is stored.","lastModifiedDate":"2023-10-04"},{"lineNumber":183,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":184,"author":{"gitId":"danielpappa"},"content":"     * @param fw of type FileWriter.","lastModifiedDate":"2023-10-06"},{"lineNumber":185,"author":{"gitId":"danielpappa"},"content":"     * @param todo of Type ToDo referring to the task to be transcribed.","lastModifiedDate":"2023-10-06"},{"lineNumber":186,"author":{"gitId":"danielpappa"},"content":"     * @throws IOException in case the file cannot be correctly transcribed.","lastModifiedDate":"2023-10-06"},{"lineNumber":187,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-04"},{"lineNumber":188,"author":{"gitId":"danielpappa"},"content":"    public static void writeTodo(FileWriter fw, ToDo todo) throws IOException {","lastModifiedDate":"2023-09-22"},{"lineNumber":189,"author":{"gitId":"danielpappa"},"content":"        fw.write(TODO_SYMBOL + INFO_SEPARATOR + todo.getStatusIcon()","lastModifiedDate":"2023-10-03"},{"lineNumber":190,"author":{"gitId":"danielpappa"},"content":"                + INFO_SEPARATOR + todo.getDescription() + System.lineSeparator());","lastModifiedDate":"2023-09-22"},{"lineNumber":191,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":192,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":193,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-04"},{"lineNumber":194,"author":{"gitId":"danielpappa"},"content":"     * Writes out a deadline task onto a file using FileWriter so that the new entries of the agenda can be","lastModifiedDate":"2023-10-04"},{"lineNumber":195,"author":{"gitId":"danielpappa"},"content":"     * transcribed and copied onto the .txt file where the agenda is stored.","lastModifiedDate":"2023-10-04"},{"lineNumber":196,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":197,"author":{"gitId":"danielpappa"},"content":"     * @param fw of type FileWriter.","lastModifiedDate":"2023-10-06"},{"lineNumber":198,"author":{"gitId":"danielpappa"},"content":"     * @param deadline of Type Deadline referring to the task to be transcribed.","lastModifiedDate":"2023-10-06"},{"lineNumber":199,"author":{"gitId":"danielpappa"},"content":"     * @throws IOException in case the file cannot be correctly transcribed.","lastModifiedDate":"2023-10-06"},{"lineNumber":200,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-04"},{"lineNumber":201,"author":{"gitId":"danielpappa"},"content":"    public static void writeDeadline(FileWriter fw, Deadline deadline) throws IOException {","lastModifiedDate":"2023-09-22"},{"lineNumber":202,"author":{"gitId":"danielpappa"},"content":"        fw.write(DEADLINE_SYMBOL + INFO_SEPARATOR + deadline.getStatusIcon()","lastModifiedDate":"2023-10-03"},{"lineNumber":203,"author":{"gitId":"danielpappa"},"content":"                + INFO_SEPARATOR + deadline.getDescription()","lastModifiedDate":"2023-10-05"},{"lineNumber":204,"author":{"gitId":"danielpappa"},"content":"                + INFO_SEPARATOR + deadline.getDeadline() + System.lineSeparator());","lastModifiedDate":"2023-10-05"},{"lineNumber":205,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":206,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":207,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-04"},{"lineNumber":208,"author":{"gitId":"danielpappa"},"content":"     * Writes out an event task onto a file using FileWriter so that the new entries of the agenda can be","lastModifiedDate":"2023-10-04"},{"lineNumber":209,"author":{"gitId":"danielpappa"},"content":"     * transcribed and copied onto the .txt file where the agenda is stored.","lastModifiedDate":"2023-10-04"},{"lineNumber":210,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":211,"author":{"gitId":"danielpappa"},"content":"     * @param fw of type FileWriter.","lastModifiedDate":"2023-10-06"},{"lineNumber":212,"author":{"gitId":"danielpappa"},"content":"     * @param event of Type Event referring to the task to be transcribed.","lastModifiedDate":"2023-10-06"},{"lineNumber":213,"author":{"gitId":"danielpappa"},"content":"     * @throws IOException in case the file cannot be correctly transcribed.","lastModifiedDate":"2023-10-06"},{"lineNumber":214,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-04"},{"lineNumber":215,"author":{"gitId":"danielpappa"},"content":"    public static void writeEvent(FileWriter fw, Event event) throws IOException {","lastModifiedDate":"2023-09-22"},{"lineNumber":216,"author":{"gitId":"danielpappa"},"content":"        fw.write(EVENT_SYMBOL + INFO_SEPARATOR + event.getStatusIcon()","lastModifiedDate":"2023-10-03"},{"lineNumber":217,"author":{"gitId":"danielpappa"},"content":"                + INFO_SEPARATOR + event.getDescription()","lastModifiedDate":"2023-10-05"},{"lineNumber":218,"author":{"gitId":"danielpappa"},"content":"                + INFO_SEPARATOR + event.getStartTime()","lastModifiedDate":"2023-10-05"},{"lineNumber":219,"author":{"gitId":"danielpappa"},"content":"                + INFO_SEPARATOR + event.getEndTime() + System.lineSeparator());","lastModifiedDate":"2023-10-05"},{"lineNumber":220,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":221,"author":{"gitId":"danielpappa"},"content":"}","lastModifiedDate":"2023-09-22"}],"authorContributionMap":{"danielpappa":221}},{"path":"app/src/main/java/doli/gui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielpappa"},"content":"package doli.gui;","lastModifiedDate":"2023-10-06"},{"lineNumber":2,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":3,"author":{"gitId":"danielpappa"},"content":"import doli.exceptions.DoliExceptions;","lastModifiedDate":"2023-10-06"},{"lineNumber":4,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":5,"author":{"gitId":"danielpappa"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-10-06"},{"lineNumber":6,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":7,"author":{"gitId":"danielpappa"},"content":"/**","lastModifiedDate":"2023-10-06"},{"lineNumber":8,"author":{"gitId":"danielpappa"},"content":" * \u003ch3\u003eUi class\u003c/h3\u003e","lastModifiedDate":"2023-10-06"},{"lineNumber":9,"author":{"gitId":"danielpappa"},"content":" * The Ui class aims at organising the user interface and interaction.","lastModifiedDate":"2023-10-06"},{"lineNumber":10,"author":{"gitId":"danielpappa"},"content":" * It primarily deals with welcoming the user, greeting at exit, displaying","lastModifiedDate":"2023-10-06"},{"lineNumber":11,"author":{"gitId":"danielpappa"},"content":" * various error messages and getting the user input.","lastModifiedDate":"2023-10-06"},{"lineNumber":12,"author":{"gitId":"danielpappa"},"content":" *","lastModifiedDate":"2023-10-06"},{"lineNumber":13,"author":{"gitId":"danielpappa"},"content":" * @author pappalardodaniel","lastModifiedDate":"2023-10-06"},{"lineNumber":14,"author":{"gitId":"danielpappa"},"content":" * @version 1.0","lastModifiedDate":"2023-10-06"},{"lineNumber":15,"author":{"gitId":"danielpappa"},"content":" * @since 2023-11-03","lastModifiedDate":"2023-10-06"},{"lineNumber":16,"author":{"gitId":"danielpappa"},"content":" */","lastModifiedDate":"2023-10-06"},{"lineNumber":17,"author":{"gitId":"danielpappa"},"content":"public class Ui {","lastModifiedDate":"2023-10-06"},{"lineNumber":18,"author":{"gitId":"danielpappa"},"content":"    private static final Scanner IN \u003d new Scanner(System.in);","lastModifiedDate":"2023-10-06"},{"lineNumber":19,"author":{"gitId":"danielpappa"},"content":"    private static final String LOGO \u003d \" ____       _\\n\"","lastModifiedDate":"2023-10-06"},{"lineNumber":20,"author":{"gitId":"danielpappa"},"content":"            + \"|  _  \\\\    | | [_]\\n\"","lastModifiedDate":"2023-10-06"},{"lineNumber":21,"author":{"gitId":"danielpappa"},"content":"            + \"| | | |____| |  _\\n\"","lastModifiedDate":"2023-10-06"},{"lineNumber":22,"author":{"gitId":"danielpappa"},"content":"            + \"| |_| | [] | | | |\\n\"","lastModifiedDate":"2023-10-06"},{"lineNumber":23,"author":{"gitId":"danielpappa"},"content":"            + \"|____/|____|__||_|\\n\";","lastModifiedDate":"2023-10-06"},{"lineNumber":24,"author":{"gitId":"danielpappa"},"content":"    private static final String WELCOME_MESSAGE \u003d String.format(\"Hello, my name is\\n%s\\n\"","lastModifiedDate":"2023-10-06"},{"lineNumber":25,"author":{"gitId":"danielpappa"},"content":"            + \"I can help you create an agenda to manage your tasks.\\nWhat is your name?\", LOGO);","lastModifiedDate":"2023-10-06"},{"lineNumber":26,"author":{"gitId":"danielpappa"},"content":"    private static final String BYE_MESSAGE \u003d \"Thank you for your patience, hope to see you soon! Bye!\";","lastModifiedDate":"2023-10-06"},{"lineNumber":27,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":28,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-06"},{"lineNumber":29,"author":{"gitId":"danielpappa"},"content":"     * Prints out the given String (shorter than the standard java notation).","lastModifiedDate":"2023-10-06"},{"lineNumber":30,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":31,"author":{"gitId":"danielpappa"},"content":"     * @param str of type String to be printed out.","lastModifiedDate":"2023-10-06"},{"lineNumber":32,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-06"},{"lineNumber":33,"author":{"gitId":"danielpappa"},"content":"    private static void print(String str) {","lastModifiedDate":"2023-10-06"},{"lineNumber":34,"author":{"gitId":"danielpappa"},"content":"        System.out.println(str);","lastModifiedDate":"2023-10-06"},{"lineNumber":35,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":36,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":37,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-06"},{"lineNumber":38,"author":{"gitId":"danielpappa"},"content":"     * Constructs an empty object of type Ui.","lastModifiedDate":"2023-10-06"},{"lineNumber":39,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-06"},{"lineNumber":40,"author":{"gitId":"danielpappa"},"content":"    public Ui() {","lastModifiedDate":"2023-10-06"},{"lineNumber":41,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":42,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":43,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-06"},{"lineNumber":44,"author":{"gitId":"danielpappa"},"content":"     * Displays a message welcoming the user, the official","lastModifiedDate":"2023-10-06"},{"lineNumber":45,"author":{"gitId":"danielpappa"},"content":"     * Doli logo/script and asking for the user\u0027s name.","lastModifiedDate":"2023-10-06"},{"lineNumber":46,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-06"},{"lineNumber":47,"author":{"gitId":"danielpappa"},"content":"    public void welcomeUser() {","lastModifiedDate":"2023-10-06"},{"lineNumber":48,"author":{"gitId":"danielpappa"},"content":"        print(WELCOME_MESSAGE);","lastModifiedDate":"2023-10-06"},{"lineNumber":49,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":50,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":51,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-06"},{"lineNumber":52,"author":{"gitId":"danielpappa"},"content":"     * Records the user\u0027s name in order for Doli to be able to address him directly from now on.","lastModifiedDate":"2023-10-06"},{"lineNumber":53,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":54,"author":{"gitId":"danielpappa"},"content":"     * @return the input name of the user as type String.","lastModifiedDate":"2023-10-06"},{"lineNumber":55,"author":{"gitId":"danielpappa"},"content":"     * @throws DoliExceptions in case the user did not provide a name.","lastModifiedDate":"2023-10-06"},{"lineNumber":56,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-06"},{"lineNumber":57,"author":{"gitId":"danielpappa"},"content":"    public String getName() throws DoliExceptions {","lastModifiedDate":"2023-10-06"},{"lineNumber":58,"author":{"gitId":"danielpappa"},"content":"        String name \u003d IN.nextLine();","lastModifiedDate":"2023-10-06"},{"lineNumber":59,"author":{"gitId":"danielpappa"},"content":"        if (!name.trim().isEmpty()) {","lastModifiedDate":"2023-10-06"},{"lineNumber":60,"author":{"gitId":"danielpappa"},"content":"            return name;","lastModifiedDate":"2023-10-06"},{"lineNumber":61,"author":{"gitId":"danielpappa"},"content":"        } else {","lastModifiedDate":"2023-10-06"},{"lineNumber":62,"author":{"gitId":"danielpappa"},"content":"            throw new DoliExceptions(\"Please provide a valid name\");","lastModifiedDate":"2023-10-06"},{"lineNumber":63,"author":{"gitId":"danielpappa"},"content":"        }","lastModifiedDate":"2023-10-06"},{"lineNumber":64,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":65,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":66,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-06"},{"lineNumber":67,"author":{"gitId":"danielpappa"},"content":"     * Greets the user at the end of the program.","lastModifiedDate":"2023-10-06"},{"lineNumber":68,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-06"},{"lineNumber":69,"author":{"gitId":"danielpappa"},"content":"    public void greetUser() {","lastModifiedDate":"2023-10-06"},{"lineNumber":70,"author":{"gitId":"danielpappa"},"content":"        print(BYE_MESSAGE);","lastModifiedDate":"2023-10-06"},{"lineNumber":71,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":72,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":73,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-06"},{"lineNumber":74,"author":{"gitId":"danielpappa"},"content":"     * Prints the username as input by the user.","lastModifiedDate":"2023-10-06"},{"lineNumber":75,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":76,"author":{"gitId":"danielpappa"},"content":"     * @param name of type String.","lastModifiedDate":"2023-10-06"},{"lineNumber":77,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-06"},{"lineNumber":78,"author":{"gitId":"danielpappa"},"content":"    public void printUser(String name) {","lastModifiedDate":"2023-10-06"},{"lineNumber":79,"author":{"gitId":"danielpappa"},"content":"        print(name + \":\");","lastModifiedDate":"2023-10-06"},{"lineNumber":80,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":81,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":82,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-06"},{"lineNumber":83,"author":{"gitId":"danielpappa"},"content":"     * Invites the user to start asking questions and typing commands for Doli.","lastModifiedDate":"2023-10-06"},{"lineNumber":84,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-06"},{"lineNumber":85,"author":{"gitId":"danielpappa"},"content":"    public void askForInstruction() {","lastModifiedDate":"2023-10-06"},{"lineNumber":86,"author":{"gitId":"danielpappa"},"content":"        print(\"How can I help you?\");","lastModifiedDate":"2023-10-06"},{"lineNumber":87,"author":{"gitId":"danielpappa"},"content":"        printHLine();","lastModifiedDate":"2023-10-06"},{"lineNumber":88,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":89,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":90,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-06"},{"lineNumber":91,"author":{"gitId":"danielpappa"},"content":"     * Prints a horizontal divider to create structure in the program","lastModifiedDate":"2023-10-06"},{"lineNumber":92,"author":{"gitId":"danielpappa"},"content":"     * and in between various commands and responses.","lastModifiedDate":"2023-10-06"},{"lineNumber":93,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-06"},{"lineNumber":94,"author":{"gitId":"danielpappa"},"content":"    public void printHLine() {","lastModifiedDate":"2023-10-06"},{"lineNumber":95,"author":{"gitId":"danielpappa"},"content":"        print(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2023-10-06"},{"lineNumber":96,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":97,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":98,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-06"},{"lineNumber":99,"author":{"gitId":"danielpappa"},"content":"     * Prints out a personalisable error message.","lastModifiedDate":"2023-10-06"},{"lineNumber":100,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":101,"author":{"gitId":"danielpappa"},"content":"     * @param error of type String specifying the personalised error message.","lastModifiedDate":"2023-10-06"},{"lineNumber":102,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-06"},{"lineNumber":103,"author":{"gitId":"danielpappa"},"content":"    public void showError(String error) {","lastModifiedDate":"2023-10-06"},{"lineNumber":104,"author":{"gitId":"danielpappa"},"content":"        print(error);","lastModifiedDate":"2023-10-06"},{"lineNumber":105,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":106,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":107,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-06"},{"lineNumber":108,"author":{"gitId":"danielpappa"},"content":"     * Prints out the loading error message.","lastModifiedDate":"2023-10-06"},{"lineNumber":109,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-06"},{"lineNumber":110,"author":{"gitId":"danielpappa"},"content":"    public void showLoadingError() {","lastModifiedDate":"2023-10-06"},{"lineNumber":111,"author":{"gitId":"danielpappa"},"content":"        print(\"Loading Error\");","lastModifiedDate":"2023-10-06"},{"lineNumber":112,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":113,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":114,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-06"},{"lineNumber":115,"author":{"gitId":"danielpappa"},"content":"     * Obtains the input from the user by scanning the next line typed in.","lastModifiedDate":"2023-10-06"},{"lineNumber":116,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":117,"author":{"gitId":"danielpappa"},"content":"     * @return a String containing the user\u0027s input word for word.","lastModifiedDate":"2023-10-06"},{"lineNumber":118,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-06"},{"lineNumber":119,"author":{"gitId":"danielpappa"},"content":"    public String getInput() {","lastModifiedDate":"2023-10-06"},{"lineNumber":120,"author":{"gitId":"danielpappa"},"content":"        String input \u003d IN.nextLine();","lastModifiedDate":"2023-10-06"},{"lineNumber":121,"author":{"gitId":"danielpappa"},"content":"        return input;","lastModifiedDate":"2023-10-06"},{"lineNumber":122,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":123,"author":{"gitId":"danielpappa"},"content":"}","lastModifiedDate":"2023-10-06"}],"authorContributionMap":{"danielpappa":123}},{"path":"app/src/main/java/doli/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielpappa"},"content":"package doli.tasks;","lastModifiedDate":"2023-09-21"},{"lineNumber":2,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":3,"author":{"gitId":"danielpappa"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2023-10-03"},{"lineNumber":4,"author":{"gitId":"danielpappa"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-10-03"},{"lineNumber":5,"author":{"gitId":"danielpappa"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-10-03"},{"lineNumber":6,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":7,"author":{"gitId":"danielpappa"},"content":"/**","lastModifiedDate":"2023-10-04"},{"lineNumber":8,"author":{"gitId":"danielpappa"},"content":" * \u003ch3\u003eDeadline class\u003c/h3\u003e","lastModifiedDate":"2023-10-04"},{"lineNumber":9,"author":{"gitId":"danielpappa"},"content":" * The Deadline class extends the Task class and is specifically","lastModifiedDate":"2023-10-04"},{"lineNumber":10,"author":{"gitId":"danielpappa"},"content":" * made to handle tasks of type deadline, meaning that they have a due date.","lastModifiedDate":"2023-10-04"},{"lineNumber":11,"author":{"gitId":"danielpappa"},"content":" *","lastModifiedDate":"2023-10-04"},{"lineNumber":12,"author":{"gitId":"danielpappa"},"content":" * @author pappalardodaniel","lastModifiedDate":"2023-10-04"},{"lineNumber":13,"author":{"gitId":"danielpappa"},"content":" * @version 1.0","lastModifiedDate":"2023-10-04"},{"lineNumber":14,"author":{"gitId":"danielpappa"},"content":" * @since 2023-11-03","lastModifiedDate":"2023-10-04"},{"lineNumber":15,"author":{"gitId":"danielpappa"},"content":" */","lastModifiedDate":"2023-10-04"},{"lineNumber":16,"author":{"gitId":"danielpappa"},"content":"public class Deadline extends Task{","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"danielpappa"},"content":"    /** Date indicating the deadline pertaining to the task */","lastModifiedDate":"2023-10-06"},{"lineNumber":18,"author":{"gitId":"danielpappa"},"content":"    protected LocalDate deadline;","lastModifiedDate":"2023-10-03"},{"lineNumber":19,"author":{"gitId":"danielpappa"},"content":"    /** Format for the deadline date to be returned */","lastModifiedDate":"2023-10-06"},{"lineNumber":20,"author":{"gitId":"danielpappa"},"content":"    protected final DateTimeFormatter DATE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy\");","lastModifiedDate":"2023-10-03"},{"lineNumber":21,"author":{"gitId":"danielpappa"},"content":"    /** Error message in case the parsing of the date was unsuccessful */","lastModifiedDate":"2023-10-06"},{"lineNumber":22,"author":{"gitId":"danielpappa"},"content":"    protected final String DATE_PARSING_FAILED \u003d \"Could not parse the date.\";","lastModifiedDate":"2023-10-05"},{"lineNumber":23,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":24,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-04"},{"lineNumber":25,"author":{"gitId":"danielpappa"},"content":"     * Constructs an object of type Deadline with a description of the task","lastModifiedDate":"2023-10-04"},{"lineNumber":26,"author":{"gitId":"danielpappa"},"content":"     * and a deadline by which the task is due.","lastModifiedDate":"2023-10-04"},{"lineNumber":27,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":28,"author":{"gitId":"danielpappa"},"content":"     * @param description of type String referring to details about the deadline.","lastModifiedDate":"2023-10-06"},{"lineNumber":29,"author":{"gitId":"danielpappa"},"content":"     * @param deadlineInput of type String (\"yyyy-MM-dd\") to be parsed into type LocalDate for further use.","lastModifiedDate":"2023-10-06"},{"lineNumber":30,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-04"},{"lineNumber":31,"author":{"gitId":"danielpappa"},"content":"    public Deadline(String description, String deadlineInput) {","lastModifiedDate":"2023-10-03"},{"lineNumber":32,"author":{"gitId":"danielpappa"},"content":"        super(description);","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"danielpappa"},"content":"        try {","lastModifiedDate":"2023-10-03"},{"lineNumber":34,"author":{"gitId":"danielpappa"},"content":"            this.deadline \u003d LocalDate.parse(deadlineInput);","lastModifiedDate":"2023-10-03"},{"lineNumber":35,"author":{"gitId":"danielpappa"},"content":"        } catch(DateTimeException e) {","lastModifiedDate":"2023-10-03"},{"lineNumber":36,"author":{"gitId":"danielpappa"},"content":"            System.out.println(DATE_PARSING_FAILED);","lastModifiedDate":"2023-10-05"},{"lineNumber":37,"author":{"gitId":"danielpappa"},"content":"        }","lastModifiedDate":"2023-10-03"},{"lineNumber":38,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":40,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-04"},{"lineNumber":41,"author":{"gitId":"danielpappa"},"content":"     * Sets a new deadline date for the task.","lastModifiedDate":"2023-10-04"},{"lineNumber":42,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":43,"author":{"gitId":"danielpappa"},"content":"     * @param deadlineInput of type String and format \"yyyy-MM-dd\".","lastModifiedDate":"2023-10-06"},{"lineNumber":44,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-04"},{"lineNumber":45,"author":{"gitId":"danielpappa"},"content":"    public void setDeadline(String deadlineInput) {","lastModifiedDate":"2023-10-03"},{"lineNumber":46,"author":{"gitId":"danielpappa"},"content":"        this.deadline \u003d LocalDate.parse(deadlineInput, DATE_FORMATTER);","lastModifiedDate":"2023-10-03"},{"lineNumber":47,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":49,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-04"},{"lineNumber":50,"author":{"gitId":"danielpappa"},"content":"     * Gets the deadline date of the task.","lastModifiedDate":"2023-10-06"},{"lineNumber":51,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":52,"author":{"gitId":"danielpappa"},"content":"     * @return deadline date as type LocalDate in format \"yyyy-MM-dd\".","lastModifiedDate":"2023-10-06"},{"lineNumber":53,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-04"},{"lineNumber":54,"author":{"gitId":"danielpappa"},"content":"    public LocalDate getDeadline() {","lastModifiedDate":"2023-10-03"},{"lineNumber":55,"author":{"gitId":"danielpappa"},"content":"        return deadline;","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":58,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-04"},{"lineNumber":59,"author":{"gitId":"danielpappa"},"content":"     * Changes the boolean variable isDone of the task.","lastModifiedDate":"2023-10-06"},{"lineNumber":60,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":61,"author":{"gitId":"danielpappa"},"content":"     * @param isDone of type boolean.","lastModifiedDate":"2023-10-06"},{"lineNumber":62,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-04"},{"lineNumber":63,"author":{"gitId":"danielpappa"},"content":"    public void setDone(boolean isDone) {","lastModifiedDate":"2023-10-06"},{"lineNumber":64,"author":{"gitId":"danielpappa"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-10-06"},{"lineNumber":65,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":66,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":67,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-04"},{"lineNumber":68,"author":{"gitId":"danielpappa"},"content":"     * Returns whether a deadline task was completed or not.","lastModifiedDate":"2023-10-06"},{"lineNumber":69,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":70,"author":{"gitId":"danielpappa"},"content":"     * @return boolean variable explaining whether the task was completed or not.","lastModifiedDate":"2023-10-06"},{"lineNumber":71,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-04"},{"lineNumber":72,"author":{"gitId":"danielpappa"},"content":"    public boolean isDone() {","lastModifiedDate":"2023-09-18"},{"lineNumber":73,"author":{"gitId":"danielpappa"},"content":"        return isDone;","lastModifiedDate":"2023-09-18"},{"lineNumber":74,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":75,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":76,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-04"},{"lineNumber":77,"author":{"gitId":"danielpappa"},"content":"     * Overrides the superclass\u0027 method .toString() allowing for","lastModifiedDate":"2023-10-04"},{"lineNumber":78,"author":{"gitId":"danielpappa"},"content":"     * a tailored use incorporating details of the task such as its type and whether it is done or not.","lastModifiedDate":"2023-10-04"},{"lineNumber":79,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":80,"author":{"gitId":"danielpappa"},"content":"     * @return a String summarising the deadline\u0027s details.","lastModifiedDate":"2023-10-06"},{"lineNumber":81,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-04"},{"lineNumber":82,"author":{"gitId":"danielpappa"},"content":"    @Override","lastModifiedDate":"2023-09-01"},{"lineNumber":83,"author":{"gitId":"danielpappa"},"content":"    public String toString() {","lastModifiedDate":"2023-09-01"},{"lineNumber":84,"author":{"gitId":"danielpappa"},"content":"        String summary \u003d String.format(\"[D] %s (%s)\", super.toString(),","lastModifiedDate":"2023-10-05"},{"lineNumber":85,"author":{"gitId":"danielpappa"},"content":"                \"by: \" + DATE_FORMATTER.format(deadline));","lastModifiedDate":"2023-10-03"},{"lineNumber":86,"author":{"gitId":"danielpappa"},"content":"        return summary;","lastModifiedDate":"2023-09-01"},{"lineNumber":87,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":88,"author":{"gitId":"danielpappa"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"danielpappa":88}},{"path":"app/src/main/java/doli/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielpappa"},"content":"package doli.tasks;","lastModifiedDate":"2023-09-21"},{"lineNumber":2,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":3,"author":{"gitId":"danielpappa"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2023-10-03"},{"lineNumber":4,"author":{"gitId":"danielpappa"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-10-03"},{"lineNumber":5,"author":{"gitId":"danielpappa"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-10-03"},{"lineNumber":6,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":7,"author":{"gitId":"danielpappa"},"content":"/**","lastModifiedDate":"2023-10-04"},{"lineNumber":8,"author":{"gitId":"danielpappa"},"content":" * \u003ch3\u003eEvent class\u003c/h3\u003e","lastModifiedDate":"2023-10-04"},{"lineNumber":9,"author":{"gitId":"danielpappa"},"content":" * The Event class extends the Task class and is specifically","lastModifiedDate":"2023-10-04"},{"lineNumber":10,"author":{"gitId":"danielpappa"},"content":" * made to handle tasks of type event, meaning that they have","lastModifiedDate":"2023-10-04"},{"lineNumber":11,"author":{"gitId":"danielpappa"},"content":" * both a starting and ending date in addition to a detailed description.","lastModifiedDate":"2023-10-04"},{"lineNumber":12,"author":{"gitId":"danielpappa"},"content":" *","lastModifiedDate":"2023-10-04"},{"lineNumber":13,"author":{"gitId":"danielpappa"},"content":" * @author pappalardodaniel","lastModifiedDate":"2023-10-04"},{"lineNumber":14,"author":{"gitId":"danielpappa"},"content":" * @version 1.0","lastModifiedDate":"2023-10-04"},{"lineNumber":15,"author":{"gitId":"danielpappa"},"content":" * @since 2023-11-03","lastModifiedDate":"2023-10-04"},{"lineNumber":16,"author":{"gitId":"danielpappa"},"content":" */","lastModifiedDate":"2023-10-04"},{"lineNumber":17,"author":{"gitId":"danielpappa"},"content":"public class Event extends Task {","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"danielpappa"},"content":"    /** Date indicating the start date of the event */","lastModifiedDate":"2023-10-06"},{"lineNumber":19,"author":{"gitId":"danielpappa"},"content":"    protected LocalDate startTime;","lastModifiedDate":"2023-10-03"},{"lineNumber":20,"author":{"gitId":"danielpappa"},"content":"    /** Date indicating the end time of the event */","lastModifiedDate":"2023-10-06"},{"lineNumber":21,"author":{"gitId":"danielpappa"},"content":"    protected LocalDate endTime;","lastModifiedDate":"2023-10-03"},{"lineNumber":22,"author":{"gitId":"danielpappa"},"content":"    /** Error message in case the parsing of the date was unsuccessful */","lastModifiedDate":"2023-10-06"},{"lineNumber":23,"author":{"gitId":"danielpappa"},"content":"    protected final DateTimeFormatter DATE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy\");","lastModifiedDate":"2023-10-03"},{"lineNumber":24,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":25,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-04"},{"lineNumber":26,"author":{"gitId":"danielpappa"},"content":"     * Constructs an object of type Event and calls its superclass\u0027constructor.","lastModifiedDate":"2023-10-04"},{"lineNumber":27,"author":{"gitId":"danielpappa"},"content":"     * It contains a description of the event and two variables for the timing.","lastModifiedDate":"2023-10-04"},{"lineNumber":28,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":29,"author":{"gitId":"danielpappa"},"content":"     * @param description of type String referring to details about the event.","lastModifiedDate":"2023-10-06"},{"lineNumber":30,"author":{"gitId":"danielpappa"},"content":"     * @param startTimeInput of type String (\"yyyy-MM-dd\") to be parsed into type LocalDate for further use.","lastModifiedDate":"2023-10-06"},{"lineNumber":31,"author":{"gitId":"danielpappa"},"content":"     * @param endTimeInput of type String (\"yyyy-MM-dd\") to be parsed into type LocalDate for further use.","lastModifiedDate":"2023-10-06"},{"lineNumber":32,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-04"},{"lineNumber":33,"author":{"gitId":"danielpappa"},"content":"    public Event(String description, String startTimeInput, String endTimeInput) {","lastModifiedDate":"2023-10-03"},{"lineNumber":34,"author":{"gitId":"danielpappa"},"content":"        super(description);","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"danielpappa"},"content":"        try {","lastModifiedDate":"2023-10-03"},{"lineNumber":36,"author":{"gitId":"danielpappa"},"content":"            this.startTime \u003d LocalDate.parse(startTimeInput);","lastModifiedDate":"2023-10-03"},{"lineNumber":37,"author":{"gitId":"danielpappa"},"content":"            this.endTime \u003d LocalDate.parse(endTimeInput);","lastModifiedDate":"2023-10-03"},{"lineNumber":38,"author":{"gitId":"danielpappa"},"content":"        } catch(DateTimeException e) {","lastModifiedDate":"2023-10-03"},{"lineNumber":39,"author":{"gitId":"danielpappa"},"content":"            System.out.println(\"Could not parse the dates.\");","lastModifiedDate":"2023-10-03"},{"lineNumber":40,"author":{"gitId":"danielpappa"},"content":"        }","lastModifiedDate":"2023-10-03"},{"lineNumber":41,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":43,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-04"},{"lineNumber":44,"author":{"gitId":"danielpappa"},"content":"     * Gets the starting date of the event.","lastModifiedDate":"2023-10-06"},{"lineNumber":45,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":46,"author":{"gitId":"danielpappa"},"content":"     * @return start date of type LocalDate.","lastModifiedDate":"2023-10-06"},{"lineNumber":47,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-04"},{"lineNumber":48,"author":{"gitId":"danielpappa"},"content":"    public LocalDate getStartTime() {","lastModifiedDate":"2023-10-03"},{"lineNumber":49,"author":{"gitId":"danielpappa"},"content":"        return startTime;","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":52,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-04"},{"lineNumber":53,"author":{"gitId":"danielpappa"},"content":"     * Gets the ending date of the event.","lastModifiedDate":"2023-10-06"},{"lineNumber":54,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":55,"author":{"gitId":"danielpappa"},"content":"     * @return end date of type LocalDate.","lastModifiedDate":"2023-10-06"},{"lineNumber":56,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-04"},{"lineNumber":57,"author":{"gitId":"danielpappa"},"content":"    public LocalDate getEndTime() {","lastModifiedDate":"2023-10-03"},{"lineNumber":58,"author":{"gitId":"danielpappa"},"content":"        return endTime;","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":61,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-04"},{"lineNumber":62,"author":{"gitId":"danielpappa"},"content":"     * Gets the interval between the starting and ending dates of the event.","lastModifiedDate":"2023-10-06"},{"lineNumber":63,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":64,"author":{"gitId":"danielpappa"},"content":"     * @return time interval of types LocalDate.","lastModifiedDate":"2023-10-06"},{"lineNumber":65,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-04"},{"lineNumber":66,"author":{"gitId":"danielpappa"},"content":"    public String getTime() {","lastModifiedDate":"2023-09-01"},{"lineNumber":67,"author":{"gitId":"danielpappa"},"content":"        String timeInterval \u003d startTime + \" - \" + endTime;","lastModifiedDate":"2023-09-01"},{"lineNumber":68,"author":{"gitId":"danielpappa"},"content":"        return timeInterval;","lastModifiedDate":"2023-09-01"},{"lineNumber":69,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":70,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":71,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-04"},{"lineNumber":72,"author":{"gitId":"danielpappa"},"content":"     * Sets the starting date of the event.","lastModifiedDate":"2023-10-06"},{"lineNumber":73,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-04"},{"lineNumber":74,"author":{"gitId":"danielpappa"},"content":"    public void setStartTime(String startTime) {","lastModifiedDate":"2023-09-01"},{"lineNumber":75,"author":{"gitId":"danielpappa"},"content":"        try {","lastModifiedDate":"2023-10-03"},{"lineNumber":76,"author":{"gitId":"danielpappa"},"content":"            this.startTime \u003d LocalDate.parse(startTime);","lastModifiedDate":"2023-10-03"},{"lineNumber":77,"author":{"gitId":"danielpappa"},"content":"        } catch(DateTimeException e) {","lastModifiedDate":"2023-10-03"},{"lineNumber":78,"author":{"gitId":"danielpappa"},"content":"            System.out.println(\"Could not parse the start-time.\");","lastModifiedDate":"2023-10-03"},{"lineNumber":79,"author":{"gitId":"danielpappa"},"content":"        }","lastModifiedDate":"2023-10-03"},{"lineNumber":80,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":81,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":82,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-04"},{"lineNumber":83,"author":{"gitId":"danielpappa"},"content":"     * Sets the ending date of the event.","lastModifiedDate":"2023-10-06"},{"lineNumber":84,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-04"},{"lineNumber":85,"author":{"gitId":"danielpappa"},"content":"    public void setEndTime(String endTime) {","lastModifiedDate":"2023-09-01"},{"lineNumber":86,"author":{"gitId":"danielpappa"},"content":"        try {","lastModifiedDate":"2023-10-03"},{"lineNumber":87,"author":{"gitId":"danielpappa"},"content":"            this.endTime \u003d LocalDate.parse(endTime);","lastModifiedDate":"2023-10-03"},{"lineNumber":88,"author":{"gitId":"danielpappa"},"content":"        } catch(DateTimeException e) {","lastModifiedDate":"2023-10-03"},{"lineNumber":89,"author":{"gitId":"danielpappa"},"content":"            System.out.println(\"Could not parse the start-time.\");","lastModifiedDate":"2023-10-03"},{"lineNumber":90,"author":{"gitId":"danielpappa"},"content":"        }","lastModifiedDate":"2023-10-03"},{"lineNumber":91,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":92,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":93,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-04"},{"lineNumber":94,"author":{"gitId":"danielpappa"},"content":"     * Sets both the starting and ending dates of the event.","lastModifiedDate":"2023-10-06"},{"lineNumber":95,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-04"},{"lineNumber":96,"author":{"gitId":"danielpappa"},"content":"    public void setTime(String startTime, String endTime) {","lastModifiedDate":"2023-09-01"},{"lineNumber":97,"author":{"gitId":"danielpappa"},"content":"        try {","lastModifiedDate":"2023-10-03"},{"lineNumber":98,"author":{"gitId":"danielpappa"},"content":"            this.startTime \u003d LocalDate.parse(startTime);","lastModifiedDate":"2023-10-03"},{"lineNumber":99,"author":{"gitId":"danielpappa"},"content":"            this.endTime \u003d LocalDate.parse(endTime);","lastModifiedDate":"2023-10-03"},{"lineNumber":100,"author":{"gitId":"danielpappa"},"content":"        } catch(DateTimeException e) {","lastModifiedDate":"2023-10-03"},{"lineNumber":101,"author":{"gitId":"danielpappa"},"content":"            System.out.println(\"Could not parse the dates.\");","lastModifiedDate":"2023-10-03"},{"lineNumber":102,"author":{"gitId":"danielpappa"},"content":"        }","lastModifiedDate":"2023-10-03"},{"lineNumber":103,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":104,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-04"},{"lineNumber":105,"author":{"gitId":"danielpappa"},"content":"     * Changes the boolean variable isDone of the task.","lastModifiedDate":"2023-10-06"},{"lineNumber":106,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":107,"author":{"gitId":"danielpappa"},"content":"     * @param isDone of type boolean.","lastModifiedDate":"2023-10-06"},{"lineNumber":108,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-04"},{"lineNumber":109,"author":{"gitId":"danielpappa"},"content":"    public void setDone(boolean isDone) {","lastModifiedDate":"2023-10-06"},{"lineNumber":110,"author":{"gitId":"danielpappa"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-10-06"},{"lineNumber":111,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":112,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-04"},{"lineNumber":113,"author":{"gitId":"danielpappa"},"content":"     * Returns whether an event task was completed/is over or not.","lastModifiedDate":"2023-10-06"},{"lineNumber":114,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":115,"author":{"gitId":"danielpappa"},"content":"     * @return boolean variable explaining whether the event is over/has been completed or not.","lastModifiedDate":"2023-10-06"},{"lineNumber":116,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-04"},{"lineNumber":117,"author":{"gitId":"danielpappa"},"content":"    public boolean isDone() {","lastModifiedDate":"2023-09-18"},{"lineNumber":118,"author":{"gitId":"danielpappa"},"content":"        return isDone;","lastModifiedDate":"2023-09-18"},{"lineNumber":119,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":120,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-04"},{"lineNumber":121,"author":{"gitId":"danielpappa"},"content":"     * Overrides the superclass\u0027 method .toString() allowing for","lastModifiedDate":"2023-10-04"},{"lineNumber":122,"author":{"gitId":"danielpappa"},"content":"     * a tailored use incorporating details of the task such as its type and whether it is done or not.","lastModifiedDate":"2023-10-04"},{"lineNumber":123,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":124,"author":{"gitId":"danielpappa"},"content":"     * @return a String summarising the event\u0027s details.","lastModifiedDate":"2023-10-06"},{"lineNumber":125,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-04"},{"lineNumber":126,"author":{"gitId":"danielpappa"},"content":"    @Override","lastModifiedDate":"2023-09-01"},{"lineNumber":127,"author":{"gitId":"danielpappa"},"content":"    public String toString() {","lastModifiedDate":"2023-09-01"},{"lineNumber":128,"author":{"gitId":"danielpappa"},"content":"        String summary \u003d String.format(\"[E] %s (%s, %s)\", super.toString(), // E stands for Event","lastModifiedDate":"2023-09-19"},{"lineNumber":129,"author":{"gitId":"danielpappa"},"content":"                \"from: \" + DATE_FORMATTER.format(startTime),","lastModifiedDate":"2023-10-03"},{"lineNumber":130,"author":{"gitId":"danielpappa"},"content":"                \"to: \" + DATE_FORMATTER.format(endTime));","lastModifiedDate":"2023-10-03"},{"lineNumber":131,"author":{"gitId":"danielpappa"},"content":"        return summary;","lastModifiedDate":"2023-09-01"},{"lineNumber":132,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":133,"author":{"gitId":"danielpappa"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"danielpappa":133}},{"path":"app/src/main/java/doli/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielpappa"},"content":"package doli.tasks;","lastModifiedDate":"2023-09-21"},{"lineNumber":2,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":3,"author":{"gitId":"danielpappa"},"content":"/**","lastModifiedDate":"2023-10-05"},{"lineNumber":4,"author":{"gitId":"danielpappa"},"content":" * \u003ch3\u003eTask class\u003c/h3\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":5,"author":{"gitId":"danielpappa"},"content":" * The Task class is the corresponding superclass for ToDo, Deadline and Event.","lastModifiedDate":"2023-10-05"},{"lineNumber":6,"author":{"gitId":"danielpappa"},"content":" * It allows the user to manage tasks which have a description and can be marked as completed or not.","lastModifiedDate":"2023-10-05"},{"lineNumber":7,"author":{"gitId":"danielpappa"},"content":" *","lastModifiedDate":"2023-10-05"},{"lineNumber":8,"author":{"gitId":"danielpappa"},"content":" * @author pappalardodaniel","lastModifiedDate":"2023-10-05"},{"lineNumber":9,"author":{"gitId":"danielpappa"},"content":" * @version 1.0","lastModifiedDate":"2023-10-05"},{"lineNumber":10,"author":{"gitId":"danielpappa"},"content":" * @since 2023-11-03","lastModifiedDate":"2023-10-05"},{"lineNumber":11,"author":{"gitId":"danielpappa"},"content":" */","lastModifiedDate":"2023-10-05"},{"lineNumber":12,"author":{"gitId":"danielpappa"},"content":"public abstract class Task {","lastModifiedDate":"2023-09-17"},{"lineNumber":13,"author":{"gitId":"danielpappa"},"content":"    /** Description of the task */","lastModifiedDate":"2023-10-06"},{"lineNumber":14,"author":{"gitId":"danielpappa"},"content":"    private final String description;","lastModifiedDate":"2023-09-17"},{"lineNumber":15,"author":{"gitId":"danielpappa"},"content":"    /** Boolean indicating whether the task is completed or not */","lastModifiedDate":"2023-10-06"},{"lineNumber":16,"author":{"gitId":"danielpappa"},"content":"    public boolean isDone;","lastModifiedDate":"2023-10-04"},{"lineNumber":17,"author":{"gitId":"danielpappa"},"content":"    /** Counter for the total number of created tasks */","lastModifiedDate":"2023-10-06"},{"lineNumber":18,"author":{"gitId":"danielpappa"},"content":"    private static int numberOfTotalTasks \u003d 0;","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":20,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-05"},{"lineNumber":21,"author":{"gitId":"danielpappa"},"content":"     * Constructs an object of type Task and sets it as not yet done by default.","lastModifiedDate":"2023-10-05"},{"lineNumber":22,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":23,"author":{"gitId":"danielpappa"},"content":"     * @param description of type String describing the task.","lastModifiedDate":"2023-10-06"},{"lineNumber":24,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-05"},{"lineNumber":25,"author":{"gitId":"danielpappa"},"content":"    public Task(String description) {","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"danielpappa"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"danielpappa"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"danielpappa"},"content":"        numberOfTotalTasks++;","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":31,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-05"},{"lineNumber":32,"author":{"gitId":"danielpappa"},"content":"     * Gets the status icon, meaning a cross (X) when the task is done and a blank ( ) else.","lastModifiedDate":"2023-10-06"},{"lineNumber":33,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":34,"author":{"gitId":"danielpappa"},"content":"     * @return a character \u0027X\u0027 or \u0027 \u0027 depending on whether the task is completed.","lastModifiedDate":"2023-10-06"},{"lineNumber":35,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-05"},{"lineNumber":36,"author":{"gitId":"danielpappa"},"content":"    public char getStatusIcon() {","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"danielpappa"},"content":"        return (isDone ? \u0027X\u0027 : \u0027 \u0027);","lastModifiedDate":"2023-10-05"},{"lineNumber":38,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":40,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-05"},{"lineNumber":41,"author":{"gitId":"danielpappa"},"content":"     * Marks the task as done (and sets its icon as \u0027X\u0027).","lastModifiedDate":"2023-10-05"},{"lineNumber":42,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-05"},{"lineNumber":43,"author":{"gitId":"danielpappa"},"content":"    public void markTaskAsDone() {","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"danielpappa"},"content":"        isDone \u003d true;","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":47,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-05"},{"lineNumber":48,"author":{"gitId":"danielpappa"},"content":"     * Marks the task as not yet done.","lastModifiedDate":"2023-10-05"},{"lineNumber":49,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-05"},{"lineNumber":50,"author":{"gitId":"danielpappa"},"content":"    public void markTaskAsNotDone() {","lastModifiedDate":"2023-08-29"},{"lineNumber":51,"author":{"gitId":"danielpappa"},"content":"        isDone \u003d false;","lastModifiedDate":"2023-08-29"},{"lineNumber":52,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":54,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-06"},{"lineNumber":55,"author":{"gitId":"danielpappa"},"content":"     * Retrieves the true task description from the user input","lastModifiedDate":"2023-10-06"},{"lineNumber":56,"author":{"gitId":"danielpappa"},"content":"     * removes any time bound information such as deadlines, start- or end-times.","lastModifiedDate":"2023-10-05"},{"lineNumber":57,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-09-19"},{"lineNumber":58,"author":{"gitId":"danielpappa"},"content":"    public String getDescription() {","lastModifiedDate":"2023-08-29"},{"lineNumber":59,"author":{"gitId":"danielpappa"},"content":"        boolean containsTime \u003d description.contains(\"/\");","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"danielpappa"},"content":"        if (containsTime) {","lastModifiedDate":"2023-09-05"},{"lineNumber":61,"author":{"gitId":"danielpappa"},"content":"            return description.split(\"/\")[0];","lastModifiedDate":"2023-09-11"},{"lineNumber":62,"author":{"gitId":"danielpappa"},"content":"        } else {","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"danielpappa"},"content":"            return description;","lastModifiedDate":"2023-09-11"},{"lineNumber":64,"author":{"gitId":"danielpappa"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":65,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":66,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":67,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-05"},{"lineNumber":68,"author":{"gitId":"danielpappa"},"content":"     * Returns true if the task is completed and false otherwise.","lastModifiedDate":"2023-10-05"},{"lineNumber":69,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":70,"author":{"gitId":"danielpappa"},"content":"     * @return a boolean value indicating whether the task is completed.","lastModifiedDate":"2023-10-06"},{"lineNumber":71,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-05"},{"lineNumber":72,"author":{"gitId":"danielpappa"},"content":"    public boolean isDone() {","lastModifiedDate":"2023-08-29"},{"lineNumber":73,"author":{"gitId":"danielpappa"},"content":"        return isDone;","lastModifiedDate":"2023-08-29"},{"lineNumber":74,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":75,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":76,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-05"},{"lineNumber":77,"author":{"gitId":"danielpappa"},"content":"     * Returns the number of total tasks created.","lastModifiedDate":"2023-10-05"},{"lineNumber":78,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":79,"author":{"gitId":"danielpappa"},"content":"     * @return an integer counting the total tasks.","lastModifiedDate":"2023-10-06"},{"lineNumber":80,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-05"},{"lineNumber":81,"author":{"gitId":"danielpappa"},"content":"    public static int getNumberOfTotalTasks() {","lastModifiedDate":"2023-09-01"},{"lineNumber":82,"author":{"gitId":"danielpappa"},"content":"        return numberOfTotalTasks;","lastModifiedDate":"2023-09-01"},{"lineNumber":83,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":84,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-04"},{"lineNumber":85,"author":{"gitId":"danielpappa"},"content":"     * Overrides the general objects method toString() allowing for","lastModifiedDate":"2023-10-05"},{"lineNumber":86,"author":{"gitId":"danielpappa"},"content":"     * a tailored use incorporating details of the task such as its description and whether it is done or not.","lastModifiedDate":"2023-10-04"},{"lineNumber":87,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":88,"author":{"gitId":"danielpappa"},"content":"     * @return a String summarising the tasks\u0027 details.","lastModifiedDate":"2023-10-06"},{"lineNumber":89,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-04"},{"lineNumber":90,"author":{"gitId":"danielpappa"},"content":"    @Override","lastModifiedDate":"2023-09-05"},{"lineNumber":91,"author":{"gitId":"danielpappa"},"content":"    public String toString() {","lastModifiedDate":"2023-09-01"},{"lineNumber":92,"author":{"gitId":"danielpappa"},"content":"        String summary \u003d String.format(\"[%c] %s\", getStatusIcon(), getDescription());","lastModifiedDate":"2023-09-01"},{"lineNumber":93,"author":{"gitId":"danielpappa"},"content":"        return summary;","lastModifiedDate":"2023-09-01"},{"lineNumber":94,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":95,"author":{"gitId":"danielpappa"},"content":"}","lastModifiedDate":"2023-08-29"},{"lineNumber":96,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"danielpappa":96}},{"path":"app/src/main/java/doli/tasks/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielpappa"},"content":"package doli.tasks;","lastModifiedDate":"2023-09-22"},{"lineNumber":2,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":3,"author":{"gitId":"danielpappa"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-22"},{"lineNumber":4,"author":{"gitId":"danielpappa"},"content":"import java.util.Iterator;","lastModifiedDate":"2023-09-22"},{"lineNumber":5,"author":{"gitId":"danielpappa"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-10-03"},{"lineNumber":6,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":7,"author":{"gitId":"danielpappa"},"content":"/**","lastModifiedDate":"2023-10-04"},{"lineNumber":8,"author":{"gitId":"danielpappa"},"content":" * \u003ch3\u003eTaskList class\u003c/h3\u003e","lastModifiedDate":"2023-10-04"},{"lineNumber":9,"author":{"gitId":"danielpappa"},"content":" * The TaskList class implements the iterable interface and primarily","lastModifiedDate":"2023-10-04"},{"lineNumber":10,"author":{"gitId":"danielpappa"},"content":" * serves to create a personalised version of an ArrayList which can be","lastModifiedDate":"2023-10-04"},{"lineNumber":11,"author":{"gitId":"danielpappa"},"content":" * used to create the agenda Doli will manage.","lastModifiedDate":"2023-10-04"},{"lineNumber":12,"author":{"gitId":"danielpappa"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-10-04"},{"lineNumber":13,"author":{"gitId":"danielpappa"},"content":" * \u003cb\u003eNote:\u003c/b\u003e Objects of type TaskList can also be used as streams for easier implementation and filtering.","lastModifiedDate":"2023-10-04"},{"lineNumber":14,"author":{"gitId":"danielpappa"},"content":" *","lastModifiedDate":"2023-10-04"},{"lineNumber":15,"author":{"gitId":"danielpappa"},"content":" * @author pappalardodaniel","lastModifiedDate":"2023-10-04"},{"lineNumber":16,"author":{"gitId":"danielpappa"},"content":" * @version 1.0","lastModifiedDate":"2023-10-04"},{"lineNumber":17,"author":{"gitId":"danielpappa"},"content":" * @since 2023-11-03","lastModifiedDate":"2023-10-04"},{"lineNumber":18,"author":{"gitId":"danielpappa"},"content":" */","lastModifiedDate":"2023-10-04"},{"lineNumber":19,"author":{"gitId":"danielpappa"},"content":"public class TaskList implements Iterable\u003cTask\u003e {","lastModifiedDate":"2023-09-22"},{"lineNumber":20,"author":{"gitId":"danielpappa"},"content":"    private ArrayList\u003cTask\u003e taskList;","lastModifiedDate":"2023-09-22"},{"lineNumber":21,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":22,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-04"},{"lineNumber":23,"author":{"gitId":"danielpappa"},"content":"     * Constructs an object of type TaskList with a specifiable agenda.","lastModifiedDate":"2023-10-04"},{"lineNumber":24,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":25,"author":{"gitId":"danielpappa"},"content":"     * @param taskList an ArrayList of Tasks which will form the core of the TaskList.","lastModifiedDate":"2023-10-06"},{"lineNumber":26,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-04"},{"lineNumber":27,"author":{"gitId":"danielpappa"},"content":"    public TaskList(ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2023-09-22"},{"lineNumber":28,"author":{"gitId":"danielpappa"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2023-09-22"},{"lineNumber":29,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":30,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":31,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-04"},{"lineNumber":32,"author":{"gitId":"danielpappa"},"content":"     * Constructs an object of type TaskList with an empty agenda.","lastModifiedDate":"2023-10-04"},{"lineNumber":33,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-04"},{"lineNumber":34,"author":{"gitId":"danielpappa"},"content":"    public TaskList() {","lastModifiedDate":"2023-09-22"},{"lineNumber":35,"author":{"gitId":"danielpappa"},"content":"        this.taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-22"},{"lineNumber":36,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":37,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":38,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-04"},{"lineNumber":39,"author":{"gitId":"danielpappa"},"content":"     * Removes a task from the TaskList.","lastModifiedDate":"2023-10-04"},{"lineNumber":40,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":41,"author":{"gitId":"danielpappa"},"content":"     * @param numberOfTaskToDelete of type int specifying the index of the task to be deleted (starting from 0).","lastModifiedDate":"2023-10-06"},{"lineNumber":42,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-04"},{"lineNumber":43,"author":{"gitId":"danielpappa"},"content":"    public void deleteTask(int numberOfTaskToDelete) {","lastModifiedDate":"2023-09-22"},{"lineNumber":44,"author":{"gitId":"danielpappa"},"content":"        taskList.remove(numberOfTaskToDelete - 1);","lastModifiedDate":"2023-09-22"},{"lineNumber":45,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":46,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":47,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-04"},{"lineNumber":48,"author":{"gitId":"danielpappa"},"content":"     * Removes all tasks from the TaskList by resetting it to an empty one.","lastModifiedDate":"2023-10-04"},{"lineNumber":49,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-04"},{"lineNumber":50,"author":{"gitId":"danielpappa"},"content":"    public void deleteAll() {","lastModifiedDate":"2023-09-22"},{"lineNumber":51,"author":{"gitId":"danielpappa"},"content":"        taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-22"},{"lineNumber":52,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":53,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":54,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-04"},{"lineNumber":55,"author":{"gitId":"danielpappa"},"content":"     * Adds a specific task to the TaskList.","lastModifiedDate":"2023-10-04"},{"lineNumber":56,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":57,"author":{"gitId":"danielpappa"},"content":"     * @param taskToAdd of type Task to be added to the agenda.","lastModifiedDate":"2023-10-06"},{"lineNumber":58,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-04"},{"lineNumber":59,"author":{"gitId":"danielpappa"},"content":"    public void addTask(Task taskToAdd) {","lastModifiedDate":"2023-09-22"},{"lineNumber":60,"author":{"gitId":"danielpappa"},"content":"        taskList.add(taskToAdd);","lastModifiedDate":"2023-09-22"},{"lineNumber":61,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":62,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":63,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-04"},{"lineNumber":64,"author":{"gitId":"danielpappa"},"content":"     * Gets the number of Tasks contained withing the TaskList.","lastModifiedDate":"2023-10-06"},{"lineNumber":65,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":66,"author":{"gitId":"danielpappa"},"content":"     * @return the size of the agenda.","lastModifiedDate":"2023-10-06"},{"lineNumber":67,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-04"},{"lineNumber":68,"author":{"gitId":"danielpappa"},"content":"    public int getSize() {","lastModifiedDate":"2023-09-22"},{"lineNumber":69,"author":{"gitId":"danielpappa"},"content":"        return taskList.size();","lastModifiedDate":"2023-09-22"},{"lineNumber":70,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":71,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":72,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-04"},{"lineNumber":73,"author":{"gitId":"danielpappa"},"content":"     * Gets a specific task contained within the agenda.","lastModifiedDate":"2023-10-06"},{"lineNumber":74,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":75,"author":{"gitId":"danielpappa"},"content":"     * @param numberOfTaskToGet of type int referring to the index of the task to retrieve.","lastModifiedDate":"2023-10-06"},{"lineNumber":76,"author":{"gitId":"danielpappa"},"content":"     * @return the requested task.","lastModifiedDate":"2023-10-06"},{"lineNumber":77,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-04"},{"lineNumber":78,"author":{"gitId":"danielpappa"},"content":"    public Task getTask(int numberOfTaskToGet) {","lastModifiedDate":"2023-09-22"},{"lineNumber":79,"author":{"gitId":"danielpappa"},"content":"        return taskList.get(numberOfTaskToGet - 1);","lastModifiedDate":"2023-09-22"},{"lineNumber":80,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":81,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":82,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-04"},{"lineNumber":83,"author":{"gitId":"danielpappa"},"content":"     * Allows for iteration across the elements of the TaskList.","lastModifiedDate":"2023-10-04"},{"lineNumber":84,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":85,"author":{"gitId":"danielpappa"},"content":"     * @return an iteration throughout the Tasks contained within the agenda.","lastModifiedDate":"2023-10-06"},{"lineNumber":86,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-04"},{"lineNumber":87,"author":{"gitId":"danielpappa"},"content":"    @Override","lastModifiedDate":"2023-09-22"},{"lineNumber":88,"author":{"gitId":"danielpappa"},"content":"    public Iterator\u003cTask\u003e iterator() {","lastModifiedDate":"2023-09-22"},{"lineNumber":89,"author":{"gitId":"danielpappa"},"content":"        return taskList.iterator();","lastModifiedDate":"2023-09-22"},{"lineNumber":90,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":91,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":92,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-04"},{"lineNumber":93,"author":{"gitId":"danielpappa"},"content":"     * Allows to treat the TaskList as a stream and perform quick and efficient actions upon it.","lastModifiedDate":"2023-10-04"},{"lineNumber":94,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":95,"author":{"gitId":"danielpappa"},"content":"     * @return a Stream of Tasks.","lastModifiedDate":"2023-10-06"},{"lineNumber":96,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-04"},{"lineNumber":97,"author":{"gitId":"danielpappa"},"content":"    public Stream\u003cTask\u003e stream() {","lastModifiedDate":"2023-10-03"},{"lineNumber":98,"author":{"gitId":"danielpappa"},"content":"        return taskList.stream();","lastModifiedDate":"2023-10-03"},{"lineNumber":99,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-10-03"},{"lineNumber":100,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":101,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-04"},{"lineNumber":102,"author":{"gitId":"danielpappa"},"content":"     * Overrides a general object\u0027s method toString() in order to allow a more specialized String representation.","lastModifiedDate":"2023-10-04"},{"lineNumber":103,"author":{"gitId":"danielpappa"},"content":"     * In this case it will e.g. loop over the entries of the agenda and concatenate them effectively using line breaks.","lastModifiedDate":"2023-10-04"},{"lineNumber":104,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":105,"author":{"gitId":"danielpappa"},"content":"     * @return a String comprising a neat overview of the agenda.","lastModifiedDate":"2023-10-06"},{"lineNumber":106,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-04"},{"lineNumber":107,"author":{"gitId":"danielpappa"},"content":"    @Override","lastModifiedDate":"2023-09-22"},{"lineNumber":108,"author":{"gitId":"danielpappa"},"content":"    public String toString() {","lastModifiedDate":"2023-09-22"},{"lineNumber":109,"author":{"gitId":"danielpappa"},"content":"        StringBuilder agenda \u003d new StringBuilder();","lastModifiedDate":"2023-09-22"},{"lineNumber":110,"author":{"gitId":"danielpappa"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2023-09-22"},{"lineNumber":111,"author":{"gitId":"danielpappa"},"content":"            agenda.append(String.format(\"   %d. %s\\n\", i + 1, taskList.get(i).toString()));","lastModifiedDate":"2023-09-22"},{"lineNumber":112,"author":{"gitId":"danielpappa"},"content":"        }","lastModifiedDate":"2023-09-22"},{"lineNumber":113,"author":{"gitId":"danielpappa"},"content":"        return agenda.toString();","lastModifiedDate":"2023-09-22"},{"lineNumber":114,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":115,"author":{"gitId":"danielpappa"},"content":"}","lastModifiedDate":"2023-09-22"}],"authorContributionMap":{"danielpappa":115}},{"path":"app/src/main/java/doli/tasks/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielpappa"},"content":"package doli.tasks;","lastModifiedDate":"2023-09-21"},{"lineNumber":2,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":3,"author":{"gitId":"danielpappa"},"content":"/**","lastModifiedDate":"2023-10-04"},{"lineNumber":4,"author":{"gitId":"danielpappa"},"content":" * \u003ch3\u003eToDo class\u003c/h3\u003e","lastModifiedDate":"2023-10-04"},{"lineNumber":5,"author":{"gitId":"danielpappa"},"content":" * The ToDo class extends the Task class and is specifically","lastModifiedDate":"2023-10-04"},{"lineNumber":6,"author":{"gitId":"danielpappa"},"content":" * made to handle tasks of type todo, meaning that they do not have","lastModifiedDate":"2023-10-04"},{"lineNumber":7,"author":{"gitId":"danielpappa"},"content":" * any due date or timings in general, but simply a description.","lastModifiedDate":"2023-10-04"},{"lineNumber":8,"author":{"gitId":"danielpappa"},"content":" *","lastModifiedDate":"2023-10-04"},{"lineNumber":9,"author":{"gitId":"danielpappa"},"content":" * @author pappalardodaniel","lastModifiedDate":"2023-10-04"},{"lineNumber":10,"author":{"gitId":"danielpappa"},"content":" * @version 1.0","lastModifiedDate":"2023-10-04"},{"lineNumber":11,"author":{"gitId":"danielpappa"},"content":" * @since 2023-11-03","lastModifiedDate":"2023-10-04"},{"lineNumber":12,"author":{"gitId":"danielpappa"},"content":" */","lastModifiedDate":"2023-10-04"},{"lineNumber":13,"author":{"gitId":"danielpappa"},"content":"public class ToDo extends Task{","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-04"},{"lineNumber":15,"author":{"gitId":"danielpappa"},"content":"     * Constructs an object of type ToDo and calls its superclass\u0027constructor.","lastModifiedDate":"2023-10-06"},{"lineNumber":16,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":17,"author":{"gitId":"danielpappa"},"content":"     * @param description of type String containing details about the task.","lastModifiedDate":"2023-10-06"},{"lineNumber":18,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-04"},{"lineNumber":19,"author":{"gitId":"danielpappa"},"content":"    public ToDo(String description) {","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"danielpappa"},"content":"        super(description);","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-04"},{"lineNumber":23,"author":{"gitId":"danielpappa"},"content":"     * Changes the boolean variable isDone of the task.","lastModifiedDate":"2023-10-06"},{"lineNumber":24,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":25,"author":{"gitId":"danielpappa"},"content":"     * @param isDone of type boolean.","lastModifiedDate":"2023-10-06"},{"lineNumber":26,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-04"},{"lineNumber":27,"author":{"gitId":"danielpappa"},"content":"    public void setDone(boolean isDone) {","lastModifiedDate":"2023-10-06"},{"lineNumber":28,"author":{"gitId":"danielpappa"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-10-06"},{"lineNumber":29,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-04"},{"lineNumber":31,"author":{"gitId":"danielpappa"},"content":"     * Returns whether a todo task was completed or not.","lastModifiedDate":"2023-10-06"},{"lineNumber":32,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":33,"author":{"gitId":"danielpappa"},"content":"     * @return boolean variable explaining whether the task was completed or not.","lastModifiedDate":"2023-10-06"},{"lineNumber":34,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-04"},{"lineNumber":35,"author":{"gitId":"danielpappa"},"content":"    public boolean isDone() {","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"danielpappa"},"content":"        return isDone;","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"danielpappa"},"content":"    /**","lastModifiedDate":"2023-10-04"},{"lineNumber":39,"author":{"gitId":"danielpappa"},"content":"     * Overrides the superclass\u0027 method .toString() allowing for","lastModifiedDate":"2023-10-04"},{"lineNumber":40,"author":{"gitId":"danielpappa"},"content":"     * a tailored use incorporating details of the task such as its type and whether it is done or not.","lastModifiedDate":"2023-10-04"},{"lineNumber":41,"author":{"gitId":"danielpappa"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":42,"author":{"gitId":"danielpappa"},"content":"     * @return a String summarising the todo\u0027s details.","lastModifiedDate":"2023-10-06"},{"lineNumber":43,"author":{"gitId":"danielpappa"},"content":"     */","lastModifiedDate":"2023-10-04"},{"lineNumber":44,"author":{"gitId":"danielpappa"},"content":"    @Override","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"danielpappa"},"content":"    public String toString() {","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"danielpappa"},"content":"        return \"[T] \" + super.toString(); // T stands for ToDo","lastModifiedDate":"2023-09-19"},{"lineNumber":47,"author":{"gitId":"danielpappa"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"danielpappa"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"danielpappa":48}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"danielpappa"},"content":"# Doli: User Guide","lastModifiedDate":"2023-10-05"},{"lineNumber":2,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":3,"author":{"gitId":"danielpappa"},"content":"\u003eDoli is a simple **Personal Assistant Chatbot** that helps you keep track of","lastModifiedDate":"2023-10-05"},{"lineNumber":4,"author":{"gitId":"danielpappa"},"content":"various things. It can **help setting up an agenda containing todos, deadlines","lastModifiedDate":"2023-10-05"},{"lineNumber":5,"author":{"gitId":"danielpappa"},"content":"and events** on which the user is able to perform actions such as marking them as done.","lastModifiedDate":"2023-10-05"},{"lineNumber":6,"author":{"gitId":"danielpappa"},"content":"The agenda is stored in a file allowing the user to keep editing a previously","lastModifiedDate":"2023-10-05"},{"lineNumber":7,"author":{"gitId":"danielpappa"},"content":"created agenda even after exiting the program.","lastModifiedDate":"2023-10-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"## Features ","lastModifiedDate":"2019-07-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":11,"author":{"gitId":"danielpappa"},"content":"### Obtaining an overview of Doli\u0027s features: `help`","lastModifiedDate":"2023-10-05"},{"lineNumber":12,"author":{"gitId":"danielpappa"},"content":"Displays a link to this user guide.  ","lastModifiedDate":"2023-10-05"},{"lineNumber":13,"author":{"gitId":"danielpappa"},"content":"Format: `help`","lastModifiedDate":"2023-10-05"},{"lineNumber":14,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":15,"author":{"gitId":"danielpappa"},"content":"### Adding a todo: `todo`","lastModifiedDate":"2023-10-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":17,"author":{"gitId":"danielpappa"},"content":"Adds a task of type todo to the agenda.  ","lastModifiedDate":"2023-10-05"},{"lineNumber":18,"author":{"gitId":"danielpappa"},"content":"Format: `todo DESCRIPTION`  ","lastModifiedDate":"2023-10-05"},{"lineNumber":19,"author":{"gitId":"danielpappa"},"content":"- `DESCRIPTION` can contain a single character or multiple words ","lastModifiedDate":"2023-10-05"},{"lineNumber":20,"author":{"gitId":"danielpappa"},"content":"- Note that text following a backslash will be ignored","lastModifiedDate":"2023-10-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":22,"author":{"gitId":"danielpappa"},"content":"Examples:   ","lastModifiedDate":"2023-10-05"},{"lineNumber":23,"author":{"gitId":"danielpappa"},"content":"- `todo grocery shopping for dinner`","lastModifiedDate":"2023-10-05"},{"lineNumber":24,"author":{"gitId":"danielpappa"},"content":"- `todo software engineering assessment`","lastModifiedDate":"2023-10-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":26,"author":{"gitId":"danielpappa"},"content":"Outcome:","lastModifiedDate":"2023-10-05"},{"lineNumber":27,"author":{"gitId":"danielpappa"},"content":"```","lastModifiedDate":"2023-10-05"},{"lineNumber":28,"author":{"gitId":"danielpappa"},"content":"Got it! I\u0027ve added the following task to your agenda:","lastModifiedDate":"2023-10-05"},{"lineNumber":29,"author":{"gitId":"danielpappa"},"content":"\t[T] [ ] grocery shopping for dinner","lastModifiedDate":"2023-10-05"},{"lineNumber":30,"author":{"gitId":"danielpappa"},"content":"Now you have a total of 1 tasks in your agenda.","lastModifiedDate":"2023-10-05"},{"lineNumber":31,"author":{"gitId":"danielpappa"},"content":"```","lastModifiedDate":"2023-10-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":33,"author":{"gitId":"danielpappa"},"content":"### Adding a deadline: `deadline`","lastModifiedDate":"2023-10-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":35,"author":{"gitId":"danielpappa"},"content":"Adds a task of type deadline to the agenda.  ","lastModifiedDate":"2023-10-05"},{"lineNumber":36,"author":{"gitId":"danielpappa"},"content":"Format: `deadline DESCRIPTION /DEADLINE`  ","lastModifiedDate":"2023-10-05"},{"lineNumber":37,"author":{"gitId":"danielpappa"},"content":"- `DESCRIPTION` can contain a single character or multiple words","lastModifiedDate":"2023-10-05"},{"lineNumber":38,"author":{"gitId":"danielpappa"},"content":"- Note that text following a backslash will be ignored","lastModifiedDate":"2023-10-05"},{"lineNumber":39,"author":{"gitId":"danielpappa"},"content":"- `DEADLINE` **must be of format yyyy-MM-dd**","lastModifiedDate":"2023-10-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":41,"author":{"gitId":"danielpappa"},"content":"Examples:","lastModifiedDate":"2023-10-05"},{"lineNumber":42,"author":{"gitId":"danielpappa"},"content":"- `deadline leftovers expire /2023-10-10`","lastModifiedDate":"2023-10-05"},{"lineNumber":43,"author":{"gitId":"danielpappa"},"content":"- `deadline individual project /2023-10-06`","lastModifiedDate":"2023-10-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":45,"author":{"gitId":"danielpappa"},"content":"Outcome:","lastModifiedDate":"2023-10-05"},{"lineNumber":46,"author":{"gitId":"danielpappa"},"content":"```","lastModifiedDate":"2023-10-05"},{"lineNumber":47,"author":{"gitId":"danielpappa"},"content":"Got it! I\u0027ve added the following task to your agenda:","lastModifiedDate":"2023-10-05"},{"lineNumber":48,"author":{"gitId":"danielpappa"},"content":"\t[D] [ ] individual project  (by: Oct 06 2023)","lastModifiedDate":"2023-10-05"},{"lineNumber":49,"author":{"gitId":"danielpappa"},"content":"Now you have a total of 2 tasks in your agenda.","lastModifiedDate":"2023-10-05"},{"lineNumber":50,"author":{"gitId":"danielpappa"},"content":"```","lastModifiedDate":"2023-10-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":52,"author":{"gitId":"danielpappa"},"content":"### Adding an event: `event`","lastModifiedDate":"2023-10-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":54,"author":{"gitId":"danielpappa"},"content":"Adds a task of type event to the agenda.  ","lastModifiedDate":"2023-10-05"},{"lineNumber":55,"author":{"gitId":"danielpappa"},"content":"Format: `event DESCRIPTION /STARTDATE /ENDDATE`  ","lastModifiedDate":"2023-10-05"},{"lineNumber":56,"author":{"gitId":"danielpappa"},"content":"- `DESCRIPTION` can contain a single character or multiple words","lastModifiedDate":"2023-10-05"},{"lineNumber":57,"author":{"gitId":"danielpappa"},"content":"- Note that text following a backslash will be ignored","lastModifiedDate":"2023-10-05"},{"lineNumber":58,"author":{"gitId":"danielpappa"},"content":"- `STARTDATE` **must be of format yyyy-MM-dd**","lastModifiedDate":"2023-10-05"},{"lineNumber":59,"author":{"gitId":"danielpappa"},"content":"- `ENDDATE` **must be of format yyyy-MM-dd**","lastModifiedDate":"2023-10-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":61,"author":{"gitId":"danielpappa"},"content":"Examples:","lastModifiedDate":"2023-10-05"},{"lineNumber":62,"author":{"gitId":"danielpappa"},"content":"- `event trip to Bali /2023-09-10 /2023-09-23`","lastModifiedDate":"2023-10-05"},{"lineNumber":63,"author":{"gitId":"danielpappa"},"content":"- `event singapore exchange /2023-08-06 /2023-12-14`","lastModifiedDate":"2023-10-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":65,"author":{"gitId":"danielpappa"},"content":"Outcome:","lastModifiedDate":"2023-10-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":67,"author":{"gitId":"danielpappa"},"content":"Got it! I\u0027ve added the following task to your agenda:","lastModifiedDate":"2023-10-05"},{"lineNumber":68,"author":{"gitId":"danielpappa"},"content":"\t[E] [ ] trip to bali  (from: Sep 10 2023, to: Sep 23 2023)","lastModifiedDate":"2023-10-05"},{"lineNumber":69,"author":{"gitId":"danielpappa"},"content":"Now you have a total of 3 tasks in your agenda.","lastModifiedDate":"2023-10-05"},{"lineNumber":70,"author":{"gitId":"danielpappa"},"content":"```","lastModifiedDate":"2023-10-05"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":72,"author":{"gitId":"danielpappa"},"content":"### Deleting a task: `delete`","lastModifiedDate":"2023-10-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":74,"author":{"gitId":"danielpappa"},"content":"Deletes a task from the agenda.  ","lastModifiedDate":"2023-10-05"},{"lineNumber":75,"author":{"gitId":"danielpappa"},"content":"Format: `delete INDEX`  ","lastModifiedDate":"2023-10-05"},{"lineNumber":76,"author":{"gitId":"danielpappa"},"content":"- `INDEX` needs to be a number contained within the agenda","lastModifiedDate":"2023-10-05"},{"lineNumber":77,"author":{"gitId":"danielpappa"},"content":"- You can only delete one task at a time","lastModifiedDate":"2023-10-05"},{"lineNumber":78,"author":{"gitId":"danielpappa"},"content":"- **Indexing starts from 1** (not 0)       ","lastModifiedDate":"2023-10-05"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":80,"author":{"gitId":"danielpappa"},"content":"Examples:  ","lastModifiedDate":"2023-10-05"},{"lineNumber":81,"author":{"gitId":"danielpappa"},"content":"- `delete 1`","lastModifiedDate":"2023-10-05"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":83,"author":{"gitId":"danielpappa"},"content":"Outcome:","lastModifiedDate":"2023-10-05"},{"lineNumber":84,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2023-10-05"},{"lineNumber":85,"author":{"gitId":"danielpappa"},"content":"Got it! I\u0027ve deleted task 1","lastModifiedDate":"2023-10-05"},{"lineNumber":86,"author":{"gitId":"danielpappa"},"content":"```","lastModifiedDate":"2023-10-05"},{"lineNumber":87,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":88,"author":{"gitId":"danielpappa"},"content":"### Deleting all entries: `clear`","lastModifiedDate":"2023-10-05"},{"lineNumber":89,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":90,"author":{"gitId":"danielpappa"},"content":"Deletes all tasks from the agenda.   ","lastModifiedDate":"2023-10-05"},{"lineNumber":91,"author":{"gitId":"danielpappa"},"content":"Format: `clear`  ","lastModifiedDate":"2023-10-05"},{"lineNumber":92,"author":{"gitId":"danielpappa"},"content":"- Words following the command `clear` will be ignored. That is `clear all tasks` ","lastModifiedDate":"2023-10-05"},{"lineNumber":93,"author":{"gitId":"danielpappa"},"content":"will be interpreted in the same way as `clear`","lastModifiedDate":"2023-10-05"},{"lineNumber":94,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":95,"author":{"gitId":"danielpappa"},"content":"Outcome:","lastModifiedDate":"2023-10-05"},{"lineNumber":96,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":97,"author":{"gitId":"danielpappa"},"content":"Got it! I\u0027ve deleted all tasks. Your agenda is now empty.","lastModifiedDate":"2023-10-05"},{"lineNumber":98,"author":{"gitId":"danielpappa"},"content":"```","lastModifiedDate":"2023-10-05"},{"lineNumber":99,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":100,"author":{"gitId":"danielpappa"},"content":"### Marking a task as done: `mark`","lastModifiedDate":"2023-10-05"},{"lineNumber":101,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":102,"author":{"gitId":"danielpappa"},"content":"Marks a specific task as done by setting a cross (X).  ","lastModifiedDate":"2023-10-05"},{"lineNumber":103,"author":{"gitId":"danielpappa"},"content":"Format: `mark INDEX`  ","lastModifiedDate":"2023-10-05"},{"lineNumber":104,"author":{"gitId":"danielpappa"},"content":"- `INDEX` needs to be a number contained within the agenda","lastModifiedDate":"2023-10-05"},{"lineNumber":105,"author":{"gitId":"danielpappa"},"content":"- You can only mark one task at a time","lastModifiedDate":"2023-10-05"},{"lineNumber":106,"author":{"gitId":"danielpappa"},"content":"- **Indexing starts from 1** (not 0)","lastModifiedDate":"2023-10-05"},{"lineNumber":107,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":108,"author":{"gitId":"danielpappa"},"content":"Examples:","lastModifiedDate":"2023-10-05"},{"lineNumber":109,"author":{"gitId":"danielpappa"},"content":"- `mark 2`","lastModifiedDate":"2023-10-05"},{"lineNumber":110,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":111,"author":{"gitId":"danielpappa"},"content":"Outcome:","lastModifiedDate":"2023-10-05"},{"lineNumber":112,"author":{"gitId":"danielpappa"},"content":"```","lastModifiedDate":"2023-10-05"},{"lineNumber":113,"author":{"gitId":"danielpappa"},"content":"I\u0027ve successfully marked task 2 as done.","lastModifiedDate":"2023-10-05"},{"lineNumber":114,"author":{"gitId":"danielpappa"},"content":"Would you like to mark/unmark something else?","lastModifiedDate":"2023-10-05"},{"lineNumber":115,"author":{"gitId":"danielpappa"},"content":"```","lastModifiedDate":"2023-10-05"},{"lineNumber":116,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":117,"author":{"gitId":"danielpappa"},"content":"### Marking a task as not done: `unmark`","lastModifiedDate":"2023-10-05"},{"lineNumber":118,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":119,"author":{"gitId":"danielpappa"},"content":"Marks a specific task as not done by removing an eventual cross.  ","lastModifiedDate":"2023-10-05"},{"lineNumber":120,"author":{"gitId":"danielpappa"},"content":"Format: `unmark INDEX`","lastModifiedDate":"2023-10-05"},{"lineNumber":121,"author":{"gitId":"danielpappa"},"content":"- `INDEX` needs to be a number contained within the agenda","lastModifiedDate":"2023-10-05"},{"lineNumber":122,"author":{"gitId":"danielpappa"},"content":"- You can only unmark one task at a time","lastModifiedDate":"2023-10-05"},{"lineNumber":123,"author":{"gitId":"danielpappa"},"content":"- **Indexing starts from 1** (not 0)","lastModifiedDate":"2023-10-05"},{"lineNumber":124,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":125,"author":{"gitId":"danielpappa"},"content":"Examples:","lastModifiedDate":"2023-10-05"},{"lineNumber":126,"author":{"gitId":"danielpappa"},"content":"- `unmark 2`","lastModifiedDate":"2023-10-05"},{"lineNumber":127,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":128,"author":{"gitId":"danielpappa"},"content":"Outcome:","lastModifiedDate":"2023-10-05"},{"lineNumber":129,"author":{"gitId":"danielpappa"},"content":"```","lastModifiedDate":"2023-10-05"},{"lineNumber":130,"author":{"gitId":"danielpappa"},"content":"I\u0027ve unmarked task 2. You better get it done soon!","lastModifiedDate":"2023-10-05"},{"lineNumber":131,"author":{"gitId":"danielpappa"},"content":"Would you like to mark/unmark something else?","lastModifiedDate":"2023-10-05"},{"lineNumber":132,"author":{"gitId":"danielpappa"},"content":"```","lastModifiedDate":"2023-10-05"},{"lineNumber":133,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":134,"author":{"gitId":"danielpappa"},"content":"### Listing all entries: `list`","lastModifiedDate":"2023-10-05"},{"lineNumber":135,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":136,"author":{"gitId":"danielpappa"},"content":"Shows a list of all the entries in the agenda.  ","lastModifiedDate":"2023-10-05"},{"lineNumber":137,"author":{"gitId":"danielpappa"},"content":"Format: `list`  ","lastModifiedDate":"2023-10-05"},{"lineNumber":138,"author":{"gitId":"danielpappa"},"content":"- Words following the command `list` will be ignored. That is `list all entries`","lastModifiedDate":"2023-10-05"},{"lineNumber":139,"author":{"gitId":"danielpappa"},"content":"will be interpreted in the same way as `list`","lastModifiedDate":"2023-10-05"},{"lineNumber":140,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":141,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":142,"author":{"gitId":"danielpappa"},"content":"Outcome:","lastModifiedDate":"2023-10-05"},{"lineNumber":143,"author":{"gitId":"danielpappa"},"content":"```","lastModifiedDate":"2023-10-05"},{"lineNumber":144,"author":{"gitId":"danielpappa"},"content":"Here is an overview of your agenda:","lastModifiedDate":"2023-10-05"},{"lineNumber":145,"author":{"gitId":"danielpappa"},"content":"   1. [D] [ ] individual project  (by: Oct 06 2023)","lastModifiedDate":"2023-10-05"},{"lineNumber":146,"author":{"gitId":"danielpappa"},"content":"   2. [E] [ ] trip to bali  (from: Sep 10 2023, to: Sep 23 2023)","lastModifiedDate":"2023-10-05"},{"lineNumber":147,"author":{"gitId":"danielpappa"},"content":"```","lastModifiedDate":"2023-10-05"},{"lineNumber":148,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":149,"author":{"gitId":"danielpappa"},"content":"### Listing all entries up to a specific day: `overview`","lastModifiedDate":"2023-10-05"},{"lineNumber":150,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":151,"author":{"gitId":"danielpappa"},"content":"Shows a list of all entries in the agenda up to a specific date.  ","lastModifiedDate":"2023-10-05"},{"lineNumber":152,"author":{"gitId":"danielpappa"},"content":"Format: `overview DATE_LIMIT`  ","lastModifiedDate":"2023-10-05"},{"lineNumber":153,"author":{"gitId":"danielpappa"},"content":"- `DATE_LIMIT` **must be of format yyyy-MM-dd**  ","lastModifiedDate":"2023-10-05"},{"lineNumber":154,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":155,"author":{"gitId":"danielpappa"},"content":"Examples:","lastModifiedDate":"2023-10-05"},{"lineNumber":156,"author":{"gitId":"danielpappa"},"content":"- `overview 2023-10-01`","lastModifiedDate":"2023-10-05"},{"lineNumber":157,"author":{"gitId":"danielpappa"},"content":"- `overview 1999-04-28`","lastModifiedDate":"2023-10-05"},{"lineNumber":158,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":159,"author":{"gitId":"danielpappa"},"content":"Outcome:","lastModifiedDate":"2023-10-05"},{"lineNumber":160,"author":{"gitId":"danielpappa"},"content":"```","lastModifiedDate":"2023-10-05"},{"lineNumber":161,"author":{"gitId":"danielpappa"},"content":"Here is an overview of your agenda:","lastModifiedDate":"2023-10-05"},{"lineNumber":162,"author":{"gitId":"danielpappa"},"content":"   1. [E] [ ] trip to bali  (from: Sep 10 2023, to: Sep 23 2023)","lastModifiedDate":"2023-10-05"},{"lineNumber":163,"author":{"gitId":"danielpappa"},"content":"```","lastModifiedDate":"2023-10-05"},{"lineNumber":164,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":165,"author":{"gitId":"danielpappa"},"content":"### Listing all past due commands: `late`","lastModifiedDate":"2023-10-05"},{"lineNumber":166,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":167,"author":{"gitId":"danielpappa"},"content":"Shows a list of all the deadlines in the agenda which were already due and all the past events.  ","lastModifiedDate":"2023-10-05"},{"lineNumber":168,"author":{"gitId":"danielpappa"},"content":"Format: `late`  ","lastModifiedDate":"2023-10-05"},{"lineNumber":169,"author":{"gitId":"danielpappa"},"content":"- Words following the command `late` will be ignored. That is `late tasks`","lastModifiedDate":"2023-10-05"},{"lineNumber":170,"author":{"gitId":"danielpappa"},"content":"will be interpreted in the same way as `late`","lastModifiedDate":"2023-10-05"},{"lineNumber":171,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":172,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":173,"author":{"gitId":"danielpappa"},"content":"Outcome:","lastModifiedDate":"2023-10-05"},{"lineNumber":174,"author":{"gitId":"danielpappa"},"content":"```","lastModifiedDate":"2023-10-05"},{"lineNumber":175,"author":{"gitId":"danielpappa"},"content":"Here\u0027s an overview of tasks that were due and past events:","lastModifiedDate":"2023-10-05"},{"lineNumber":176,"author":{"gitId":"danielpappa"},"content":"   1. [E] [ ] trip to bali  (from: Sep 10 2023, to: Sep 23 2023)","lastModifiedDate":"2023-10-05"},{"lineNumber":177,"author":{"gitId":"danielpappa"},"content":"```","lastModifiedDate":"2023-10-05"},{"lineNumber":178,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":179,"author":{"gitId":"danielpappa"},"content":"### Finding specific tasks: `find`","lastModifiedDate":"2023-10-05"},{"lineNumber":180,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":181,"author":{"gitId":"danielpappa"},"content":"Searches for a specific keyword within the descriptions of all the elements contained within the agenda.  ","lastModifiedDate":"2023-10-05"},{"lineNumber":182,"author":{"gitId":"danielpappa"},"content":"Format: `find KEYWORD`","lastModifiedDate":"2023-10-05"},{"lineNumber":183,"author":{"gitId":"danielpappa"},"content":"- `KEYWORD` can potentially range from a single character to multiple words","lastModifiedDate":"2023-10-05"},{"lineNumber":184,"author":{"gitId":"danielpappa"},"content":"- Note that text following a backslash will be ignored","lastModifiedDate":"2023-10-05"},{"lineNumber":185,"author":{"gitId":"danielpappa"},"content":"- The search is **case in-sensitive**, e.g. `food` will match `Food`","lastModifiedDate":"2023-10-05"},{"lineNumber":186,"author":{"gitId":"danielpappa"},"content":"- The order of the keywords does matter","lastModifiedDate":"2023-10-05"},{"lineNumber":187,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":188,"author":{"gitId":"danielpappa"},"content":"Examples:","lastModifiedDate":"2023-10-05"},{"lineNumber":189,"author":{"gitId":"danielpappa"},"content":"- `find project`","lastModifiedDate":"2023-10-05"},{"lineNumber":190,"author":{"gitId":"danielpappa"},"content":"- `find math homework`","lastModifiedDate":"2023-10-05"},{"lineNumber":191,"author":{"gitId":"danielpappa"},"content":"- `find trip to japan`","lastModifiedDate":"2023-10-05"},{"lineNumber":192,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":193,"author":{"gitId":"danielpappa"},"content":"Outcome:","lastModifiedDate":"2023-10-05"},{"lineNumber":194,"author":{"gitId":"danielpappa"},"content":"```","lastModifiedDate":"2023-10-05"},{"lineNumber":195,"author":{"gitId":"danielpappa"},"content":"Here are the tasks matching your input keyword:","lastModifiedDate":"2023-10-05"},{"lineNumber":196,"author":{"gitId":"danielpappa"},"content":"   1. [D] [ ] individual project  (by: Oct 06 2023)","lastModifiedDate":"2023-10-05"},{"lineNumber":197,"author":{"gitId":"danielpappa"},"content":"```","lastModifiedDate":"2023-10-05"},{"lineNumber":198,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":199,"author":{"gitId":"danielpappa"},"content":"### Exiting the program: `bye`","lastModifiedDate":"2023-10-05"},{"lineNumber":200,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":201,"author":{"gitId":"danielpappa"},"content":"Exits the program.  ","lastModifiedDate":"2023-10-05"},{"lineNumber":202,"author":{"gitId":"danielpappa"},"content":"Format: `bye`  ","lastModifiedDate":"2023-10-05"},{"lineNumber":203,"author":{"gitId":"danielpappa"},"content":"- `bye` is **case in-sensitive**, that is `bye` will match `BYE`","lastModifiedDate":"2023-10-05"},{"lineNumber":204,"author":{"gitId":"danielpappa"},"content":"- Words following the command `bye` will be ignored. That is `bye bye Doli`","lastModifiedDate":"2023-10-05"},{"lineNumber":205,"author":{"gitId":"danielpappa"},"content":"will be interpreted in the same way as `bye`","lastModifiedDate":"2023-10-05"},{"lineNumber":206,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":207,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":208,"author":{"gitId":"danielpappa"},"content":"Outcome:","lastModifiedDate":"2023-10-05"},{"lineNumber":209,"author":{"gitId":"danielpappa"},"content":"```","lastModifiedDate":"2023-10-05"},{"lineNumber":210,"author":{"gitId":"danielpappa"},"content":"Alright, I hope I was able to help you out.","lastModifiedDate":"2023-10-05"},{"lineNumber":211,"author":{"gitId":"danielpappa"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-10-05"},{"lineNumber":212,"author":{"gitId":"danielpappa"},"content":"Thank you for your patience, hope to see you soon! Bye!","lastModifiedDate":"2023-10-05"},{"lineNumber":213,"author":{"gitId":"danielpappa"},"content":"```","lastModifiedDate":"2023-10-05"},{"lineNumber":214,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":215,"author":{"gitId":"danielpappa"},"content":"## Saving the data","lastModifiedDate":"2023-10-05"},{"lineNumber":216,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":217,"author":{"gitId":"danielpappa"},"content":"The tasks added to the agenda are saved automatically  as a ","lastModifiedDate":"2023-10-05"},{"lineNumber":218,"author":{"gitId":"danielpappa"},"content":"**.txt file** after each command is successfully carried out.  ","lastModifiedDate":"2023-10-05"},{"lineNumber":219,"author":{"gitId":"danielpappa"},"content":"There is no need to save the data manually.","lastModifiedDate":"2023-10-05"}],"authorContributionMap":{"danielpappa":198,"-":21}},{"path":"settings.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"danielpappa"},"content":"/*","lastModifiedDate":"2023-09-21"},{"lineNumber":2,"author":{"gitId":"danielpappa"},"content":" * This file was generated by the Gradle \u0027init\u0027 task.","lastModifiedDate":"2023-09-21"},{"lineNumber":3,"author":{"gitId":"danielpappa"},"content":" *","lastModifiedDate":"2023-09-21"},{"lineNumber":4,"author":{"gitId":"danielpappa"},"content":" * The settings file is used to specify which projects to include in your build.","lastModifiedDate":"2023-09-21"},{"lineNumber":5,"author":{"gitId":"danielpappa"},"content":" * For more detailed information on multi-project builds, please refer to https://docs.gradle.org/8.3/userguide/building_swift_projects.html in the Gradle documentation.","lastModifiedDate":"2023-09-21"},{"lineNumber":6,"author":{"gitId":"danielpappa"},"content":" */","lastModifiedDate":"2023-09-21"},{"lineNumber":7,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":8,"author":{"gitId":"danielpappa"},"content":"plugins {","lastModifiedDate":"2023-09-21"},{"lineNumber":9,"author":{"gitId":"danielpappa"},"content":"    // Apply the foojay-resolver plugin to allow automatic download of JDKs","lastModifiedDate":"2023-09-21"},{"lineNumber":10,"author":{"gitId":"danielpappa"},"content":"    id \u0027org.gradle.toolchains.foojay-resolver-convention\u0027 version \u00270.4.0\u0027","lastModifiedDate":"2023-09-21"},{"lineNumber":11,"author":{"gitId":"danielpappa"},"content":"}","lastModifiedDate":"2023-09-21"},{"lineNumber":12,"author":{"gitId":"danielpappa"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":13,"author":{"gitId":"danielpappa"},"content":"rootProject.name \u003d \u0027Doli\u0027","lastModifiedDate":"2023-09-21"},{"lineNumber":14,"author":{"gitId":"danielpappa"},"content":"include(\u0027app\u0027)","lastModifiedDate":"2023-09-21"}],"authorContributionMap":{"danielpappa":14}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"danielpappa"},"content":"Mr. Nobody","lastModifiedDate":"2023-10-06"},{"lineNumber":2,"author":{"gitId":"danielpappa"},"content":"help","lastModifiedDate":"2023-10-06"},{"lineNumber":3,"author":{"gitId":"danielpappa"},"content":"todo Daniel Pappalardo: Answer CS2113 tutorial questions","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"danielpappa"},"content":"deadline weekly CS2113 quiz /2023-10-09","lastModifiedDate":"2023-10-03"},{"lineNumber":5,"author":{"gitId":"danielpappa"},"content":"event CS2113 lecture /2023-11-09 /2021-11-10","lastModifiedDate":"2023-10-06"},{"lineNumber":6,"author":{"gitId":"danielpappa"},"content":"list","lastModifiedDate":"2023-10-05"},{"lineNumber":7,"author":{"gitId":"danielpappa"},"content":"mark 1","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"danielpappa"},"content":"mark 2","lastModifiedDate":"2023-10-06"},{"lineNumber":9,"author":{"gitId":"danielpappa"},"content":"list","lastModifiedDate":"2023-10-06"},{"lineNumber":10,"author":{"gitId":"danielpappa"},"content":"unmark 2","lastModifiedDate":"2023-10-06"},{"lineNumber":11,"author":{"gitId":"danielpappa"},"content":"list","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"danielpappa"},"content":"todo","lastModifiedDate":"2023-09-11"},{"lineNumber":13,"author":{"gitId":"danielpappa"},"content":"deadline assignment","lastModifiedDate":"2023-09-11"},{"lineNumber":14,"author":{"gitId":"danielpappa"},"content":"deadline this /2023-45-67","lastModifiedDate":"2023-10-06"},{"lineNumber":15,"author":{"gitId":"danielpappa"},"content":"event class /2023-10-01","lastModifiedDate":"2023-10-03"},{"lineNumber":16,"author":{"gitId":"danielpappa"},"content":"list","lastModifiedDate":"2023-09-21"},{"lineNumber":17,"author":{"gitId":"danielpappa"},"content":"delete 2","lastModifiedDate":"2023-09-21"},{"lineNumber":18,"author":{"gitId":"danielpappa"},"content":"list","lastModifiedDate":"2023-09-21"},{"lineNumber":19,"author":{"gitId":"danielpappa"},"content":"overview 2023-10-30","lastModifiedDate":"2023-10-06"},{"lineNumber":20,"author":{"gitId":"danielpappa"},"content":"find tutorial","lastModifiedDate":"2023-10-05"},{"lineNumber":21,"author":{"gitId":"danielpappa"},"content":"late","lastModifiedDate":"2023-10-06"},{"lineNumber":22,"author":{"gitId":"danielpappa"},"content":"clear","lastModifiedDate":"2023-09-21"},{"lineNumber":23,"author":{"gitId":"danielpappa"},"content":"list","lastModifiedDate":"2023-09-21"},{"lineNumber":24,"author":{"gitId":"danielpappa"},"content":"bye","lastModifiedDate":"2023-10-06"}],"authorContributionMap":{"danielpappa":24}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"danielpappa"},"content":"if ! javac -cp ../app/src/main/java/ -Xlint:none -d ../bin ../app/src/main/java/doli/Doli.java","lastModifiedDate":"2023-10-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"danielpappa"},"content":"java -classpath ../bin doli/Doli \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-09-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"danielpappa":2,"-":36}}]
